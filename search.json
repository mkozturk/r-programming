[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming with R",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "1 - First Steps.html#simple-arithmetic",
    "href": "1 - First Steps.html#simple-arithmetic",
    "title": "1  First steps in R",
    "section": "Simple arithmetic",
    "text": "Simple arithmetic\n\n1 + 2 + 3\n\n\n2 * 3 - 5\n\n[1] 1\n\n\n\n1/2 + 1/4\n\n[1] 0.75\n\n\n\n5^2\n\n[1] 25\n\n\n\nsqrt(25)\n\n[1] 5\n\n\n\nExercises\nEvaluate the following expressions.\n\\(\\frac{1}{2} + \\frac{2}{3} + \\frac{3}{4}\\)\n\\(\\frac{1 + 2/3}{3 - 1/(2/3)}\\)\n\\(1 + \\frac{1}{1 + \\frac{1}{1 + \\frac{1}{2}}}\\)\n\\(\\sqrt{17.4^2 + 3.67^2 - 9.12^2}\\)"
  },
  {
    "objectID": "1 - First Steps.html#variable-assignment",
    "href": "1 - First Steps.html#variable-assignment",
    "title": "1  First steps in R",
    "section": "Variable assignment",
    "text": "Variable assignment\n\nx &lt;- 10 # Read: \"x gets 10\"\n\n\nx\n\n[1] 10\n\n\n\nx &lt;- x + 1\n\n\nx\n\n[1] 11\n\n\n\nExercise\nGiven the variables\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\nupdate the variable account_balance by adding the interest.\n\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\n# write your update below (1 line)\naccount_balance &lt;- account_balance*(1+interest_rate)\n# end of your code\naccount_balance\n\n[1] 1100\n\n\n\n\nExercise\nGiven the variables\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\nfind the value of the account_balance after 5 update periods.\n\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\n# write your code lines below (~5 lines)\naccount_balance &lt;- account_balance*(1+interest_rate)\naccount_balance &lt;- account_balance*(1+interest_rate)\naccount_balance &lt;- account_balance*(1+interest_rate)\naccount_balance &lt;- account_balance*(1+interest_rate)\naccount_balance &lt;- account_balance*(1+interest_rate)\n\n\n# end of your code\naccount_balance\n\n[1] 1610.51\n\n\n\n\nExercise\nEvery year, 1% of the people in city A move to city B, and 2% of people in city B move to city A. If the current populations of city A and city B are 10000 and 20000, respectively, find the populations of both cities after 5 years.\n\ncityA &lt;- 10000\ncityB &lt;- 20000\n# write your code below\ncityA_next &lt;- cityA + 0.02*cityB - 0.01*cityA\ncityB_next &lt;- cityB + 0.01*cityA - 0.02*cityB\ncityA &lt;- cityA_next\ncityB &lt;- cityB_next\n\ncityA_next &lt;- cityA + 0.02*cityB - 0.01*cityA\ncityB_next &lt;- cityB + 0.01*cityA - 0.02*cityB\ncityA &lt;- cityA_next\ncityB &lt;- cityB_next\n# end of your code\ncityA\ncityB\n\n[1] 10591\n\n\n[1] 19409"
  },
  {
    "objectID": "2 - Vectors.html",
    "href": "2 - Vectors.html",
    "title": "2  Data vectors in R",
    "section": "",
    "text": "Creating vectors\nThe most general way to create data vectors is to use the c() function (concatenate).\nheights &lt;- c(1.70, 1.75, 1.62)\nweights &lt;- c(65, 66, 61)\nheights\n\n[1] 1.70 1.75 1.62\nweights\n\n[1] 65 66 61\nVectors can also be created with the colon operator (:)\nx &lt;- 2:10 # assign integers from 2 to 10, inclusive.\nx\n\n[1]  2  3  4  5  6  7  8  9 10\nThe function c() can also be used to add new elements to vectors.\nSuppose initially we have only two pieces of data:\nheights &lt;- c(1.70, 1.75)\nheights\n\n[1] 1.70 1.75\nThen we get another data point, and we extend the vector.\nc(heights, 1.62)\n\n[1] 1.70 1.75 1.62\nheights\n\n[1] 1.70 1.75\nheights &lt;- c(heights, 1.62)\nheights\n\n[1] 1.70 1.75 1.62\nheights &lt;- c(1.62, heights)\nheights\n\n[1] 1.62 1.70 1.75 1.62\nc(heights, heights)\n\n[1] 1.62 1.70 1.75 1.62 1.62 1.70 1.75 1.62\nmode(c(1,2))\nmode(c(\"abc\",\"xyz\"))\nmode(c(TRUE,FALSE))\nmode(2+4i)\n\n[1] \"numeric\"\n\n\n[1] \"character\"\n\n\n[1] \"logical\"\n\n\n[1] \"complex\"\ntypeof(\"abc\")\n\n[1] \"character\"\nIf you add two vectors with the same number of elements, they are added elementwise.\nc(1,4,9) + c(2,16,5)\n\n[1]  3 20 14\nSame applies to all basic operations:\nc(1,4,9) * c(2,16,5)\n\n[1]  2 64 45\nc(1,4,9) / c(2,16,5)\n\n[1] 0.50 0.25 1.80\n3 &gt; 2\n\n[1] TRUE\nc(1,4,9) &gt; c(2,16,5)\n\n[1] FALSE FALSE  TRUE\nIf an arithmetic or logic operation involves a vector and a single number, the same number is recycled with every element.\nc(1,4,9) + 5  # converted to: c(1,4,9) + c(5,5,5)\n\n[1]  6  9 14\nc(1,4,9) &lt; 5  # converted to: c(1,4,9) &lt; c(5,5,5)\n\n[1]  TRUE  TRUE FALSE\nc(1,4,9)^2   # converted to: c(1,4,9) ^ c(2,2,2)\n\n[1]  1 16 81\nFamiliar mathematical functions are designed to apply on vectors elementwise.\nsqrt(c(4,9,16))\n\npi\n\nsin(c(0, pi/4, pi/2, 3*pi/4, pi))  # or: sin( 0:4*pi/4 )\n\nexp(1:5)\n\nlog(exp(1:5))\n\n[1] 2 3 4\n\n\n[1] 3.141593\n\n\n[1] 0.000000e+00 7.071068e-01 1.000000e+00 7.071068e-01 1.224647e-16\n\n\n[1]   2.718282   7.389056  20.085537  54.598150 148.413159\n\n\n[1] 1 2 3 4 5\nweights &lt;- c(65, NA, 61)\nnames &lt;- c(\"Can\",\"Cem\",NA)\nFor readability, we can assign name labels to the elements of a data vector.\nheights &lt;- c(Can=1.70, Cem=1.75, Hande=1.62)\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62\nweights &lt;- c(Can=65, Cem=66, Hande=61)\nweights\n\n  Can   Cem Hande \n   65    66    61\nWe can retrieve these names with the names() function.\nnames(heights)\n\n[1] \"Can\"   \"Cem\"   \"Hande\"\nWe can assign names to the elements of a vector that already exists.\nheights &lt;- c(1.70, 1.75, 1.62)\nnames(heights) &lt;- c(\"Can\",\"Cem\",\"Hande\")\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62\nIf for some reason we want to remove the names, we use the unname() function.\nunname(heights)\n\n[1] 1.70 1.75 1.62\nThe original vector is not changed with this function call, because we did not assign the result to heights.\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62\nWe can access a single element of a vector by providing the index of the element in square brackets.\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62\nheights[1]  # first element\n\nCan \n1.7\nheights[3] # third element\n\nHande \n 1.62\nWe can select a slice of the vector by providing a range inside brackets.\nheights[1:2]  # select from element 1 to element 2, inclusive.\n\n Can  Cem \n1.70 1.75\nWe can also give a vector consisting of element indices.\nheights[c(1,3)]  # select elements 1 and 3.\n\n  Can Hande \n 1.70  1.62\nThe indices do not have to be in order:\nheights[c(2,1,3)]\n\n  Cem   Can Hande \n 1.75  1.70  1.62\nWe can select the same element more than once.\nheights[c(1,1,3,2,3)]\n\n  Can   Can Hande   Cem Hande \n 1.70  1.70  1.62  1.75  1.62\nWe can provide a Boolean (true/false) vector for indexing. This will select only elements with corresponding TRUE values.\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62\nheights[c(T,F,F)]  # T is a shorthand for TRUE, F is for FALSE.\n\nCan \n1.7\nWe can exclude elements using negative indices.\nheights[-1]  # exclude first element.\n\n  Cem Hande \n 1.75  1.62\nheights[c(-1,-3)]  # exclude 1st and 3rd elements\n\n Cem \n1.75\nIf the elements are given names consisting of strings, we can use these names in brackets instead of indices.\nheights[\"Can\"]\n\nCan \n1.7\nheights[c(\"Can\",\"Can\",\"Hande\",\"Cem\",\"Hande\")]\n\n  Can   Can Hande   Cem Hande \n 1.70  1.70  1.62  1.75  1.62\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62\nheights[1] &lt;- 1.72\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62\nheights[1] &lt;- 1.70\nA vector’s size is determined at its creation, and its elements are stored contiguously (side-by-side) in memory. Therefore it is really not possible to add or remove an element in a vector. However, we can reassign the identifier to a new one.\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62\nheights &lt;- c(heights[1:2], Lale=1.76, heights[3])\nheights\n\n  Can   Cem  Lale Hande \n 1.72  1.75  1.76  1.62\nAgain, we cannot directly remove an element from an existing vector, but we can create a new vector without the element we want to delete, and reassign to the name.\nheights\n\n  Can   Cem  Lale Hande \n 1.72  1.75  1.76  1.62\nheights &lt;- heights[-3]  # exclude element 3\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62\nSuppose we define a vector with\nv &lt;- c(3,4,5)\nWhat is the output of the following commands?\nv &lt;- c(3,4,5)\nv &lt;- c(5,v,1:2)\nv\nv &lt;- v[-2]\nv\nv[2:4]\nWe can get the number of elements in a vector using the length() function.\nlength(heights)\n\n[1] 3\nlength(10:17)\n\n[1] 8\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62\nheights &gt; 1.65\n\n  Can   Cem Hande \n TRUE  TRUE FALSE\nUsing this Boolean vector, we can select data points satisfying the condition.\ntall_people &lt;- heights&gt;1.65\ntall_people\n\n  Can   Cem Hande \n TRUE  TRUE FALSE\nheights[tall_people]\n\n Can  Cem \n1.72 1.75\nObviously, this can be done in a single line, too.\nheights[heights&gt;1.65]\n\n Can  Cem \n1.72 1.75\nOne can also filter a vector according to another vector’s values.\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62\nweights\n\n  Can   Cem Hande \n   65    66    61\nweights[ heights &gt; 1.65 ]  # weights of people who are taller than 1.65\n\nCan Cem \n 65  66\nweights\n\n  Ali Hasan Fatma Hande   Cem \n   75    72    60    56    67\nweights[weights &gt; 65] - 1\n\n  Ali Hasan   Cem \n   74    71    66\nweights[weights &gt; 65] &lt;- weights[weights &gt; 65] - 1\nweights\n\n  Ali Hasan Fatma Hande   Cem \n   74    71    60    56    66\nweights[\"Cem\"] &lt;- 66\nweights\n\n  Ali Hasan Fatma Hande   Cem \n   74    71    60    56    66\nThe which() function returns the indices (and labels, if available) of elements in a vector for which a Boolean function returns TRUE.\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62\nheights &gt; 1.65\n\n  Can   Cem Hande \n TRUE  TRUE FALSE\nwhich(heights &gt; 1.65)\n\nCan Cem \n  1   2\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62\nall(heights &gt; 1.60) # TRUE\n\nall(heights &gt; 1.70) # FALSE\n\nany(heights &gt; 1.70) # TRUE\n\n[1] TRUE\n\n\n[1] FALSE\n\n\n[1] TRUE\nThe rep() function can be used to replicate values or vectors a specified number of times.\nrep(3,10)\nrep(\"abc\",5)\nrep(c(1,2,3),5)\nrep(c(1,2,3),length.out=10)\nThe seq() function generates a vector of numbers in arithmetic progression. It is a generalization of the colon(:) operator.\nseq(4,9)  # same as 4:9\nseq(from=12, to=29, by=3)\nseq(from=1.1, to=6, length.out=10)\nsort(heights)\nsort(heights, decreasing = TRUE)\nheights\norder(heights)\nThen we use this ordering with the other vector:\nweights[order(heights)]  # return the weights of people ordered by their heights.\nheights[sort(names(heights))]\nA. Create two vectors area and population that hold the data in the respective columns. Label the elements in each vector with the country name. A. Create a new vector called density that holds the population density of the countries. A. Print the names of countries sorted by population density, in descending order (from highest to lowest)."
  },
  {
    "objectID": "2 - Vectors.html#pause-to-think",
    "href": "2 - Vectors.html#pause-to-think",
    "title": "2  Data vectors in R",
    "section": "Pause to think",
    "text": "Pause to think\nWhat is the output of the operation 2 * c(1,2,3) + 3?\n\n5 7 9\n2 4 6 3\n4 5 6 4 5 6\n1 2 3 1 2 3 3"
  },
  {
    "objectID": "2 - Vectors.html#sum-cumsum",
    "href": "2 - Vectors.html#sum-cumsum",
    "title": "2  Data vectors in R",
    "section": "sum(), cumsum()",
    "text": "sum(), cumsum()\nAdds up all elements in vector\n\nsum(c(1,4,9))\n\n[1] 14\n\n\n\nsum(1:1000)\n\n[1] 500500\n\n\n\ncumsum(1:10)\n\n [1]  1  3  6 10 15 21 28 36 45 55"
  },
  {
    "objectID": "2 - Vectors.html#prod-cumprod",
    "href": "2 - Vectors.html#prod-cumprod",
    "title": "2  Data vectors in R",
    "section": "prod(), cumprod()",
    "text": "prod(), cumprod()\nMultiplies all elements in a vector\n\nprod(c(1,4,9))\n\n[1] 36\n\n\n\nprod(1:5)  # 5!\n\n[1] 120\n\n\n\ncumprod(1:5)\n\n[1]   1   2   6  24 120"
  },
  {
    "objectID": "2 - Vectors.html#pause-to-think-1",
    "href": "2 - Vectors.html#pause-to-think-1",
    "title": "2  Data vectors in R",
    "section": "Pause to think",
    "text": "Pause to think\nWhich of the following commands\ncan be used to calculate\n\\(\\sum_{i=1}^{10} i^2\\)?\n\nsum(1:10^2)\nsum(1:10)^2\nsum((1:10)^2)\nsum(1^2:10^2)"
  },
  {
    "objectID": "2 - Vectors.html#pause-to-think-2",
    "href": "2 - Vectors.html#pause-to-think-2",
    "title": "2  Data vectors in R",
    "section": "Pause to think",
    "text": "Pause to think\nSuppose we define a four-element vector\nv &lt;- c(3,6,2,-1).\nWhich of the following CANNOT be used to select the second and third elements of this vector?\n\nv[2:3]\nv[c(2,3)]\nv[c(6,2)]\nv[c(F,T,T,F)]\nv[c(-1,-4)]"
  },
  {
    "objectID": "2 - Vectors.html#pause-to-think-4",
    "href": "2 - Vectors.html#pause-to-think-4",
    "title": "2  Data vectors in R",
    "section": "Pause to think",
    "text": "Pause to think\nGiven the vectors with named values:\nages &lt;- c(Ali=18, Hasan=21, Fatma=18, Hande=22, Cem=21)\nweights &lt;- c(Ali=75, Hasan=72, Fatma=60, Hande=56, Cem=67)\nwhich of the following commands prints the weights of people who are 18 years old?\n\nweights[ages==18]\nages[weights]==18\nweights[names(ages==18)]\nnames(weights[ages==18])"
  },
  {
    "objectID": "2 - Vectors.html#pause-to-think-5",
    "href": "2 - Vectors.html#pause-to-think-5",
    "title": "2  Data vectors in R",
    "section": "Pause to think",
    "text": "Pause to think\nSuppose a vector named ages holds the ages of a group who want to enter a museum. You want to make sure that there is at least one grownup among them. Which command do you use?\n\nany(ages &gt; 18)\nall(ages &gt; 18)\nany(ages &lt; 18)\nall(ages &lt; 18)"
  },
  {
    "objectID": "2 - Vectors.html#pause-to-think-6",
    "href": "2 - Vectors.html#pause-to-think-6",
    "title": "2  Data vectors in R",
    "section": "Pause to think",
    "text": "Pause to think\nSuppose a vector named ages holds the ages of a group who want to enter a bar. You want to make sure that everybody is of proper age to drink. Which command do you use?\n\nany(ages &gt; 18)\nall(ages &gt; 18)\nany(ages &lt; 18)\nall(ages &lt; 18)"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html",
    "href": "3 - Basic plotting and random numbers.html",
    "title": "3  Basic plotting",
    "section": "",
    "text": "Pseudorandom number generation\nUniformly distributed random numbers are generated with runif(n, min, max). Default parameters are n=1, min=0, max=1.\nrunif(20,-1,1) # 20 random numbers, uniformly distributed between -1 and 1.\n\n [1] -0.03674666 -0.35679881 -0.25188184 -0.94379481 -0.95229034  0.38578998\n [7]  0.77819561  0.77290635  0.60000088 -0.37352833  0.38281662 -0.20297454\n[13] -0.50654175  0.83902485  0.96692597 -0.05960921  0.19484380  0.16816088\n[19]  0.16469892 -0.91137705\nrunif(20,-1,1) # 20 random numbers, uniformly distributed between -1 and 1.\n\n [1] -0.99960046  0.92772070 -0.44031180 -0.99912570 -0.77329063  0.19277507\n [7]  0.22011553 -0.56074349  0.45520446 -0.03077426 -0.84360023 -0.79955721\n[13] -0.18423274  0.17201921  0.49655225  0.08953144  0.06948482 -0.87705299\n[19]  0.74872397 -0.85818209\nAnother common distribution is the Normal or Gaussian distribution (a.k.a. the bell curve). Normally distributed random numbers are generated with the rnorm(n,mean,sd) function. Default parameter values are n=1, mean=0, sd=1.\nrnorm(20)\n\n [1] -0.23453574  0.97287698  1.11981869  1.05351310 -0.19237006 -0.35011250\n [7]  1.09936774  0.36618773 -0.29395589  0.23269246  0.12114332  1.51112015\n[13]  1.53751555  0.20948435  0.08775895 -1.02645631  0.78993523 -2.00644444\n[19] -0.65042253  0.98378661\noptions(repr.plot.width=8, repr.plot.height=3)\nplot(runif(1000,-1,1)); title(\"Uniformly distributed numbers\")\nplot(rnorm(1000)); title(\"Normally distributed numbers, sd=1\")\nplot(rnorm(1000,sd=10)); title(\"Normally distributed numbers, sd=10\")\nPlot the histograms of the random samples.\nhist(runif(1000,-1,1), breaks=25, main=\"Uniformly distributed numbers\")\nhist(rnorm(1000), breaks=25,main=\"Normally distributed numbers\")\nNote that the distributions are not perfectly smooth. The reason is that our random sample is finite. As we draw more and more samples, the histogram will approach the theoretical distribution.\nhist(runif(100000,-1,1), breaks=30, main=\"Uniformly distributed numbers\")\nhist(rnorm(100000), breaks=30, main=\"Normally distributed numbers\")"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#simple-scatter-plots",
    "href": "3 - Basic plotting and random numbers.html#simple-scatter-plots",
    "title": "3  Basic plotting",
    "section": "Simple scatter plots",
    "text": "Simple scatter plots\n\nScatter plots and line plots are created with the plot command. (Use help(plot) for detailed description.)\nSimplest use: plot(y) or plot(x,y).\n\n\nplot(c(1,3,5,4,6))\n\n\n\n\nA plot with separate x and y coordinate vectors\n\nmy_x_values &lt;- c(-2, -1.5, 0, 1.7, 2.3)\nmy_y_values &lt;-  c(1,3,5,4,6)\nplot(my_x_values, my_y_values)"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#plotting-a-mathematical-expression",
    "href": "3 - Basic plotting and random numbers.html#plotting-a-mathematical-expression",
    "title": "3  Basic plotting",
    "section": "Plotting a mathematical expression",
    "text": "Plotting a mathematical expression\n\nx &lt;- -5:5\ny &lt;- x^2\nplot(x, y)"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#change-the-axis-labels-and-the-title",
    "href": "3 - Basic plotting and random numbers.html#change-the-axis-labels-and-the-title",
    "title": "3  Basic plotting",
    "section": "Change the axis labels and the title",
    "text": "Change the axis labels and the title\n\nheights &lt;- c(1.70, 1.67, 1.75, 1.62, 1.81)\nweights &lt;- c(65, 70, 66, 61, 85)\nplot(heights, weights, xlab=\"height (m)\", ylab=\"weight (kg)\")\ntitle(\"Weight vs. height\")"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#change-the-marker-shape-and-color",
    "href": "3 - Basic plotting and random numbers.html#change-the-marker-shape-and-color",
    "title": "3  Basic plotting",
    "section": "Change the marker shape and color",
    "text": "Change the marker shape and color\n\nplot(heights, weights, pch=4, col=\"red\", xlab=\"height (m)\", ylab=\"weight (kg)\")\ntitle(\"Weight vs. height\")\n\n\n\n\nFor details of setting the marker shape, size, and color see this document: https://www.statmethods.net/advgraphs/parameters.html"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#pause-to-think",
    "href": "3 - Basic plotting and random numbers.html#pause-to-think",
    "title": "3  Basic plotting",
    "section": "Pause to think",
    "text": "Pause to think\nGiven the variables\nx &lt;- -5:5\ny &lt;- 1 - x^2 / 25\nwhich of the following options can be used to generate the following plot? \n(A) plot(x, y, col=\"blue\", xlab=\"distance\", ylab=\"height\")\n(B) plot(y, x, col=\"blue\", xlab=\"height\", ylab=\"distance\")\n(C) plot(x, y, col=\"red\", xlab=\"distance\")\n(D) plot(x, y, col=\"blue\")"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#line-plots",
    "href": "3 - Basic plotting and random numbers.html#line-plots",
    "title": "3  Basic plotting",
    "section": "Line plots",
    "text": "Line plots\n\nheights &lt;- c(1.70, 1.67, 1.75, 1.62, 1.81)\nweights &lt;- c(65, 70, 66, 61, 85)\nplot(heights, weights, type=\"l\")\n\n\n\n\nIn this particular case, ordering with respect to heights produces a more pleasing plot.\n\nplot(sort(heights), weights[order(heights)], type=\"l\")"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#function-plotting",
    "href": "3 - Basic plotting and random numbers.html#function-plotting",
    "title": "3  Basic plotting",
    "section": "Function plotting",
    "text": "Function plotting\nPlot the function \\(y(x) = \\mathrm{e}^{-0.1x^2}\\sin(x)\\).\n\nx &lt;- seq(-10, 10, length.out = 201)\ny &lt;- exp(-0.1*x^2)*sin(x)\nplot(x, y, type=\"l\", col=\"darkgreen\")\ntitle(\"A function\")"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#plotting-two-functions-together",
    "href": "3 - Basic plotting and random numbers.html#plotting-two-functions-together",
    "title": "3  Basic plotting",
    "section": "Plotting two functions together",
    "text": "Plotting two functions together\nPlot the functions \\(y_1(x) = \\mathrm{e}^{-0.1x^2}\\sin(x)\\) and \\(y_2(x) = \\sin(x)\\) on the same graph.\n\nx &lt;- seq(-10,10, length.out = 101)\ny1 &lt;- exp(-0.1*x^2)*sin(x)\ny2 &lt;- sin(x)\nplot(x, y1, type=\"l\", col=\"red\")\npoints(x, y2, type=\"l\", col=\"blue\")\ntitle(\"Two functions\")\n\n\n\n\nThe y-axis limits are set according to the first plot, so the second plot appears cropped. To fix this, let’s set the limits manually.\n\nplot(x, y1, ylim=c(-1.1, 1.1), type=\"l\", col=\"red\")\npoints(x, y2, type=\"l\", col=\"blue\")\n#points(x, cos(x), type=\"l\", col=\"darkgreen\")\ntitle(\"Two functions\")"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#histograms",
    "href": "3 - Basic plotting and random numbers.html#histograms",
    "title": "3  Basic plotting",
    "section": "Histograms",
    "text": "Histograms\nA histogram divides the range of the data into “bins”, displays the count of points in each bin.\n\nx &lt;- c(rep(17,4), rep(18,7), rep(19,5), rep(20,5), rep(21,4))  # rep(17,4) -&gt; (17,17,17,17)\nx\n\n [1] 17 17 17 17 18 18 18 18 18 18 18 19 19 19 19 19 20 20 20 20 20 21 21 21 21\n\n\n\nhist(x, col=\"blue\")\n\n\n\n\nSpecify the break points of the histogram:\n\nhist(x, col=\"red\", breaks=15:22)\n\n\n\n\nShow the density instead of bin counts:\n\nhist(x, col=\"skyblue\", breaks=15:22, freq=FALSE)"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#exercises",
    "href": "3 - Basic plotting and random numbers.html#exercises",
    "title": "3  Basic plotting",
    "section": "Exercises",
    "text": "Exercises\n\nReproduce the scatterplot of the weights vector versus the heights vector, changing the markers to green filled circles.\nPick five different functions from your MATH 101 book and plot them.\nThe Taylor expansion of a function is a polynomial approximation to that function around a chosen point. For example, the Taylor expansion to \\(\\sin(x)\\) around \\(x=0\\) is the infinite series: \\[ \\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\cdots\\].\n\nWhen we stop the terms at some points, the resulting polynomial becomes an approximation to \\(\\sin(x)\\) around \\(x=0\\). For example, if we use only the first term, our approximation is: \\[\\sin(x)\\approx x\\] If we use the first two terms, the approximation has less error: \\[\\sin(x)\\approx x - \\frac{x^3}{3!}\\] etc.\n\n\n\n300px-Sintay_SVG.svg.png\n\n\nPlot the sine function from \\(x=-4\\) to \\(x=4\\) in red, and then plot each approximation, up to four terms, on the same frame. Observe how the subsequent polynomials converge to the sine function."
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#pause-to-think-1",
    "href": "3 - Basic plotting and random numbers.html#pause-to-think-1",
    "title": "3  Basic plotting",
    "section": "Pause to think",
    "text": "Pause to think\nWhich command generates numbers with the largest “spread”?\n(A) rnorm(1000, mean=0, sd=1)\n(B) rnorm(10000, mean=0, sd=1)\n(C) rnorm(1000, mean=0, sd=10)\n(D) rnorm(1000, mean=10, sd=1)"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#generating-synthetic-data",
    "href": "3 - Basic plotting and random numbers.html#generating-synthetic-data",
    "title": "3  Basic plotting",
    "section": "Generating “synthetic data”",
    "text": "Generating “synthetic data”\nBy adding random “noise” to deterministic vectors, we can simulate a real-life data set where the underlying “law” is \\(y=x\\).\n\nx &lt;- seq(0,10, length.out = 101)\ny &lt;- x + rnorm(length(x), sd=0.5)\nplot(x,y)"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#getting-the-same-random-sequence",
    "href": "3 - Basic plotting and random numbers.html#getting-the-same-random-sequence",
    "title": "3  Basic plotting",
    "section": "Getting the same random sequence",
    "text": "Getting the same random sequence\nIn some cases we want to get the same random sequence in every simulation, so that we can identify and correct errors. For that, we can set the seed of the random number generator to a fixed number.\n\nset.seed(1234)\nrunif(10,-1,1)\nset.seed(1234)\nrunif(10,-1,1)\n\n [1] -0.77259318  0.24459881  0.21854947  0.24675888  0.72183077  0.28062121\n [7] -0.98100849 -0.53489899  0.33216752  0.02850228\n\n\n [1] -0.77259318  0.24459881  0.21854947  0.24675888  0.72183077  0.28062121\n [7] -0.98100849 -0.53489899  0.33216752  0.02850228"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#choosing-a-vector-element-randomly",
    "href": "3 - Basic plotting and random numbers.html#choosing-a-vector-element-randomly",
    "title": "3  Basic plotting",
    "section": "Choosing a vector element randomly",
    "text": "Choosing a vector element randomly\nThe sample function allows us to selected elements randomly from a given vector.\nBy default, it chooses elements without replacement. So, an element is chosen at most once.\n\nx &lt;- 11:20\nsample(x)\n\n [1] 15 12 16 17 13 14 20 18 11 19\n\n\nTo choose elements with replacement, we set the replace parameter to TRUE.\n\nsample(x, 10, replace = TRUE)\n\n [1] 18 13 16 11 11 19 18 20 11 18\n\n\nCoin toss experiment\n\n\ntosses &lt;- sample(c(\"H\",\"T\"),size=10,replace = TRUE)\ntosses\n\n [1] \"H\" \"H\" \"H\" \"T\" \"H\" \"T\" \"H\" \"H\" \"H\" \"T\"\n\n\nWe throw a coin 10 times. How many heads do we get on average?\nThe number of heads in one experiment (10 throws):\n\ntosses==\"H\"\n\n [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE\n\n\n\nsum(tosses==\"H\")\n\n[1] 7\n\n\nThis number changes every time due to the randomness:\n\ntosses &lt;- sample(c(\"H\",\"T\"),10,replace = TRUE)\nsum(tosses==\"H\")\n\n[1] 6\n\n\nIn order to get the expected number of heads, we need to repeat the experiment many times and average over the outcomes. (See “loops” later.)\nSuppose you gamble with a coin: You gain 1 TL if it comes heads, and lose 1 TL otherwise. You repeat the coin toss 5 times. What is your balance at every step of the game?\nOur gain is +1 if heads, and -1 if tails. To simplify the accounting, let us sample from (-1,1) and get the cumulative sum.\n\noutcomes &lt;- sample(c(-1,1), 5, replace=TRUE)\noutcomes\ncumsum(outcomes)\n\n[1]  1  1  1 -1  1\n\n\n[1] 1 2 3 2 3\n\n\nRepeat the coin toss 100 times. The balance looks as follows.\n\noptions(repr.plot.width=10, repr.plot.height=4)\nx &lt;- cumsum(sample(c(-1,1), 100, replace=TRUE))\nplot(x, type=\"o\")\n\n\n\n\nThis is called a random walk."
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#throwing-dice",
    "href": "3 - Basic plotting and random numbers.html#throwing-dice",
    "title": "3  Basic plotting",
    "section": "Throwing dice",
    "text": "Throwing dice\n\nd1 &lt;- sample(1:6, 10, replace=TRUE)\nd2 &lt;- sample(1:6, 10, replace=TRUE)\nd1\nd2\n\n [1] 4 3 1 3 4 4 3 4 4 5\n\n\n [1] 1 3 5 4 6 5 6 2 2 5\n\n\nSimulating the outcome of a pair of dice:\n\nd1 + d2\n\n [1]  5  6  6  7 10  9  9  6  6 10\n\n\nNow throw two dice 1000 times and plot a histogram of the total outcomes.\n\nd1 &lt;- sample(1:6, 100000, replace=TRUE)\nd2 &lt;- sample(1:6, 100000, replace=TRUE)\n\n\nhist(d1+d2, breaks = 1:12)"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#pause-to-think-2",
    "href": "3 - Basic plotting and random numbers.html#pause-to-think-2",
    "title": "3  Basic plotting",
    "section": "Pause to think",
    "text": "Pause to think\nSuppose we throw a single die 100 times. Which of the following can be used to count how many times a six comes up?\n(A) sum(sample(c(\"H\",\"T\"),100, replace = TRUE)==\"6\")\n\n(B) sum(sample(1:6, 100, replace = TRUE) == 6)\n\n(C) sum(sample(1:100, 6, replace = TRUE) == 6)\n\n(D) sum(sample(1:6, 100) == 6)\nEstimating pi\n\nSuppose we generate random number pairs \\((x,y)\\) within the square \\(-1\\leq x\\leq 1\\) and \\(-1\\leq y\\leq 1\\). Some of them fall inside the inscribed circle \\(x^2 + y^2 \\leq 1\\).\n\n\n\nimage.png\n\n\nThe area of the circle is \\(\\pi\\) and the area of the square is 4, so the ratio (points inside the circle) / (points inside the square) gives an estimate of \\(\\pi/4\\).\n\nx &lt;- runif(100,-1,1)\ny &lt;- runif(100,-1,1)\n\n\noptions(repr.plot.width=4, repr.plot.height=4)\n# plot the random points:\nplot(x, y, asp=1)\n# plot the unit circle:\nt &lt;- seq(0,2*pi, length.out=100)\nxx &lt;- cos(t)\nyy &lt;- sin(t)\nlines(xx,yy,lwd = 3,col=\"red\")\n\n\n\n\nLet’s estimate pi with this run:\n\n4*sum(x^2 + y^2 &lt;= 1)/length(x)\n\n[1] 3.08\n\n\nWith a new set of random hits, the estimate will differ:\n\nx &lt;- runif(100,-1,1)\ny &lt;- runif(100,-1,1)\n4*sum(x^2 + y^2 &lt; 1)/length(x)\n\n[1] 3.32"
  },
  {
    "objectID": "3 - Basic plotting and random numbers.html#exercises-1",
    "href": "3 - Basic plotting and random numbers.html#exercises-1",
    "title": "3  Basic plotting",
    "section": "Exercises",
    "text": "Exercises\n\nWrite an R expression that simulates the outcome of the 6/49 Lottery (Sayısal Loto), where one draws 6 numbers from 1, 2, …, 49. Note that the same number cannot appear twice in one drawing.\nGenerate 1000 random numbers, drawn from the normal distribution with standard deviation 2, and another 1000 with standard deviation 0.5. Plot the histogram for each set of numbers. What can you say about the effect of the standard deviation?\nThrow 10 coins and count the number of heads. Repeat this experiment ten times, and find the mean of the number of heads.\nThrow 3 dice 10000 times. Plot the histogram of the outcomes (outcomes should be between 3 and 18)."
  },
  {
    "objectID": "4 - Functions.html",
    "href": "4 - Functions.html",
    "title": "4  Functions",
    "section": "",
    "text": "A first example\nLet us define a function that returns the square of a given number.\nsquare &lt;- function(x) {\n    return(x^2)\n}\nWe call the function by providing the input value as an argument. The function returns a value, which we can store in a variable.\nfoo &lt;- square(3)\nfoo\n\n[1] 9\nIf we type a function’s name and press Enter, we get back the definition of the function.\nsquare\n\nfunction(x) {\n    return(x^2)\n}\nThe return statement is optional. The function returns the value of the last expression in its block. So the function square() can also be defined as:\nsquare &lt;- function(x) {\n    print(x)\n    x^2\n    }\nsq3 &lt;- square(3)\nsq3\n\n[1] 3\n\n\n[1] 9\nsquare &lt;- function(x) x^2\nsquare(3)\n\n[1] 9\nA function can be defined with any number of arguments.\nf &lt;- function(x,y,z){\n    return(x + y*z)\n}\nf(1,2,3)\n\n[1] 7\nIt is possible to change the order of arguments by providing the names explicitly.\nf(z=3,x=1,y=2)\n\n[1] 7\nYou can even omit some names, and the unnamed arguments will be matched in order.\nf(z=3,1,2)\n\n[1] 7\nThe return value of the function can be any R object, such as a number, a vector, a matrix, a list, etc.\nsumdiff &lt;- function(x,y){\n    return( c(x+y, x-y) )\n}\n\nsumdiff(5,8)\n\n[1] 13 -3\nA function itself is an R object, therefore we can easily write functions that return functions.\npowerfun &lt;- function(p){\n    return(function(y){return(y^p)})\n}\n# same as:\n# powerfun &lt;- function(p) function(x) x^p\nsq &lt;- powerfun(2)\ncube &lt;- powerfun(3)\nsq\n\nfunction(y){return(y^p)}\n&lt;environment: 0x5630ba1e5420&gt;\nsq(5)\ncube(5)\n\n[1] 25\n\n\n[1] 125\nSometimes we call a function not for its return value, but for its side effect, such as generating a plot.\nplot_random_walk &lt;- function(n){\n    x &lt;- cumsum(sample(c(-1,1), n, replace=TRUE))\n    plot(x, type=\"o\", xlab=\"step number\", ylab=\"Distance from origin\")\n    title(\"A random walk\")\n}\nset.seed(7652)\nplot_random_walk(100)\nThe simple function square() defined above happens to work with vector arguments without any modification, because the returned statement x^2 is valid for both numbers and vectors.\nsquare &lt;- function(x) x^2\nsquare(c(1,2,3,4,5))\n\n[1]  1  4  9 16 25\nHowever, functions are not always applicable with vector arguments as they are. For example:\naddupto &lt;- function(n) sum(1:n)\naddupto(10)\n\n[1] 55\nWhen we call this function with a vector argument, only the first element is taken, and a warning message is issued\naddupto(c(10,20)) # sum(1:c(10,20))\n\nWarning message in 1:n:\n“numerical expression has 2 elements: only the first used”\n\n\n[1] 55\nIf you want this function to work with vector input, the preferred way in R is to use the built-in sapply function, which maps a function on each element of a vector.\nsapply(c(10,20, 30, 40, 50), addupto)\nc(addupto(10), addupto(20), addupto(30), addupto(40), addupto(50))\n\n[1]   55  210  465  820 1275\n\n\n[1]   55  210  465  820 1275\nWhen you define a function, you can set some of the arguments to default values. Then you don’t have to specify them at each call.\nf &lt;- function(capital, interest_rate=0.1) {\n    capital * (1+interest_rate)\n}\nWithout specifying the interest_rate value, 0.1 is assumed.\nf(1000)\n\n[1] 1100\nBut if you want to change it, you can provide it as an extra argument.\nf(1000, 0.2)\n\n[1] 1200\nf(capital = 1000, interest_rate = 0.2)\n\n[1] 1200\nYou can also change the order of the arguments when you use parameter names.\nf(interest_rate=0.2, capital=1000)\n\n[1] 1200\na &lt;- 5 # a global variable\n\nf &lt;- function(){\n    b &lt;- 10 # a local variable\n    cat(\"inside f(): a =\",a,\"b =\",b,\"\\n\")\n}\n\nf()\ncat(\"outside f(): a =\",a,\" \")\ncat(\"b =\",b)\n\ninside f(): a = 5 b = 10 \noutside f(): a = 5  \n\n\nERROR: Error in cat(\"b =\", b): object 'b' not found\nA local variable temporarily overrides a global variable with the same name.\na &lt;- 5 # a global variable\ncat(\"before f(): a =\",a,\"\\n\")\n\nf &lt;- function(){\n    a &lt;- 10 # a local variable\n    cat(\"inside f(): a =\",a,\"\\n\")\n}\n\nf()\ncat(\"after f(): a =\",a)\n\nbefore f(): a = 5 \ninside f(): a = 10 \nafter f(): a = 5\nAlthough the values of variables defined in upper levels are available in lower levels, they cannot be modified in a lower level, because an attempt in assignment will create only a local variable with the same name.\nUsing the superassignment operator &lt;&lt;- it is possible to assign to a variable in the higher level.\na &lt;- 5\ncat(\"before f(): a =\",a,\"\\n\")\n\nf &lt;- function(){\n    a &lt;&lt;- 10\n    cat(\"inside f(): a =\",a,\"\\n\")\n}\n\nf()\ncat(\"after f(): a =\",a)\n\nbefore f(): a = 5 \ninside f(): a = 10 \nafter f(): a = 10\nHowever, this is not recommended in general. You almost never need this.\nTo modify a global variable, the most transparent way is to assign the function output to it explicitly.\na &lt;- 5\ncat(\"before f(): a =\",a,\"\\n\")\n\nf &lt;- function(x) {x+5}\na &lt;- f(a)\ncat(\"after f(): a =\",a)\n\nbefore f(): a = 5 \nafter f(): a = 10\nSome functions take an unlimited number of arguments, e.g. c().\nc(1,2,3)\nc(4,2,6,1,3,5,1)\n\n[1] 1 2 3\n\n\n[1] 4 2 6 1 3 5 1\nThe c() function is defined with an ellipsis (three dots) as the argument list.\nhelp(c)\nEllipsis has two use cases: * Write a function with any number of arguments (like c() or sum()). * Pass some arguments to another function, called inside the current function\nplot_random_walk &lt;- function(n, ...){\n    x &lt;- cumsum(sample(c(-1,1), n, replace=TRUE))\n    plot(x, type=\"o\", ...)\n}\noptions(repr.plot.width=10, repr.plot.height=4)\nplot_random_walk(100)\nplot_random_walk(100, \n                 pch=4, \n                 col=\"red\", \n                 main=\"A random walk\", \n                 xlab=\"step number\", \n                 ylab=\"displacement\")\nThe ellipsis can be converted to a vector for processing inside the function.\ndiff &lt;- function(...) {\n    # returns the difference between the first and the last argument\n    arguments &lt;- c(...)\n    cat(\"Number of arguments = \",length(arguments))\n    arguments[length(arguments)] - arguments[1] # last argument minus first argument\n}\ndiff(1,4,2)\ndiff(1,4,2,6,3,1)\n\nNumber of arguments =  3\n\n\n[1] 1\n\n\nNumber of arguments =  6\n\n\n[1] 0\nEllipsis arguments can have arbitrary names, and can be converted to a list object (more on lists later).\nf &lt;- function(...){\n    args &lt;- list(...)\n    print(args)\n}\nf(a=1, b=3, foo=7654)\n\n$a\n[1] 1\n\n$b\n[1] 3\n\n$foo\n[1] 7654"
  },
  {
    "objectID": "4 - Functions.html#exercises",
    "href": "4 - Functions.html#exercises",
    "title": "4  Functions",
    "section": "Exercises",
    "text": "Exercises\nWrite a function with the name FtoC that takes a temperature measurement in degrees Fahrenheit, and returns the equivalent value in degrees Celsius. Make sure that your function works with vector input, too.\n\nWrite a function with the name bmi that takes two arguments, height and weight, and returns the body-mass index calculated with these argument values. The function should work with vector input, too.\n\nWrite a function named range that takes a vector of numbers, and returns the difference between its minimum and the maximum elements. Test your function with some randomly-generated vectors."
  },
  {
    "objectID": "5 - Decision structures.html",
    "href": "5 - Decision structures.html",
    "title": "5  CMPE 140 – Conditional execution",
    "section": "",
    "text": "Example\ngrade &lt;- 45\nif(grade&gt;50){\n    \"Passed!\"\n}\ngrade &lt;- 40\nnumber_passed &lt;- 0\nif (grade&gt;50) {\n    number_passed &lt;- number_passed + 1\n    \"Passed\"\n}\nnumber_passed\n\n[1] 0\nNote that if we omit the braces, the code still works but it is incorrect.\ngrade &lt;- 40\nnumber_passed &lt;- 0\nif (grade&gt;50) \n    number_passed &lt;- number_passed + 1\n    \"Passed\"\n\nnumber_passed\n\n[1] \"Passed\"\n\n\n[1] 0\nThis occurs because, without braces, this code is equivalent to:\nSo that the message \"Passed\" appears even though the condition is FALSE, but number_passed is not incremented.\nOne way:\npassed &lt;- function(grade){\n    if (grade&gt;50) {\n        retval &lt;- \"Passed!\"\n    }\n    if (grade &lt;= 50) {\n        retval &lt;- \"Failed\"\n    }\n    retval\n}\npassed(45)\n\n[1] \"Failed\"\nBetter way: Using the else statement together with if.\ngrade &lt;- 55\nif (grade&gt;50) \"Passed!\" else \"Failed.\"\n\n[1] \"Passed!\"\nIn the examples above, we have used the &gt; (greater than) operator. There are several such operators for comparing values. Each of these expressions return Boolean (True/False) values.\n2 &lt; 5\n2 &gt;= 5\n1 == 2\n1 != 2\n\n[1] TRUE\n\n\n[1] FALSE\n\n\n[1] FALSE\n\n\n[1] TRUE\nYou should not check the equality of floating-point numbers directly. The limits of internal representation (truncation error and roundoff error) sometimes make some numbers differ, even though they should be theoretically the same.\nx &lt;- 10.1 - 10\ny &lt;- 0.1\nx == y\n\n[1] FALSE\nabs(x-y)&lt;1e-15\n\n[1] TRUE\nThe all.equal() function is designed to check for almost-equality, within the errors of the machine.\nall.equal(x,y)\n\n[1] TRUE\nWhen used with vectors, these operations are applied elementwise, and a Boolean vector is returned.\nx &lt;- c(2,3,4)\ny &lt;- c(6,1,4)\nx &gt;= y\n\n[1] FALSE  TRUE  TRUE\nNote that the if() statement expects a single True/False value as an argument. When it receives a Boolean vector, it uses only the first element to make the comparison.\nif (x&gt;=y) \"foo\" else \"bar\"\n\nWarning message in if (x &gt;= y) \"foo\" else \"bar\":\n“the condition has length &gt; 1 and only the first element will be used”\n\n\n[1] \"bar\"\nIf you want to check if the relation holds for every pair of elements in x and y, you should use the all() function.\nx &lt;- c(2,3,4)\ny &lt;- c(1,0,5)\nx&gt;=y\nall(x&gt;=y)\nif(all(x&gt;=y)) \"foo\" else \"bar\"\nany(x&gt;=y)\nif(any(x&gt;=y)) \"foo\" else \"bar\"\n\n[1]  TRUE  TRUE FALSE\n\n\n[1] FALSE\n\n\n[1] \"bar\"\n\n\n[1] TRUE\n\n\n[1] \"foo\"\nOften, we need to combine two or more conditions in order to get a more complicated condition. For example\nEvery logical condition can be expressed by combining AND, OR, and NOT operators.\nx &lt;- c(T, F, T, F)\ny &lt;- c(F, T, T, F)\nx & y\nx | y\n!x\n\n[1] FALSE FALSE  TRUE FALSE\n\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n\n[1] FALSE  TRUE FALSE  TRUE\nAs seen above, & and | operators can take vector operands, and return a vector of Booleans. In contrast, && and || operators work with scalars and return only a single Boolean value. If vectors are given to them as operands, they use only the first elements of these vectors.\n(1&gt;2) && (3&lt;5)\n\n[1] FALSE\nc(T,F) || c(F,F)  # same as T || F\n\n[1] TRUE\nThis distinction exists because if() should take only a single Boolean value for comparison. It would not be correct to use & with if, though it will give us an answer based on the first elements.\nx &lt;- c(TRUE, FALSE, TRUE)\ny &lt;- c(TRUE, TRUE, FALSE)\nif (x && y) \"Both True!\"\n\n[1] \"Both True!\"\nif (x & y) \"Both TRUE\"\n\nWarning message in if (x & y) \"Both TRUE\":\n“the condition has length &gt; 1 and only the first element will be used”\n\n\n[1] \"Both TRUE\"\nThe “top hat function” has the value 1 between 0 and 1, and 0 everywhere else.\nWhich of the following statements can NOT be used to get the value of the top hat function? (Can be more than one.)\nA. if (x&gt;=0) { if (x&lt;=1) 1} else 0\nB. if (x&gt;=0) { if (x&lt;=1) 1 else 0} else 0\nC. if (x&gt;=0 && x&lt;=1) 1 else 0\nD. if (x&lt;0 && x&gt;1) 0 else 1\nConsider the following task: We have a vector composed of the ages of people.\nages &lt;- c(Ali=16, Fatma=9, Mehmet=65, Elif=41, Zehra=12)\nages\n\n   Ali  Fatma Mehmet   Elif  Zehra \n    16      9     65     41     12\nBased on this, we want to create a vector with two values: \"Child\" or \"Adult\".\nUsing if-else with this vector does not work because it expects a single True/False value.\nif(ages&lt;18) \"Child\" else \"Adult\"\n\nWarning message in if (ages &lt; 18) \"Child\" else \"Adult\":\n“the condition has length &gt; 1 and only the first element will be used”\n\n\n[1] \"Child\"\nTo get a vector consisting of desired values, we use the vectorized function ifelse().\nages&lt;18\n\n   Ali  Fatma Mehmet   Elif  Zehra \n  TRUE   TRUE  FALSE  FALSE   TRUE\nifelse(ages&lt;18, \"Child\",\"Adult\")\n\n    Ali   Fatma  Mehmet    Elif   Zehra \n\"Child\" \"Child\" \"Adult\" \"Adult\" \"Child\"\nThis could also be done with vector filtering, albeit in a more clumsy way.\ntemp &lt;- ages\ntemp[1:length(temp)] &lt;- \"Adult\"\ntemp[ages&lt;18] &lt;- \"Child\"\ntemp\n\n    Ali   Fatma  Mehmet    Elif   Zehra \n\"Child\" \"Child\" \"Adult\" \"Adult\" \"Child\"\nAny kind of statements can be put into an if-block, including other if statements. This allows us to make successive decisions. For example, here is a code that prints the level of a grade.\nx &lt;- 20\nif (x&gt;75) {\n    \"Top\"\n} else {\n    if (x&gt;50) {\n     \"Middle\"\n    } else {\n        if (x&gt;25) {\"Low\"\n        } else { \"Bottom\" }\n\n[1] \"Bottom\"\nThe same structure can also be written in one line, but it would not be very readable.\nx &lt;- 25\nif (x&gt;75) \"Top\" else if (x&gt;50) \"Middle\" else if (x&gt;25) \"Low\" else \"Bottom\"\n\n[1] \"Bottom\"\nGiven the function\nwhich option has the value FALSE?\nA. f(2) == 1\nB. f(3) == 2\nC. f(4) == 3\nD. f(5) == 4\nHere is a nested if-else structure that determines the region where a given point belongs.\nx &lt;- 2\ny &lt;- -3\nif(x&gt;0) {\n    if(y&gt;0) {\n        \"upper right\"\n    } else {  # y&lt;=0\n        \"lower right\"\n    }\n} else {  # x&lt;=0\n    if(y&gt;0) {\n        \"upper left\"\n    } else { # y&lt;=0\n        \"lower left\"\n    }\n}\n\n[1] \"lower right\"\nAnother version of the same program:\nx &lt;- 5\ny &lt;- -3\nypos &lt;- if (y&gt;0) \"upper\" else \"lower\"\nxpos &lt;- if (x&gt;0) \"right\" else \"left\"\ncat(ypos,xpos)\n\nlower right\nAs another example, let us read an integer, and produce a response according to whether it is negative, divisible by two, or divisible by three.\nn &lt;- 6\nif (n&lt;0) {\n    \"Negative.\"\n} else {\n    if (n%%2 == 0) {\n        \"Divisible by 2.\"\n    } else {\n        if (n%%3 == 0) {\n            \"Divisible by 3.\"\n        } else {\n            \"Nonnegative, not divisible by 2 or 3.\"\n        }\n    }\n}\n\n[1] \"Divisible by 2.\"\nA particular homework is graded with A, B, C, or D according to the following scheme:\nWrite an R program that reads the score from the user and prints the corresponding grade.\nA bank has a variable interest rate depending on the account balance. The interest rate is 20% for balances less than 10,000 TL, 22% for balances up to 100,000 TL, and 25% for higher balances.\nWrite a function named interest that takes the current balance as its parameter, and returns the interest due according to this scheme."
  },
  {
    "objectID": "5 - Decision structures.html#if-else-one-liner",
    "href": "5 - Decision structures.html#if-else-one-liner",
    "title": "5  CMPE 140 – Conditional execution",
    "section": "if-else one liner",
    "text": "if-else one liner\nThe if-else statement is actually a function, returning the last statement in the executed block. We can use this feature to capture the output of the if-else and store it in a variable.\n\ngrade &lt;- 45\nstatus &lt;- if (grade&gt;50) \"Passed\" else \"Failed\"\nstatus\n\n[1] \"Failed\""
  },
  {
    "objectID": "5 - Decision structures.html#example-2",
    "href": "5 - Decision structures.html#example-2",
    "title": "5  CMPE 140 – Conditional execution",
    "section": "Example",
    "text": "Example\nConsider the continuous function\n\\[ f(x) = \\begin{cases}\n      x^2 + 2x + 3 & x\\lt 0 \\\\\n      x+3 & 0\\leq x \\lt 2 \\\\\n      x^2 + 4x -7 & 2\\leq x\n   \\end{cases}\\]\n\nWrite a function that takes a single numeric argument x. The function should return the value of the function f(x).\nModify the function so that it takes a vector argument x, and returns a vector consisting of the function values evaluated at each element of the vector x.\nPlot the function f (x) for −3 &lt; x &lt; 3.\nThe function that takes a single number \\(x\\) and returns the number \\(f(x)\\).\n\n\nmyfunc &lt;- function(x) {\n    if(x&lt;0){\n        return (x^2 + 2*x + 3)\n    }\n    else if (x&lt;2){\n        return (x + 3)\n    }\n    else {\n        return (x^2 + 4*x - 7)\n    }\n}\n\nTest the function with values from different regions and verify that they give the correct answer.\n\nmyfunc(-1)\nmyfunc(1)\nmyfunc(3)\n\n[1] 2\n\n\n[1] 4\n\n\n[1] 14\n\n\n\nmyfunc(c(-1,1,3))\n\nWarning message in if (x &lt; 0) {:\n“the condition has length &gt; 1 and only the first element will be used”\n\n\n[1]  2  6 18\n\n\n\nVectorize the function: Make the function accept a vector input and return a vector.\n\nIt is possible to do this with sapply, without modifying the original function definition.\n\nsapply(c(-1,1,3), myfunc)\n\n[1]  2  4 14\n\n\nHowever, if we need a genuinely vectorized function, we can redefine the function using ifelse.\n\nmyfunc_vec &lt;- function(x) {\n    ifelse(x&lt;0, x^2 + 2*x + 3, ifelse(x&lt;2, x+3, x^2 + 4*x - 7))\n}\n\n\nmyfunc_vec(c(-1,1,3))\n\n[1]  2  4 14\n\n\n\nPlot the function using the vectorized function definition.\n\n\nx &lt;- seq(-3,3,length.out = 101)\nplot(x, myfunc_vec(x), type=\"l\")\n\n\n\n\nThe same can also be achieved by wrapping sapply around the function defined in (a).\n\nplot(x, sapply(x,myfunc), type=\"l\")"
  },
  {
    "objectID": "6 - Loops.html",
    "href": "6 - Loops.html",
    "title": "6  CMPE 140 - Repetition structures",
    "section": "",
    "text": "Repetition structures\nSimple example: Print the squares of 1, 2, … 10.\nWithout loops, it would be cumbersome:\ni &lt;- 1\ncat(i,i^2,\"\\n\")\ni &lt;- i+1\ncat(i,i^2, \"\\n\")\ni &lt;- i+1\ncat(i,i^2, \"\\n\")\n\n1 1 \n2 4 \n3 9\nWith loops, it is shorter and more flexible:\ni &lt;- 1 # initialization\nwhile (i&lt;=10) {  # condition\n    cat(i,i^2,\"\\n\")\n    i &lt;- i+1  # update\n}\n\"Goodbye\"\n\n1 1 \n2 4 \n3 9 \n4 16 \n5 25 \n6 36 \n7 49 \n8 64 \n9 81 \n10 100 \n\n\n[1] \"Goodbye\"\ni &lt;- 1 # initialization\nwhile (i&lt;=10) {  # condition\n    cat(i,i^2,\"\\n\")\n    #i &lt;- i+1  # update\n}\n\n1 1 \n2 4 \n3 9 \n4 16 \n5 25 \n6 36 \n7 49 \n8 64 \n9 81 \n10 100\nFind the sum of elements in a vector\nWithout a loop:\nmydata &lt;- c(-1,4,2,5,1,4,6,2,0)\ntotal &lt;- 0\ni &lt;- 1\ntotal &lt;- total + mydata[i]\ni &lt;- i+1\ntotal &lt;- total + mydata[i]\ni &lt;- i+1\ntotal &lt;- total + mydata[i]\n#...\nWith a loop\nmydata &lt;- c(-1,4,2,5,1,4,6,2,0,5)\ntotal &lt;- 0\ni &lt;- 1\nwhile (i&lt;=length(mydata)){\n    total &lt;- total + mydata[i]\n    cat(i, mydata[i], total, \"\\n\")\n    i &lt;- i + 1\n}\ntotal\n\n1 -1 -1 \n2 4 3 \n3 2 5 \n4 5 10 \n5 1 11 \n6 4 15 \n7 6 21 \n8 2 23 \n9 0 23 \n10 5 28 \n\n\n[1] 28\nFind the maximum element in a vector\nmydata &lt;- c(1,4,2,5,1,4,6,2,0,7,3,1)\nlargest &lt;- mydata[1]\ni &lt;- 2\nwhile (i&lt;=length(mydata)){\n    if(mydata[i]&gt;largest)\n        largest &lt;- mydata[i]\n    i &lt;- i + 1\n}\nlargest\n\n[1] 7\nNote that by using for you don’t need to keep track of the element index. This is OK if you are interested in the element values only, but it might not work if the element’s location is relevant.\nExample: Find the index of the maximum value in a vector.\nmydata &lt;- c(1,4,2,5,1,4,6,2,0)\nlargest &lt;- mydata[1]\nlargest_index &lt;- 1\ni &lt;- 2\nwhile (i&lt;=length(mydata)){\n    if(mydata[i]&gt;largest){\n        largest_index &lt;- i\n        largest &lt;- mydata[i]\n    }\n    i &lt;- i + 1\n}\n\ncat(largest_index, largest)\n\n7 6\nRewrite this as a function\ngetmax &lt;- function(x) {\n    largest &lt;- x[1]\n    largest_index &lt;- 1\n    i &lt;- 2\n    while (i&lt;=length(x)){\n        if(x[i]&gt;largest){\n            largest_index &lt;- i\n            largest &lt;- x[i]\n        }\n        i &lt;- i + 1\n    }\n    c(largest_index, largest)\n}\ngetmax(mydata)\n\n[1] 7 6\nDetermine if a given number is prime\nn &lt;- 87659867241\nprime &lt;- TRUE # assume prime unless proven otherwise\ni &lt;- 2\nwhile (i &lt;= sqrt(n)){  # check only up to the square root of n\n    if (n%%i == 0){\n        prime &lt;- FALSE\n        break\n    }\n    i &lt;- i+1\n}\nif (!prime) cat(n,\"is not prime;\",i,\"divides it.\")\n\n87659867241 is not prime; 3 divides it.\nRewrite this as a function\nisprime &lt;- function(n) {\n    prime &lt;- TRUE # assume prime unless proven otherwise\n    i &lt;- 2\n    while (i*i &lt;= n){  # check only up to the square root of n\n        if (n%%i == 0){\n            prime &lt;- FALSE\n            break\n        }\n        i &lt;- i+1\n    }\n    prime\n}\n\nisprime(87659867241)\n\n[1] FALSE\ni&lt;-0\nwhile(i&lt;=10){\n    i &lt;- i+1\n    if( i%%3==0 )\n        next\n    cat(i, \"\")\n}\n\n1 2 4 5 7 8 10 11\nCaution: If the update statement is located after next, the loop may not terminate.\ni&lt;-1\nwhile(i&lt;=10){\n    if( i%%3==0 )\n        next\n    cat(i, \"\")\n    i &lt;- i+1\n}\nPrint the digits of a positive number\nx &lt;- 512\nx%%10 # 2\nx &lt;- floor(x/10)\nx # 51\nx%%10 # 1\nx &lt;- floor(x/10)\nx # 5\nx%%10 # 5\nx &lt;- floor(x/10)\nx # 0\n\n[1] 2\n\n\n[1] 51\n\n\n[1] 1\n\n\n[1] 5\n\n\n[1] 5\n\n\n[1] 0\nx &lt;- 1764502\nwhile (x&gt;0){\n    lastdig &lt;- x%%10\n    x &lt;- floor( x/10 )\n    cat(lastdig,\"\\n\")\n}\n\n2 \n0 \n5 \n4 \n6 \n7 \n1\nCollect into a vector:\nx &lt;- 1764502\nv &lt;- c()\nwhile (x&gt;0){\n    v &lt;- c(x%%10, v)\n    x &lt;- floor( x/10 )\n}\nv\n\n[1] 1 7 6 4 5 0 2\nPrint a triangle of stars with size 5.\nnlines &lt;- 7\nfor (line in 1:nlines){\n    for (col in 1:line)\n        cat(\"*\")\n    cat(\"\\n\")\n}\n\n*\n**\n***\n****\n*****\n******\n*******\nSimple bar chart: Given a vector x with positive integer entries, print x[l] stars for each line l.\nx &lt;- c(5,2,8,5,1,4,7,10,3)\nfor (line in 1:length(x)){\n    for (col in 1:x[line])\n        cat(\"*\")\n    cat(\"\\n\")\n}\n\n*****\n**\n********\n*****\n*\n****\n*******\n**********\n***\nWrite a function that takes two vectors and prints all products of numbers where the first factor comes from the first vector, and the second factor comes from the second vector.\nIn complicated problems, it is best to start with the simplest case and gradually add features.\nFirst, take only two numbers and display their product:\na &lt;- 2\nb &lt;- 7\ncat(a, \"*\", b, \"=\", a*b, \"\\n\")\n\n2 * 7 = 14\nNext, make one parameter a vector, and “wrap a loop” around cat().\na &lt;- 2\nb_vector &lt;- c(7,3,8)\nfor (b in b_vector){\n    cat(a, \"*\", b, \"=\", a*b, \"\\n\")    \n}\n\n2 * 7 = 14 \n2 * 3 = 6 \n2 * 8 = 16\nFinally, make the other factor a vector and wrap an outer loop around the existing loop.\npair_product &lt;- function(a_vector, b_vector){\n    for (a in a_vector){\n        for (b in b_vector){\n            cat(a, \"*\", b, \"=\", a*b, \"\\n\")\n        }\n    }\n}\npair_product(c(2,3,-1),c(7,3,8,5))\n\n2 * 7 = 14 \n2 * 3 = 6 \n2 * 8 = 16 \n2 * 5 = 10 \n3 * 7 = 21 \n3 * 3 = 9 \n3 * 8 = 24 \n3 * 5 = 15 \n-1 * 7 = -7 \n-1 * 3 = -3 \n-1 * 8 = -8 \n-1 * 5 = -5\nA Pythagorean triple consists of three integers a,b,c such that \\(a^2 + b^2 = c^2\\) holds. Let us determine all Pythagorean triplets such that \\(a,b\\leq 100\\).\nfor (a in 1:100)\n    for(b in 1:100)\n        for(c in b:142) # think about the possible values c can take.\n            if (a*a + b*b == c*c)\n                cat(a,b,c,\"\\n\")\nQuestion. We get repetitions such as 3 4 5 and 4 3 5, which are really not different. How do we remove such repetitions?\nx &lt;- c(1,2,3)\ny &lt;- c(4,5,6)\nz &lt;- x + y\nz\n\n[1] 5 7 9\nAlternative way by using a for loop\nz &lt;- vector(length=length(x))\nfor(i in 1:length(x))\n    z[i] &lt;- x[i] + y[i]\nz\n\n[1] 5 7 9\nLet’s measure the time that the computer takes for each operation. We use large vectors so that we can see the time difference clearly.\nx &lt;- runif(1000000)\ny &lt;- runif(1000000)\nsystem.time(z &lt;- x+y) # Time taken by vectorized addition \n\n   user  system elapsed \n  0.002   0.005   0.006\nz &lt;- vector(length=1000000)\nsystem.time(for(i in 1:length(x)) z[i] &lt;- x[i] + y[i]) # time taken by explicit loop.\n\n   user  system elapsed \n    0.1     0.0     0.1\nMoving averages are a way to smooth the data. For example, the 2-element sample moving average of a vector \\(v\\) with \\(n\\) elements is defined as\n\\[ \\left(\\frac{v_1+v_2}{2},\\frac{v_2+v_3}{2},\\frac{v_3+v_4}{2}, \\ldots, \\frac{v_{n-1}+v_n}{2}\\right)\\]\nLet’s generate some synthetic data with an upward trend and some random noise.\ndata &lt;- cumsum(sample(c(-1,2),size = 100, replace=TRUE))\nplot(data, type=\"l\")\nmovav &lt;- vector(length=length(data)-1)\nfor(i in 1:length(data)-1)\n    movav[i] &lt;- (data[i] + data[i+1])/2\nplot(data, type=\"l\")\nlines(movav, col=\"red\")\nImplement this in vectorized form:\nmovav &lt;- (data[1:length(data)-1] + data[2:length(data)])/2\nA Fibonacci sequence starts with 1 and 1, and each new value is the sum of the two previous values. Formally: \\[\\begin{eqnarray}\nF_1 &=& 1\\\\\nF_2 &=& 1\\\\\nF_{n} &=& F_{n-1} + F_{n-2}\n\\end{eqnarray}\\]\nEach number in this sequence is called a Fibonacci number. Let us write R code that displays the first 20 Fibonacci numbers.\nf1 &lt;- 1\nf2 &lt;- 1\nfor (i in 3:20){\n    temp &lt;- f1\n    f1 &lt;- f2\n    f2 &lt;- f2 + temp\n    cat(f2,\"\\n\")\n}\naccount_balance &lt;- 10000\ninterest_rate &lt;- 0.1\nyears &lt;- 10\nbalance_vec &lt;- account_balance\nfor (y in 1:years){\n    account_balance &lt;- account_balance * (1+interest_rate)\n    balance_vec &lt;- c(balance_vec, account_balance)\n    cat(\"After\",y,\"years your account balance is\",account_balance,\"\\n\")\n}\nEvaluate the sum \\[\\sum_{i=1}^{n} 2^{-i} = \\frac{1}{2} + \\frac{1}{4} +\\ldots + \\frac{1}{2^n}\\] for given \\(n\\).\nn &lt;- 5\ntotal &lt;- 0\nfor (i in 1:n) {\n    total &lt;- total + 1/2^i\n}\ntotal\nAs \\(n\\rightarrow\\infty\\), the sum must approach 1. To see this, let us wrap another loop around the code to change n.\nfor (n in 2:20){\n    total &lt;- 0\n    for (i in 1:n) {\n        total &lt;- total + 1/2^i\n    }\n    cat(\"n =\",n,\", series total =\",total,\"\\n\")\n}\nImplement the sum() and cumsum() functions using R’s loop structures. Test your functions with some simple cases to ensure that they work correctly. Using random vectors of size 1,000,000 as input, compare their speed with the built-in versions.\nWrite a function digits(x) that takes a positive integer and returns a vector of its digits. For example, digits(0667230) should return the vector (6,6,7,2,3,0).\nWrite a function named digitsum which takes a positive integer and returns the sum of digits (the “digital sum”) of the input. For example, the function call digitsum(35274) should return 21.\nUsing this function, find the number between 1 and 1 million that has the largest digital sum.\nCurrently there are 1,000,000 inhabitants in city A, and 500,000 in city B. Each year, 2% of people in city A move to city B, and 3% of people in city A move to city B. The intrinsic growth rate of both cities is 1% (i.e., the growth in the absence of any migration).\nPlot the population of both cities for the next 20 years.\nThe Collatz sequence is defined as follows: * Start with any positive integer \\(n\\). * If \\(n\\) is even, set \\(n \\leftarrow n/2\\) * If \\(n\\) is odd, set \\(n \\leftarrow 3n+1\\) * If \\(n=1\\), stop.\nFor example, starting with 10, the Collatz sequence is 10, 5, 16, 8, 4, 2, 1. The number of steps required to reach 1 is 6.\nIt is believed that for any starting point the sequence ends with 1. However, this is not proven."
  },
  {
    "objectID": "6 - Loops.html#the-for-loop",
    "href": "6 - Loops.html#the-for-loop",
    "title": "6  CMPE 140 - Repetition structures",
    "section": "The for loop",
    "text": "The for loop\n\nAlternative to while that does not take a Boolean condition.\nThe for statement takes elements from a vector one by one, and runs the loop body with the current element.\nThe loop terminates when the last element is used.\n\n\nfor(i in c(2,-1,5,3,7)) {\n    cat(i,i^2,\"\\n\")\n}\n\n2 4 \n-1 1 \n5 25 \n3 9 \n7 49 \n\n\n\nIn many cases for is simpler than while, especially when you need to iterate over the elements of a vector.\nExample: Add up the elements in a vector with for:\n\n\nmydata &lt;- c(-1,4,2,5,1,4,6,2,0)\ntotal &lt;- 0\nfor (d in mydata)\n    total &lt;- total + d\ntotal\n\n[1] 23\n\n\nThe line for(d in mydata) means that d first gets mydata[1], then mydata[2], etc, until all the elements in mydata are used up.\nFind the maximum value in a vector with a for loop.\n\nmydata &lt;- c(1,4,2,5,1,4,6,2,0)\nlargest &lt;- mydata[1]\nfor(d in mydata) \n    if(d&gt;largest) \n        largest &lt;- d\nlargest\n\n[1] 6"
  },
  {
    "objectID": "6 - Loops.html#the-break-statement",
    "href": "6 - Loops.html#the-break-statement",
    "title": "6  CMPE 140 - Repetition structures",
    "section": "The break statement",
    "text": "The break statement\nWhen the program encounters a break statement, it terminates the loop. The remainder of the block is skipped over.\n\ni &lt;- 1\nwhile(i&lt;=10){\n    if(i==7)\n        break\n    cat(\"i =\",i,\"\\n\")\n    i &lt;- i+1\n}\ncat(\"Goodbye\")\n\ni = 1 \ni = 2 \ni = 3 \ni = 4 \ni = 5 \ni = 6 \nGoodbye\n\n\nSame with a for loop\n\nfor(i in 1:10){\n    if (i==7)\n        break\n    cat(\"i =\",i,\"\\n\")\n}\n\ni = 1 \ni = 2 \ni = 3 \ni = 4 \ni = 5 \ni = 6"
  },
  {
    "objectID": "6 - Loops.html#the-repeat-loop",
    "href": "6 - Loops.html#the-repeat-loop",
    "title": "6  CMPE 140 - Repetition structures",
    "section": "The repeat loop",
    "text": "The repeat loop\n\nThe repeat statement provides an infinite loop.\nDoes not take a test. To end the loop, use break.\n\n\ni &lt;- 1\nrepeat {\n    i &lt;- i + 3\n    cat(i,\"\")\n    if(i&gt;10) break\n}\n\n4 7 10 13 \n\n\nThe next statement works in the same way in repeat loops.\n\ni &lt;- -2\nrepeat {\n    i &lt;- i + 1\n    if (i%%3==0) next\n    cat(i,\"\")\n    if(i&gt;10) break\n}\n\n-1 1 2 4 5 7 8 10 11"
  },
  {
    "objectID": "6 - Loops.html#nested-loops",
    "href": "6 - Loops.html#nested-loops",
    "title": "6  CMPE 140 - Repetition structures",
    "section": "Nested loops",
    "text": "Nested loops\nA loop body can contain anything, including other loops.\n\nfor (i in 1:4) {\n    cat(\"i =\",i,\"\\n\")\n    for (j in c(7,8,9))\n        cat(\"   i+j =\",i+j,\"\\n\")\n}\n\ni = 1 \n   i+j = 8 \n   i+j = 9 \n   i+j = 10 \ni = 2 \n   i+j = 9 \n   i+j = 10 \n   i+j = 11 \ni = 3 \n   i+j = 10 \n   i+j = 11 \n   i+j = 12 \ni = 4 \n   i+j = 11 \n   i+j = 12 \n   i+j = 13"
  },
  {
    "objectID": "7 - Matrices.html",
    "href": "7 - Matrices.html",
    "title": "7  Matrices",
    "section": "",
    "text": "options(jupyter.rich_display = F)\n\n\nMatrix objects in R\nIn R, a matrix is a vector, with two additional attributes: * Number of rows * Number of columns\nAs with vectors, every element of a matrix must be of the same mode ; either purely numeric, or purely text, etc.\n\n\nCreating a matrix from a vector\nGiven a vector, convert it to a matrix by specifying the number of rows and columns.\n\nm &lt;- matrix( c(1,2,3,4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n\n\nProperties\n\nattributes(m)\n\n$dim\n[1] 2 2\n\n\n\ndim(m)\n\n[1] 2 2\n\n\n\nclass(m)\n\n[1] \"matrix\"\n\n\n\n\nColumn-major and row-major ordering\n\nNote that by default, the columns of the matrix are filled with the vector’s elements, in order.\n\n\nmatrix(1:6, nrow=3, ncol=2)\n\n     [,1] [,2]\n[1,] 1    4   \n[2,] 2    5   \n[3,] 3    6   \n\n\n\nThis is called the column-major order.\nTo force a row-major order, set the byrow parameter to TRUE.\n\n\nmatrix( 1:6, nrow=3, ncol=2, byrow=TRUE )\n\n     [,1] [,2]\n[1,] 1    2   \n[2,] 3    4   \n[3,] 5    6   \n\n\n\n\nSpecify only nrow or ncol\nIf we provide only nrow or only ncol, the unspecified parameter will be determined using the length of the vector.\n\nmatrix( 1:6, nrow=2 )\n\n     [,1] [,2] [,3]\n[1,] 1    3    5   \n[2,] 2    4    6   \n\n\n\nmatrix( 1:6, ncol=3 )\n\n     [,1] [,2] [,3]\n[1,] 1    3    5   \n[2,] 2    4    6   \n\n\n\n\nElement recycling\nIf the specified matrix sizes are not compatible with the vector’s length, the vector is recycled until it fills the matrix.\n\nmatrix( 1:5, nrow=2, ncol=4)\n\nWarning message in matrix(1:5, nrow = 2, ncol = 4):\n“data length [5] is not a sub-multiple or multiple of the number of rows [2]”\n\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    3    5    2   \n[2,] 2    4    1    3   \n\n\nThe same recycling is done also when one of the shape parameters is omitted.\n\nmatrix( 1:5, nrow=2 )\n\nWarning message in matrix(1:5, nrow = 2):\n“data length [5] is not a sub-multiple or multiple of the number of rows [2]”\n\n\n     [,1] [,2] [,3]\n[1,] 1    3    5   \n[2,] 2    4    1   \n\n\n\n\nAccessing individual matrix elements\nThe element in the r-th row and the c-th column of a matrix m can be accessed with the m[r,c] notation.\n\nm &lt;- matrix(1:6, nrow=2)\nm\n\n     [,1] [,2] [,3]\n[1,] 1    3    5   \n[2,] 2    4    6   \n\n\n\nm[1,1]\n\n[1] 1\n\n\n\nm[2,3]\n\n[1] 6\n\n\n\n\nAccessing rows and columns\nTo get the entire r-th row as a vector, we use the m[r,] notation. Similarly, m[,c] gives the column c.\n\nm &lt;- matrix(1:6, nrow=2)\nm\n\n     [,1] [,2] [,3]\n[1,] 1    3    5   \n[2,] 2    4    6   \n\n\n\nm[1,] # first row, all columns\n\n[1] 1 3 5\n\n\n\nm[,1]  # first column, all rows\n\n[1] 1 2\n\n\n\n\nAccessing ranges of rows/columns\nAs with vectors, we can provide a vector of indices to extract a subset of rows or columns.\n\nm &lt;- matrix( 1:12, nrow=3 )\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\nSelect rows 1 and 2, all columns:\n\nm[1:2,]\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n\n\n\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\nSelect rows 1 and 2, second column only.\n\nm[1:2, 2]\n\n[1] 4 5\n\n\n\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\nSelect rows 1 and 2, and columns 1,4 and 3, in that order.\n\nm[1:2, c(1,4,3)]\n\n     [,1] [,2] [,3]\n[1,] 1    10   7   \n[2,] 2    11   8   \n\n\n\n\nExcluding some rows and columns\nAs with vectors, negative indices can be used to get a new matrix with some rows/columns removed.\n\nm &lt;- matrix( 1:12, nrow=3 )\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\nRemove 3rd row.\n\nm[-3,]\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n\n\n\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\nRemove 2nd column\n\nm[,-2]\n\n     [,1] [,2] [,3]\n[1,] 1    7    10  \n[2,] 2    8    11  \n[3,] 3    9    12  \n\n\nRemove 1st row and 3rd column\n\nm\nm[-1,-3]\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\n     [,1] [,2] [,3]\n[1,] 2    5    11  \n[2,] 3    6    12  \n\n\nRemove columns from 1 to 2.\n\nm[,-1:-2]\n\n     [,1] [,2]\n[1,] 7    10  \n[2,] 8    11  \n[3,] 9    12  \n\n\n\n\nSetting and getting row and column names\nThe functions rownames() and colnames() are used to set the names for rows and columns, respectively.\n\nm &lt;- matrix( 1:6, nrow=2)\nm\n\n     [,1] [,2] [,3]\n[1,] 1    3    5   \n[2,] 2    4    6   \n\n\n\nrownames(m) &lt;- c(\"row I\", \"row II\")\ncolnames(m) &lt;- c(\"col a\", \"col b\", \"col c\")\nm\n\n       col a col b col c\nrow I  1     3     5    \nrow II 2     4     6    \n\n\nWhen called without an assignment, they return the existing names.\n\nrownames(m)\ncolnames(m)\n\n[1] \"row I\"  \"row II\"\n\n\n[1] \"col a\" \"col b\" \"col c\"\n\n\nThese names provide an alternative method to access matrix elements.\n\nm\n\n       col a col b col c\nrow I  1     3     5    \nrow II 2     4     6    \n\n\n\nm[\"row I\", \"col b\"]\n\n[1] 3\n\n\n\nm[\"row I\",]\n\ncol a col b col c \n    1     3     5 \n\n\n\nm[,\"col a\"]\n\n row I row II \n     1      2 \n\n\n\n\nCreate a matrix by setting individual elements\nSometimes we may not have all the data at hand at once. It is possible to start with an empty matrix, and fill it up element-by-element.\n\nm &lt;- matrix(nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,] NA   NA  \n[2,] NA   NA  \n\n\n\nm[1,1] &lt;- 1\nm[2,1] &lt;- 2\nm[1,2] &lt;- 3\nm[2,2] &lt;- 4\nm\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n\n\nCreate a matrix by combining columns or rows\nWhen we have several different vectors, we can combine them in columns using cbind(), or by rows using rbind().\n\ncbind( c(1,2), c(3,4) )\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n\nrbind( c(1,2), c(3,4), c(-2, 6))\n\n     [,1] [,2]\n[1,]  1   2   \n[2,]  3   4   \n[3,] -2   6   \n\n\n\n\nAdd a row or a column to an existing matrix\nThe functions cbind() and rbind() can also be used to extend an existing matrix.\n\nm &lt;- matrix( 1:4, nrow = 2)\nm\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\nAdd a new column at the end of the matrix.\n\nm\ncbind(m, c(10,11))\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n     [,1] [,2] [,3]\n[1,] 1    3    10  \n[2,] 2    4    11  \n\n\nAdd a new column at the beginning of the matrix.\n\nm\ncbind(c(10,11), m)\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n     [,1] [,2] [,3]\n[1,] 10   1    3   \n[2,] 11   2    4   \n\n\nAdd a new row at the end of the matrix\n\nm\nrbind(m, c(10,11))\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n     [,1] [,2]\n[1,]  1    3  \n[2,]  2    4  \n[3,] 10   11  \n\n\nAdd a new row at the beginning of the matrix.\n\nm\nrbind(c(10,11), m)\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n     [,1] [,2]\n[1,] 10   11  \n[2,]  1    3  \n[3,]  2    4  \n\n\n\n\nInsert a row or a column into a matrix\nAnother application of cbind() and rbind() is inserting columns and rows to existing matrices. As with vectors, such insertion is not done on the original matrix. We generate a new matrix using existing rows/columns, combine them with rbind()/cbind(), and reassign to the variable.\n\nm &lt;- matrix( 1:9, nrow=3, ncol=3)\nm\n\n     [,1] [,2] [,3]\n[1,] 1    4    7   \n[2,] 2    5    8   \n[3,] 3    6    9   \n\n\nInsert a row between second and third rows.\n\nrbind(m[1:2,], c(-1, -2, -3), m[3,])\n\n     [,1] [,2] [,3]\n[1,]  1    4    7  \n[2,]  2    5    8  \n[3,] -1   -2   -3  \n[4,]  3    6    9  \n\n\nInsert a column between first and second columns\n\nm\ncbind( m[,1], c(-4,-5,-6), m[,2:3] )\n\n     [,1] [,2] [,3]\n[1,] 1    4    7   \n[2,] 2    5    8   \n[3,] 3    6    9   \n\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    -4   4    7   \n[2,] 2    -5   5    8   \n[3,] 3    -6   6    9   \n\n\n\n\nAssign new values to submatrices\nA matrix can be changed in-place by selecting a submatrix using index notation, and assigning a new matrix to it.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm\n\n     [,1] [,2] [,3]\n[1,] 1    4    7   \n[2,] 2    5    8   \n[3,] 3    6    9   \n\n\n\nm[1,1] &lt;- m[1,1] + 1\nm\n\n     [,1] [,2] [,3]\n[1,] 2    4    7   \n[2,] 2    5    8   \n[3,] 3    6    9   \n\n\n\nm[1,1] &lt;- m[1,1]*m[2,1]\nm\n\n     [,1] [,2] [,3]\n[1,] 4    4    7   \n[2,] 2    5    8   \n[3,] 3    6    9   \n\n\n\nm[ c(1,2), c(2,3) ]\n\n     [,1] [,2]\n[1,] 4    7   \n[2,] 5    8   \n\n\n\nm[ c(1,2), c(2,3) ] &lt;- matrix(c(20,21,22,23),nrow=2,byrow = T)\nm\n\n     [,1] [,2] [,3]\n[1,] 4    20   21  \n[2,] 2    22   23  \n[3,] 3     6    9  \n\n\n\n\nRemoving rows and columns\nTo remove some selected rows or colums, we just use the index notation to specify the rows and columns we want to keep, and assign the result to the variable’s name.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm\n\n     [,1] [,2] [,3]\n[1,] 1    4    7   \n[2,] 2    5    8   \n[3,] 3    6    9   \n\n\n\nm &lt;- m[c(1,3),c(2,3)] # remove row 2, col 1\nm\n\n     [,1] [,2]\n[1,] 4    7   \n[2,] 6    9   \n\n\n\nm &lt;- matrix( 1:9, nrow=3 )\nm &lt;- m[-2,-1] # remove row 2, col 1\nm\n\n     [,1] [,2]\n[1,] 4    7   \n[2,] 6    9   \n\n\nRemove 2nd row.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm &lt;- m[-2,]\nm\n\n     [,1] [,2] [,3]\n[1,] 1    4    7   \n[2,] 3    6    9   \n\n\nRemove 1st column.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm &lt;- m[, -1]\nm\n\n     [,1] [,2]\n[1,] 4    7   \n[2,] 5    8   \n[3,] 6    9   \n\n\n\n\nFiltering on matrices\n\nm &lt;- matrix( c(2,9,4,7,5,3,6,1,8) , nrow=3 )\nm\n\n     [,1] [,2] [,3]\n[1,] 2    7    6   \n[2,] 9    5    1   \n[3,] 4    3    8   \n\n\n\nm &gt;= 5\n\n     [,1]  [,2]  [,3] \n[1,] FALSE  TRUE  TRUE\n[2,]  TRUE  TRUE FALSE\n[3,] FALSE FALSE  TRUE\n\n\n\nm[m&gt;=5]\n\n[1] 9 7 5 6 8\n\n\n\nm\nm[ m&lt;5 ] &lt;- 0\nm\n\n     [,1] [,2] [,3]\n[1,] 2    7    6   \n[2,] 9    5    1   \n[3,] 4    3    8   \n\n\n     [,1] [,2] [,3]\n[1,] 0    7    6   \n[2,] 9    5    0   \n[3,] 0    0    8   \n\n\n\n\nMatrix operations: transpose\n\nm &lt;- matrix(1:4, nrow=2)\nm\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n\nt(m)\n\n     [,1] [,2]\n[1,] 1    2   \n[2,] 3    4   \n\n\n\n\nMatrix operations: elementwise product\n\nm\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n\nm * m\n\n     [,1] [,2]\n[1,] 1     9  \n[2,] 4    16  \n\n\n\n\nMatrix operations: matrix multiplication\n\nm\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n\nm %*% m\n\n     [,1] [,2]\n[1,]  7   15  \n[2,] 10   22  \n\n\n\n\nMatrix operations: multiply by a scalar\n\nm\n3 * m\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n     [,1] [,2]\n[1,] 3     9  \n[2,] 6    12  \n\n\n\n\nMatrix operations: addition\n\nm\nm + m\n\n     [,1] [,2]\n[1,] 1    3   \n[2,] 2    4   \n\n\n     [,1] [,2]\n[1,] 2    6   \n[2,] 4    8   \n\n\n\n\nMatrix functions: Sums of rows and columns\n\nm &lt;- matrix( 1:12, nrow=3 )\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\n\nrowSums(m)\n\n[1] 22 26 30\n\n\n\ncolSums(m)\n\n[1]  6 15 24 33\n\n\n\n\nMatrix functions: Averages of rows and columns\n\nm\nrowMeans(m)\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\n[1] 5.5 6.5 7.5\n\n\n\ncolMeans(m)\n\n[1]  2  5  8 11\n\n\n\n\nMathematical functions\n\nm\nsqrt(m)\nsin(m)\nexp(m)\nlog(m)\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\n     [,1]     [,2]     [,3]     [,4]    \n[1,] 1.000000 2.000000 2.645751 3.162278\n[2,] 1.414214 2.236068 2.828427 3.316625\n[3,] 1.732051 2.449490 3.000000 3.464102\n\n\n     [,1]      [,2]       [,3]      [,4]      \n[1,] 0.8414710 -0.7568025 0.6569866 -0.5440211\n[2,] 0.9092974 -0.9589243 0.9893582 -0.9999902\n[3,] 0.1411200 -0.2794155 0.4121185 -0.5365729\n\n\n     [,1]      [,2]      [,3]     [,4]     \n[1,]  2.718282  54.59815 1096.633  22026.47\n[2,]  7.389056 148.41316 2980.958  59874.14\n[3,] 20.085537 403.42879 8103.084 162754.79\n\n\n     [,1]      [,2]     [,3]     [,4]    \n[1,] 0.0000000 1.386294 1.945910 2.302585\n[2,] 0.6931472 1.609438 2.079442 2.397895\n[3,] 1.0986123 1.791759 2.197225 2.484907\n\n\n\n\nThe apply() function\n\nSuppose you have a function that takes a vector and returns a number.\nYou want to apply this function to each row (or column) of a matrix.\n\n\nm &lt;- matrix( 1:9, nrow=3)\nm\n\n     [,1] [,2] [,3]\n[1,] 1    4    7   \n[2,] 2    5    8   \n[3,] 3    6    9   \n\n\n\napply(m, 1, mean) # same as rowMeans()\n\n[1] 4 5 6\n\n\n\napply(m, 2, mean) # same as colMeans()\n\n[1] 2 5 8\n\n\n\napply(m,1,prod)\n\n[1]  28  80 162\n\n\nWe can also use apply() with user-defined functions.\n\ninverse_sum &lt;- function(x) sum(1/x)\ninverse_sum(c(2,4,8,16))\n\n[1] 0.9375\n\n\n\nm &lt;- matrix(1:12, nrow=3)\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    4    7    10  \n[2,] 2    5    8    11  \n[3,] 3    6    9    12  \n\n\n\napply(m,1,inverse_sum)\n\n[1] 1.4928571 0.9159091 0.6944444\n\n\n\napply(m,2,inverse_sum)\n\n[1] 1.8333333 0.6166667 0.3789683 0.2742424\n\n\n\n\nExamples\n\n\nExample: Generate a random matrix\n\nmatrix(runif(12, min=1, max=5), nrow = 3)\n\n     [,1]     [,2]     [,3]     [,4]    \n[1,] 3.182262 2.383389 2.927393 3.284648\n[2,] 2.966156 1.478243 2.523172 2.259985\n[3,] 2.796537 1.194303 3.523627 3.704259\n\n\n\nrandmat &lt;- function(size, min, max, ...){\n    matrix(runif(size, min=min, max=max), ...)\n}\n\n\nrandmat(size=12,min=1,max=5,nrow=3)\n\n     [,1]     [,2]     [,3]     [,4]    \n[1,] 1.137645 2.488817 3.091181 3.000542\n[2,] 1.265236 1.243677 2.864469 2.578006\n[3,] 4.291180 4.035630 1.999143 3.414323\n\n\n\n\nExample: Generate an identity matrix (1 on the diagonal, 0 elsewhere).\n\nn &lt;- 7\nm &lt;- matrix(0, nrow=n, ncol=n)\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 0    0    0    0    0    0    0   \n[2,] 0    0    0    0    0    0    0   \n[3,] 0    0    0    0    0    0    0   \n[4,] 0    0    0    0    0    0    0   \n[5,] 0    0    0    0    0    0    0   \n[6,] 0    0    0    0    0    0    0   \n[7,] 0    0    0    0    0    0    0   \n\n\n\nfor (i in 1:n) m[i,i] &lt;- 1\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 1    0    0    0    0    0    0   \n[2,] 0    1    0    0    0    0    0   \n[3,] 0    0    1    0    0    0    0   \n[4,] 0    0    0    1    0    0    0   \n[5,] 0    0    0    0    1    0    0   \n[6,] 0    0    0    0    0    1    0   \n[7,] 0    0    0    0    0    0    1   \n\n\nAlternatively\n\ndiag(n)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 1    0    0    0    0    0    0   \n[2,] 0    1    0    0    0    0    0   \n[3,] 0    0    1    0    0    0    0   \n[4,] 0    0    0    1    0    0    0   \n[5,] 0    0    0    0    1    0    0   \n[6,] 0    0    0    0    0    1    0   \n[7,] 0    0    0    0    0    0    1   \n\n\n\n\nExample: Generate a matrix with 1’s on the edges, and 0’s inside.\n\nnrow &lt;- 5\nncol &lt;- 7\nm &lt;- matrix(1, nrow=nrow, ncol=ncol)\nm\nm[2:(nrow-1), 2:(ncol-1)] &lt;- 0\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 1    1    1    1    1    1    1   \n[2,] 1    1    1    1    1    1    1   \n[3,] 1    1    1    1    1    1    1   \n[4,] 1    1    1    1    1    1    1   \n[5,] 1    1    1    1    1    1    1   \n\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 1    1    1    1    1    1    1   \n[2,] 1    0    0    0    0    0    1   \n[3,] 1    0    0    0    0    0    1   \n[4,] 1    0    0    0    0    0    1   \n[5,] 1    1    1    1    1    1    1   \n\n\nAlternatively\n\nm &lt;- matrix(0, nrow=nrow, ncol=ncol)\nm\nm[c(1,nrow),] &lt;- 1\nm\nm[,c(1,ncol)] &lt;- 1\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 0    0    0    0    0    0    0   \n[2,] 0    0    0    0    0    0    0   \n[3,] 0    0    0    0    0    0    0   \n[4,] 0    0    0    0    0    0    0   \n[5,] 0    0    0    0    0    0    0   \n\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 1    1    1    1    1    1    1   \n[2,] 0    0    0    0    0    0    0   \n[3,] 0    0    0    0    0    0    0   \n[4,] 0    0    0    0    0    0    0   \n[5,] 1    1    1    1    1    1    1   \n\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 1    1    1    1    1    1    1   \n[2,] 1    0    0    0    0    0    1   \n[3,] 1    0    0    0    0    0    1   \n[4,] 1    0    0    0    0    0    1   \n[5,] 1    1    1    1    1    1    1   \n\n\n\n\nExample: The antidiagonal of a square matrix\n\nm &lt;- matrix(1:16, nrow=4)\nm\n\n     [,1] [,2] [,3] [,4]\n[1,] 1    5     9   13  \n[2,] 2    6    10   14  \n[3,] 3    7    11   15  \n[4,] 4    8    12   16  \n\n\n\nc(m[1,4], m[2,3], m[3,2], m[4,1])\n\n[1] 13 10  7  4\n\n\n\nn &lt;- nrow(m)\nv &lt;- vector(mode = \"numeric\", length = n)\nfor (i in 1:n) v[i] &lt;- m[i, n-i+1]\nv\n\n[1]  4  7 10 13\n\n\nConvert to a function\n\nantidiag &lt;- function(m){\n    if(nrow(m) != ncol(m)){\n        print(\"Matrix must be square\")\n        return()\n    }\n    n &lt;- nrow(m)\n    v &lt;- vector(mode = \"numeric\", length = n)\n    for (i in 1:n) v[i] &lt;- m[i, n-i+1]\n    v\n}\n\n\nmatrix(1:25, nrow=5)\nantidiag(matrix(1:25, nrow=5))\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,] 1     6   11   16   21  \n[2,] 2     7   12   17   22  \n[3,] 3     8   13   18   23  \n[4,] 4     9   14   19   24  \n[5,] 5    10   15   20   25  \n\n\n[1] 21 17 13  9  5\n\n\n\n\nExample: 3-by-3 magic square\n\n\n\nimage.png\n\n\nWrite a function that takes a 3-by-3 integer matrix, returns TRUE if the matrix is a magic square, and FALSE otherwise.\n\nm &lt;- matrix(c(2,9,4,7,5,3,6,1,8), nrow = 3)\nall(\n    rowSums(m) == rep(15,3),\n    colSums(m) == rep(15,3),\n    sum(diag(m)) == 15,\n    m[1,3]+m[2,2]+m[3,1] == 15\n    )\n\n[1] TRUE\n\n\n\nis.magic &lt;- function(m){\n    if( !(nrow(m) == 3 & ncol(m) == 3)) {\n        print(\"The matrix must be 3-by-3.\")\n        return()\n    }\n    all(\n    rowSums(m) == rep(15,3),\n    colSums(m) == rep(15,3),\n    sum(diag(m)) == 15,\n    m[1,3]+m[2,2]+m[3,1] == 15\n    )\n}\n\nis.magic( matrix(c(2,9,4,7,5,3,6,1,8), nrow = 3) )  # TRUE\nis.magic( matrix(1:9, ncol = 3)) # FALSE\nis.magic( matrix(1:12, ncol = 3)) # error message\n\n[1] TRUE\n\n\n[1] FALSE\n\n\n[1] \"The matrix must be 3-by-3.\"\n\n\nNULL\n\n\n\n\nExample: Search for a magic square\nGenerate many random 3-by-3 matrices with entries from 1 to 9, and try to find magic squares.\n\nfor (i in 1:1e5) {\n    m &lt;- matrix(sample(1:9),nrow=3)\n    if (is.magic(m))\n        print(m)\n}\n\n     [,1] [,2] [,3]\n[1,]    2    7    6\n[2,]    9    5    1\n[3,]    4    3    8"
  },
  {
    "objectID": "8 - Lists.html",
    "href": "8 - Lists.html",
    "title": "8  Lists",
    "section": "",
    "text": "Where vectors are not adequate\nIn the simplest form, a list can be created with the list() function call.\nftm &lt;- list(\"Fatma\", 5624.25, TRUE)\nftm\n\n[[1]]\n[1] \"Fatma\"\n\n[[2]]\n[1] 5624.25\n\n[[3]]\n[1] TRUE\nWe can access list elements using the double bracket [[...]] notation.\nftm[[1]]\n\n[1] \"Fatma\"\nftm[[2]]\n\n[1] 5624.25\nInstead of using integer indices, we can assign names (tags) to list components and refer to them using these tags.\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\nftm$name\n\n[1] \"Fatma\"\nA list can comprise any type of object, such as vectors, matrices, sublists, etc.\nlist(1, c(2,3), list(\"abc\",4))\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2 3\n\n[[3]]\n[[3]][[1]]\n[1] \"abc\"\n\n[[3]][[2]]\n[1] 4\nList elements can be accessed with 1. using integer indices: mylist[[1]] 1. using the mylist$tag notation, if tags are given 1. using the mylist[[\"tag\"]] notation, if tags are given\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nftm$name  # ftm[[1]], ftm[[\"name\"]]\nftm[[2]]  # ftm$salary, ftm[[\"salary\"]]\nftm[[\"fulltime\"]] # ftm$fulltime , ftm[[3]]\n\n[1] \"Fatma\"\n\n\n[1] 5624.25\n\n\n[1] TRUE\nIf one element is a vector, the [...] operator can be used afterwards in order to select elemnets of that vector.\nftm &lt;- list(name=\"Fatma\", grades=c(10,12,9))\nftm\n\n$name\n[1] \"Fatma\"\n\n$grades\n[1] 10 12  9\nftm$grades\n\n[1] 10 12  9\nftm[[2]][3]\nftm$grades[3]\n\n[1] 9\n\n\n[1] 9\nThe syntax listname[[\"tagname\"]] is useful when tagnames are stored in a variable.\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nx &lt;- \"salary\"\nftm[[x]]\n\n[1] 5624.25\nYou can start with an incomplete list and add new elements as you go along.\nftm &lt;- list(name=\"Fatma\", salary=5624.25)\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\nftm$fulltime &lt;- TRUE\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\nNew list elements can also be added via vector indices.\nftm[[4]] &lt;- 28\nftm[5:7] &lt;- c(a=FALSE,b=TRUE,c=TRUE)\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\n\n[[4]]\n[1] 28\n\n[[5]]\n[1] FALSE\n\n[[6]]\n[1] TRUE\n\n[[7]]\n[1] TRUE\nThis last example also shows that a list can have both tagged and untagged elements.\nYou can delete an element by setting it to NULL.\nftm$fulltime &lt;- NULL\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n[[3]]\n[1] 28\n\n[[4]]\n[1] FALSE\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] TRUE\nNote that after deletion, all elements below the deleted one are moved up and their indices are decreased by one.\nftm[[3]] &lt;- NULL\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n[[3]]\n[1] FALSE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE\nftm[3:5] &lt;- NULL\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\nThe familiar c() function can be used on lists, too.\nc( list(\"abc\", 32, T), list(5.1))\n\n[[1]]\n[1] \"abc\"\n\n[[2]]\n[1] 32\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 5.1\nc(list(name=\"Fatma\", salary=5624.25, fulltime=TRUE), list(hobby=\"painting\"))\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\n\n$hobby\n[1] \"painting\"\nTo get the number of elements in a list, we can use the length() function.\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nlength(ftm)\n\n[1] 3\nTo get the tags in a list, we use the names() function.\nnames(ftm)\n\n[1] \"name\"     \"salary\"   \"fulltime\"\nTo obtain the values as a vector, we can use the unlist() function.\nunlist(ftm)\n\n     name    salary  fulltime \n  \"Fatma\" \"5624.25\"    \"TRUE\"\nunname(unlist(ftm))\n\n[1] \"Fatma\"   \"5624.25\" \"TRUE\"\nNote that this function returns a vector, and the numeric and the Boolean values are converted to strings. The reason is that in a vector every element must be of the same type, and strings are the only common denominator here.\nThe lapply() function applies a function to each element of a list, and returns the results as a list.\nlapply(list(2,3.5,4), sqrt)\n\n[[1]]\n[1] 1.414214\n\n[[2]]\n[1] 1.870829\n\n[[3]]\n[1] 2\nWorking with tagged elements:\ngrades_1 &lt;- c(10,12,11,14,8,12)\ngrades_2 &lt;- c(13,11,10,11,9)\nallgrades &lt;- list(section1=grades_1, section2=grades_2)\nallgrades\n\n$section1\n[1] 10 12 11 14  8 12\n\n$section2\n[1] 13 11 10 11  9\nmean(allgrades$section1)\n\n[1] 11.16667\nlapply(allgrades, mean)\n\n$section1\n[1] 11.16667\n\n$section2\n[1] 10.8\nThe sapply() (simple apply) function returns a vector or a matrix resulting from the application of the function.\nsapply(allgrades, mean)\n\nsection1 section2 \n11.16667 10.80000\nmode(sapply(allgrades, mean))\n\n[1] \"numeric\"\nWe can define our own functions to specify what to do with each element.\nmult_by2 &lt;- function(x) {2*x}\nmult_by2(c(1,2,3,4))\n\n[1] 2 4 6 8\nlapply( list(1, 2, 3:7), mult_by2)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1]  6  8 10 12 14\nSet up a list of staff members, where each element is a list consisting of names, wages and number of hours worked.\nstaff &lt;- list(\n    id000=list(name=\"Fatma\", wage=12.5, hours=20),\n    id001=list(name=\"Ekrem\", wage=11.7, hours=30),\n    id002=list(name=\"Deniz\", wage=13.3, hours=25)\n)\nstaff\n\n$id000\n$id000$name\n[1] \"Fatma\"\n\n$id000$wage\n[1] 12.5\n\n$id000$hours\n[1] 20\n\n\n$id001\n$id001$name\n[1] \"Ekrem\"\n\n$id001$wage\n[1] 11.7\n\n$id001$hours\n[1] 30\n\n\n$id002\n$id002$name\n[1] \"Deniz\"\n\n$id002$wage\n[1] 13.3\n\n$id002$hours\n[1] 25\nDefine a function that takes one person as defined above, and returns the weekly pay.\npayroll &lt;- function(person){person$wage * person$hours}\npayroll(list(name=\"Deniz\", wage=13.3, hours=25))\n\n[1] 332.5\nNow apply this function to every staff member on the list staff.\nlapply(staff, payroll)\n\n$id000\n[1] 250\n\n$id001\n[1] 351\n\n$id002\n[1] 332.5\nsapply(staff, payroll)\n\nid000 id001 id002 \n250.0 351.0 332.5"
  },
  {
    "objectID": "8 - Lists.html#selecting-a-range-of-indices",
    "href": "8 - Lists.html#selecting-a-range-of-indices",
    "title": "8  Lists",
    "section": "Selecting a range of indices",
    "text": "Selecting a range of indices\nA range of indices can be selected using the familiar vector syntax with a single bracket.\nThis returns a sublist.\n\nftm[1:2]\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n\n\nftm[c(1,3)]\n\n$name\n[1] \"Fatma\"\n\n$fulltime\n[1] TRUE\n\n\nHowever, this does not work with the double bracket notation.\n\nftm[[1:2]]\n\nERROR: Error in ftm[[1:2]]: subscript out of bounds"
  },
  {
    "objectID": "8 - Lists.html#difference-between-indexing-with-single-and-double-brackets",
    "href": "8 - Lists.html#difference-between-indexing-with-single-and-double-brackets",
    "title": "8  Lists",
    "section": "Difference between indexing with single and double brackets",
    "text": "Difference between indexing with single and double brackets\nThe availability of two types of brackets for list indexing can be confusing. They can be distinguished by their return types:\n\n[i] returns a list with a single component\n[[i]] returns a single component.\n\n\nftm[1]  # returns a list with a single component.\n\n$name\n[1] \"Fatma\"\n\n\n\nftm[[1]]  # returns a one-element vector\n\n[1] \"Fatma\"\n\n\n\nmode(ftm[1])\nmode(ftm[[1]])\n\n[1] \"list\"\n\n\n[1] \"character\""
  },
  {
    "objectID": "8 - Lists.html#example-count-the-occurrences-of-numbers-in-a-vector",
    "href": "8 - Lists.html#example-count-the-occurrences-of-numbers-in-a-vector",
    "title": "8  Lists",
    "section": "Example: Count the occurrences of numbers in a vector",
    "text": "Example: Count the occurrences of numbers in a vector\nWe have a vector of numbers where numbers are repeated.\n\nmydata = c(1,2,3,15,1,2,3,4,1)\n\nWe want to keep the count of each number in a list, such that counts[[i]] stores how many times the number i occurs in data.\nInitialize the counts list with zeros.\n\ncounts = list(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\n\nNow loop over the data vector, and increase the count of the appropriate number.\n\nmydata\n\n[1]  1  2  3 15  1  2  3  4  1\n\n\n\nfor (x in mydata) {\n    counts[[x]] &lt;- counts[[x]] + 1\n}\ncounts\n\n[[1]]\n[1] 3\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 2\n\n[[4]]\n[1] 1\n\n[[5]]\n[1] 0\n\n[[6]]\n[1] 0\n\n[[7]]\n[1] 0\n\n[[8]]\n[1] 0\n\n[[9]]\n[1] 0\n\n[[10]]\n[1] 0\n\n[[11]]\n[1] 0\n\n[[12]]\n[1] 0\n\n[[13]]\n[1] 0\n\n[[14]]\n[1] 0\n\n[[15]]\n[1] 1\n\n[[16]]\n[1] 0\n\n[[17]]\n[1] 0"
  },
  {
    "objectID": "8 - Lists.html#count-the-occurrences-of-words-in-a-text",
    "href": "8 - Lists.html#count-the-occurrences-of-words-in-a-text",
    "title": "8  Lists",
    "section": "Count the occurrences of words in a text",
    "text": "Count the occurrences of words in a text\nHere is a simple application of textual analysis. Consider the following (short) text. We have preprocessed it to remove punctuation marks and uppercase letters.\n\nsometext &lt;- \"my dear fellow said sherlock holmes as we sat on either side of the fire in his lodgings at baker street life is infinitely stranger than anything which the mind of man could invent we would not dare to conceive the things which are really mere commonplaces of existence if we could fly out of that window hand in hand hover over this great city gently remove the roofs and peep in at the queer things which are going on the strange coincidences the plannings the cross purposes the wonderful chains of events working through generations and leading to the most outré results it would make all fiction with its conventionalities and foreseen conclusions most stale and unprofitable\"\n\n\nprint(sometext)\n\n[1] \"my dear fellow said sherlock holmes as we sat on either side of the fire in his lodgings at baker street life is infinitely stranger than anything which the mind of man could invent we would not dare to conceive the things which are really mere commonplaces of existence if we could fly out of that window hand in hand hover over this great city gently remove the roofs and peep in at the queer things which are going on the strange coincidences the plannings the cross purposes the wonderful chains of events working through generations and leading to the most outré results it would make all fiction with its conventionalities and foreseen conclusions most stale and unprofitable\"\n\n\n\nObjective: Create a list wordcounts such that wordcounts$word gives the number of occurrences of word in the given text.\nThis problem is similar to the example above where we counted the occurrences of numbers.\nHowever, we don’t know in advance what words and how many words we are going to encounter. So we cannot initialize the counts to zero.\n\nWe will approach the problem as follows:\nfor every word in the word list\n    if the word is already in the list, increase the count.\n    otherwise, add this word with a count of 1.\nIf an element is not in a list, the list returns NULL. This can be used to check for the existence of an element in a list.\n\nwordcounts &lt;- list()\nwordcounts\n\nlist()\n\n\n\nwordcounts[[\"sherlock\"]]\n\nNULL\n\n\n\nis.null(wordcounts[[\"sherlock\"]])\n\n[1] TRUE\n\n\nSo, beginning with the first word, we add it to our list:\n\nword &lt;- \"my\"\nif (is.null(wordcounts[[word]])){\n    wordcounts[[word]] &lt;- 1\n} else {\n    wordcounts[[word]] &lt;- wordcounts[[word]] + 1\n}\n\n\nwordcounts\n\n$my\n[1] 2\n\n\nSimilarly, the second word:\n\nword &lt;- \"dear\"\nif (is.null(wordcounts[[word]])){\n    wordcounts[[word]] &lt;- 1\n} else {\n    wordcounts[[word]] &lt;- wordcounts[[word]] + 1\n}\nwordcounts\n\n$my\n[1] 2\n\n$dear\n[1] 1\n\n\nAnd now the list contains the elements we gave, and nothing more.\n\nwordcounts\n\n$my\n[1] 2\n\n$dear\n[1] 1\n\n\nWe can’t go word by word manually. The better solution is to loop over every word in the text. We need to find a way to convert the large string of text to a vector, so that we can take the words one by one.\nThe strsplit() function does that for us:\n\nstrsplit(sometext, split=\" \")\n\n[[1]]\n  [1] \"my\"                \"dear\"              \"fellow\"           \n  [4] \"said\"              \"sherlock\"          \"holmes\"           \n  [7] \"as\"                \"we\"                \"sat\"              \n [10] \"on\"                \"either\"            \"side\"             \n [13] \"of\"                \"the\"               \"fire\"             \n [16] \"in\"                \"his\"               \"lodgings\"         \n [19] \"at\"                \"baker\"             \"street\"           \n [22] \"life\"              \"is\"                \"infinitely\"       \n [25] \"stranger\"          \"than\"              \"anything\"         \n [28] \"which\"             \"the\"               \"mind\"             \n [31] \"of\"                \"man\"               \"could\"            \n [34] \"invent\"            \"we\"                \"would\"            \n [37] \"not\"               \"dare\"              \"to\"               \n [40] \"conceive\"          \"the\"               \"things\"           \n [43] \"which\"             \"are\"               \"really\"           \n [46] \"mere\"              \"commonplaces\"      \"of\"               \n [49] \"existence\"         \"if\"                \"we\"               \n [52] \"could\"             \"fly\"               \"out\"              \n [55] \"of\"                \"that\"              \"window\"           \n [58] \"hand\"              \"in\"                \"hand\"             \n [61] \"hover\"             \"over\"              \"this\"             \n [64] \"great\"             \"city\"              \"gently\"           \n [67] \"remove\"            \"the\"               \"roofs\"            \n [70] \"and\"               \"peep\"              \"in\"               \n [73] \"at\"                \"the\"               \"queer\"            \n [76] \"things\"            \"which\"             \"are\"              \n [79] \"going\"             \"on\"                \"the\"              \n [82] \"strange\"           \"coincidences\"      \"the\"              \n [85] \"plannings\"         \"the\"               \"cross\"            \n [88] \"purposes\"          \"the\"               \"wonderful\"        \n [91] \"chains\"            \"of\"                \"events\"           \n [94] \"working\"           \"through\"           \"generations\"      \n [97] \"and\"               \"leading\"           \"to\"               \n[100] \"the\"               \"most\"              \"outré\"            \n[103] \"results\"           \"it\"                \"would\"            \n[106] \"make\"              \"all\"               \"fiction\"          \n[109] \"with\"              \"its\"               \"conventionalities\"\n[112] \"and\"               \"foreseen\"          \"conclusions\"      \n[115] \"most\"              \"stale\"             \"and\"              \n[118] \"unprofitable\"     \n\n\nNote that strsplit() returns a list. The first element of this list is the vector of strings we look for.\n\nwordsintext &lt;- strsplit(sometext, split=\" \")[[1]]\nwordsintext\n\n  [1] \"my\"                \"dear\"              \"fellow\"           \n  [4] \"said\"              \"sherlock\"          \"holmes\"           \n  [7] \"as\"                \"we\"                \"sat\"              \n [10] \"on\"                \"either\"            \"side\"             \n [13] \"of\"                \"the\"               \"fire\"             \n [16] \"in\"                \"his\"               \"lodgings\"         \n [19] \"at\"                \"baker\"             \"street\"           \n [22] \"life\"              \"is\"                \"infinitely\"       \n [25] \"stranger\"          \"than\"              \"anything\"         \n [28] \"which\"             \"the\"               \"mind\"             \n [31] \"of\"                \"man\"               \"could\"            \n [34] \"invent\"            \"we\"                \"would\"            \n [37] \"not\"               \"dare\"              \"to\"               \n [40] \"conceive\"          \"the\"               \"things\"           \n [43] \"which\"             \"are\"               \"really\"           \n [46] \"mere\"              \"commonplaces\"      \"of\"               \n [49] \"existence\"         \"if\"                \"we\"               \n [52] \"could\"             \"fly\"               \"out\"              \n [55] \"of\"                \"that\"              \"window\"           \n [58] \"hand\"              \"in\"                \"hand\"             \n [61] \"hover\"             \"over\"              \"this\"             \n [64] \"great\"             \"city\"              \"gently\"           \n [67] \"remove\"            \"the\"               \"roofs\"            \n [70] \"and\"               \"peep\"              \"in\"               \n [73] \"at\"                \"the\"               \"queer\"            \n [76] \"things\"            \"which\"             \"are\"              \n [79] \"going\"             \"on\"                \"the\"              \n [82] \"strange\"           \"coincidences\"      \"the\"              \n [85] \"plannings\"         \"the\"               \"cross\"            \n [88] \"purposes\"          \"the\"               \"wonderful\"        \n [91] \"chains\"            \"of\"                \"events\"           \n [94] \"working\"           \"through\"           \"generations\"      \n [97] \"and\"               \"leading\"           \"to\"               \n[100] \"the\"               \"most\"              \"outré\"            \n[103] \"results\"           \"it\"                \"would\"            \n[106] \"make\"              \"all\"               \"fiction\"          \n[109] \"with\"              \"its\"               \"conventionalities\"\n[112] \"and\"               \"foreseen\"          \"conclusions\"      \n[115] \"most\"              \"stale\"             \"and\"              \n[118] \"unprofitable\"     \n\n\nFor each word in the text, increase the count if the word exists in the counter list, otherwise set it to one.\n\nwordcounts &lt;- list()\nfor (word in wordsintext){\n    if (is.null(wordcounts[[word]])){\n        wordcounts[[word]] &lt;- 1\n    } else {\n        wordcounts[[word]] &lt;- wordcounts[[word]] + 1\n    }\n}\n\n\nwordcounts\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n$fellow\n[1] 1\n\n$said\n[1] 1\n\n$sherlock\n[1] 1\n\n$holmes\n[1] 1\n\n$as\n[1] 1\n\n$we\n[1] 3\n\n$sat\n[1] 1\n\n$on\n[1] 2\n\n$either\n[1] 1\n\n$side\n[1] 1\n\n$of\n[1] 5\n\n$the\n[1] 10\n\n$fire\n[1] 1\n\n$`in`\n[1] 3\n\n$his\n[1] 1\n\n$lodgings\n[1] 1\n\n$at\n[1] 2\n\n$baker\n[1] 1\n\n$street\n[1] 1\n\n$life\n[1] 1\n\n$is\n[1] 1\n\n$infinitely\n[1] 1\n\n$stranger\n[1] 1\n\n$than\n[1] 1\n\n$anything\n[1] 1\n\n$which\n[1] 3\n\n$mind\n[1] 1\n\n$man\n[1] 1\n\n$could\n[1] 2\n\n$invent\n[1] 1\n\n$would\n[1] 2\n\n$not\n[1] 1\n\n$dare\n[1] 1\n\n$to\n[1] 2\n\n$conceive\n[1] 1\n\n$things\n[1] 2\n\n$are\n[1] 2\n\n$really\n[1] 1\n\n$mere\n[1] 1\n\n$commonplaces\n[1] 1\n\n$existence\n[1] 1\n\n$`if`\n[1] 1\n\n$fly\n[1] 1\n\n$out\n[1] 1\n\n$that\n[1] 1\n\n$window\n[1] 1\n\n$hand\n[1] 2\n\n$hover\n[1] 1\n\n$over\n[1] 1\n\n$this\n[1] 1\n\n$great\n[1] 1\n\n$city\n[1] 1\n\n$gently\n[1] 1\n\n$remove\n[1] 1\n\n$roofs\n[1] 1\n\n$and\n[1] 4\n\n$peep\n[1] 1\n\n$queer\n[1] 1\n\n$going\n[1] 1\n\n$strange\n[1] 1\n\n$coincidences\n[1] 1\n\n$plannings\n[1] 1\n\n$cross\n[1] 1\n\n$purposes\n[1] 1\n\n$wonderful\n[1] 1\n\n$chains\n[1] 1\n\n$events\n[1] 1\n\n$working\n[1] 1\n\n$through\n[1] 1\n\n$generations\n[1] 1\n\n$leading\n[1] 1\n\n$most\n[1] 2\n\n$outré\n[1] 1\n\n$results\n[1] 1\n\n$it\n[1] 1\n\n$make\n[1] 1\n\n$all\n[1] 1\n\n$fiction\n[1] 1\n\n$with\n[1] 1\n\n$its\n[1] 1\n\n$conventionalities\n[1] 1\n\n$foreseen\n[1] 1\n\n$conclusions\n[1] 1\n\n$stale\n[1] 1\n\n$unprofitable\n[1] 1\n\n\nWhich words occur more than twice?\n\nwordcounts[wordcounts &gt; 2]\n\n$we\n[1] 3\n\n$of\n[1] 5\n\n$the\n[1] 10\n\n$`in`\n[1] 3\n\n$which\n[1] 3\n\n$and\n[1] 4\n\n\nSort the list, most frequent word first.\n\nunlist(wordcounts)\n\n               my              dear            fellow              said \n                1                 1                 1                 1 \n         sherlock            holmes                as                we \n                1                 1                 1                 3 \n              sat                on            either              side \n                1                 2                 1                 1 \n               of               the              fire                in \n                5                10                 1                 3 \n              his          lodgings                at             baker \n                1                 1                 2                 1 \n           street              life                is        infinitely \n                1                 1                 1                 1 \n         stranger              than          anything             which \n                1                 1                 1                 3 \n             mind               man             could            invent \n                1                 1                 2                 1 \n            would               not              dare                to \n                2                 1                 1                 2 \n         conceive            things               are            really \n                1                 2                 2                 1 \n             mere      commonplaces         existence                if \n                1                 1                 1                 1 \n              fly               out              that            window \n                1                 1                 1                 1 \n             hand             hover              over              this \n                2                 1                 1                 1 \n            great              city            gently            remove \n                1                 1                 1                 1 \n            roofs               and              peep             queer \n                1                 4                 1                 1 \n            going           strange      coincidences         plannings \n                1                 1                 1                 1 \n            cross          purposes         wonderful            chains \n                1                 1                 1                 1 \n           events           working           through       generations \n                1                 1                 1                 1 \n          leading              most             outré           results \n                1                 2                 1                 1 \n               it              make               all           fiction \n                1                 1                 1                 1 \n             with               its conventionalities          foreseen \n                1                 1                 1                 1 \n      conclusions             stale      unprofitable \n                1                 1                 1 \n\n\n\norder(unlist(wordcounts),decreasing = T)\n\n [1] 14 13 58  8 16 28 10 19 31 33 36 38 39 49 74  1  2  3  4  5  6  7  9 11 12\n[26] 15 17 18 20 21 22 23 24 25 26 27 29 30 32 34 35 37 40 41 42 43 44 45 46 47\n[51] 48 50 51 52 53 54 55 56 57 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75\n[76] 76 77 78 79 80 81 82 83 84 85 86 87\n\n\n\nsort(unlist(wordcounts),decreasing = T)\n\n              the                of               and                we \n               10                 5                 4                 3 \n               in             which                on                at \n                3                 3                 2                 2 \n            could             would                to            things \n                2                 2                 2                 2 \n              are              hand              most                my \n                2                 2                 2                 1 \n             dear            fellow              said          sherlock \n                1                 1                 1                 1 \n           holmes                as               sat            either \n                1                 1                 1                 1 \n             side              fire               his          lodgings \n                1                 1                 1                 1 \n            baker            street              life                is \n                1                 1                 1                 1 \n       infinitely          stranger              than          anything \n                1                 1                 1                 1 \n             mind               man            invent               not \n                1                 1                 1                 1 \n             dare          conceive            really              mere \n                1                 1                 1                 1 \n     commonplaces         existence                if               fly \n                1                 1                 1                 1 \n              out              that            window             hover \n                1                 1                 1                 1 \n             over              this             great              city \n                1                 1                 1                 1 \n           gently            remove             roofs              peep \n                1                 1                 1                 1 \n            queer             going           strange      coincidences \n                1                 1                 1                 1 \n        plannings             cross          purposes         wonderful \n                1                 1                 1                 1 \n           chains            events           working           through \n                1                 1                 1                 1 \n      generations           leading             outré           results \n                1                 1                 1                 1 \n               it              make               all           fiction \n                1                 1                 1                 1 \n             with               its conventionalities          foreseen \n                1                 1                 1                 1 \n      conclusions             stale      unprofitable \n                1                 1                 1 \n\n\n\nwordcounts[order(unlist(wordcounts),decreasing = T)]\n\n$the\n[1] 10\n\n$of\n[1] 5\n\n$and\n[1] 4\n\n$we\n[1] 3\n\n$`in`\n[1] 3\n\n$which\n[1] 3\n\n$on\n[1] 2\n\n$at\n[1] 2\n\n$could\n[1] 2\n\n$would\n[1] 2\n\n$to\n[1] 2\n\n$things\n[1] 2\n\n$are\n[1] 2\n\n$hand\n[1] 2\n\n$most\n[1] 2\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n$fellow\n[1] 1\n\n$said\n[1] 1\n\n$sherlock\n[1] 1\n\n$holmes\n[1] 1\n\n$as\n[1] 1\n\n$sat\n[1] 1\n\n$either\n[1] 1\n\n$side\n[1] 1\n\n$fire\n[1] 1\n\n$his\n[1] 1\n\n$lodgings\n[1] 1\n\n$baker\n[1] 1\n\n$street\n[1] 1\n\n$life\n[1] 1\n\n$is\n[1] 1\n\n$infinitely\n[1] 1\n\n$stranger\n[1] 1\n\n$than\n[1] 1\n\n$anything\n[1] 1\n\n$mind\n[1] 1\n\n$man\n[1] 1\n\n$invent\n[1] 1\n\n$not\n[1] 1\n\n$dare\n[1] 1\n\n$conceive\n[1] 1\n\n$really\n[1] 1\n\n$mere\n[1] 1\n\n$commonplaces\n[1] 1\n\n$existence\n[1] 1\n\n$`if`\n[1] 1\n\n$fly\n[1] 1\n\n$out\n[1] 1\n\n$that\n[1] 1\n\n$window\n[1] 1\n\n$hover\n[1] 1\n\n$over\n[1] 1\n\n$this\n[1] 1\n\n$great\n[1] 1\n\n$city\n[1] 1\n\n$gently\n[1] 1\n\n$remove\n[1] 1\n\n$roofs\n[1] 1\n\n$peep\n[1] 1\n\n$queer\n[1] 1\n\n$going\n[1] 1\n\n$strange\n[1] 1\n\n$coincidences\n[1] 1\n\n$plannings\n[1] 1\n\n$cross\n[1] 1\n\n$purposes\n[1] 1\n\n$wonderful\n[1] 1\n\n$chains\n[1] 1\n\n$events\n[1] 1\n\n$working\n[1] 1\n\n$through\n[1] 1\n\n$generations\n[1] 1\n\n$leading\n[1] 1\n\n$outré\n[1] 1\n\n$results\n[1] 1\n\n$it\n[1] 1\n\n$make\n[1] 1\n\n$all\n[1] 1\n\n$fiction\n[1] 1\n\n$with\n[1] 1\n\n$its\n[1] 1\n\n$conventionalities\n[1] 1\n\n$foreseen\n[1] 1\n\n$conclusions\n[1] 1\n\n$stale\n[1] 1\n\n$unprofitable\n[1] 1\n\n\nWhere in the text does a word occur? Generate a list such that words are tags and the corresponding value is a vector of positions.\n\nwordsintext\n\n  [1] \"my\"                \"dear\"              \"fellow\"           \n  [4] \"said\"              \"sherlock\"          \"holmes\"           \n  [7] \"as\"                \"we\"                \"sat\"              \n [10] \"on\"                \"either\"            \"side\"             \n [13] \"of\"                \"the\"               \"fire\"             \n [16] \"in\"                \"his\"               \"lodgings\"         \n [19] \"at\"                \"baker\"             \"street\"           \n [22] \"life\"              \"is\"                \"infinitely\"       \n [25] \"stranger\"          \"than\"              \"anything\"         \n [28] \"which\"             \"the\"               \"mind\"             \n [31] \"of\"                \"man\"               \"could\"            \n [34] \"invent\"            \"we\"                \"would\"            \n [37] \"not\"               \"dare\"              \"to\"               \n [40] \"conceive\"          \"the\"               \"things\"           \n [43] \"which\"             \"are\"               \"really\"           \n [46] \"mere\"              \"commonplaces\"      \"of\"               \n [49] \"existence\"         \"if\"                \"we\"               \n [52] \"could\"             \"fly\"               \"out\"              \n [55] \"of\"                \"that\"              \"window\"           \n [58] \"hand\"              \"in\"                \"hand\"             \n [61] \"hover\"             \"over\"              \"this\"             \n [64] \"great\"             \"city\"              \"gently\"           \n [67] \"remove\"            \"the\"               \"roofs\"            \n [70] \"and\"               \"peep\"              \"in\"               \n [73] \"at\"                \"the\"               \"queer\"            \n [76] \"things\"            \"which\"             \"are\"              \n [79] \"going\"             \"on\"                \"the\"              \n [82] \"strange\"           \"coincidences\"      \"the\"              \n [85] \"plannings\"         \"the\"               \"cross\"            \n [88] \"purposes\"          \"the\"               \"wonderful\"        \n [91] \"chains\"            \"of\"                \"events\"           \n [94] \"working\"           \"through\"           \"generations\"      \n [97] \"and\"               \"leading\"           \"to\"               \n[100] \"the\"               \"most\"              \"outré\"            \n[103] \"results\"           \"it\"                \"would\"            \n[106] \"make\"              \"all\"               \"fiction\"          \n[109] \"with\"              \"its\"               \"conventionalities\"\n[112] \"and\"               \"foreseen\"          \"conclusions\"      \n[115] \"most\"              \"stale\"             \"and\"              \n[118] \"unprofitable\"     \n\n\n\nwordlocations &lt;- list()\n\n\nfor (i in 1:length(wordsintext)){\n    word &lt;- wordsintext[i]\n    wordlocations[[word]] &lt;- c(wordlocations[[word]],i)\n}\nwordlocations\n\n$my\n[1] 1 1 1\n\n$dear\n[1] 2 2 2\n\n$fellow\n[1] 3 3 3\n\n$said\n[1] 4 4 4\n\n$sherlock\n[1] 5 5 5\n\n$holmes\n[1] 6 6 6\n\n$as\n[1] 7 7 7\n\n$we\n[1]  8 35 51  8 35 51  8 35 51\n\n$sat\n[1] 9 9 9\n\n$on\n[1] 10 80 10 80 10 80\n\n$either\n[1] 11 11 11\n\n$side\n[1] 12 12 12\n\n$of\n [1] 13 31 48 55 92 13 31 48 55 92 13 31 48 55 92\n\n$the\n [1]  14  29  41  68  74  81  84  86  89 100  14  29  41  68  74  81  84  86  89\n[20] 100  14  29  41  68  74  81  84  86  89 100\n\n$fire\n[1] 15 15 15\n\n$`in`\n[1] 16 59 72 16 59 72 16 59 72\n\n$his\n[1] 17 17 17\n\n$lodgings\n[1] 18 18 18\n\n$at\n[1] 19 73 19 73 19 73\n\n$baker\n[1] 20 20 20\n\n$street\n[1] 21 21 21\n\n$life\n[1] 22 22 22\n\n$is\n[1] 23 23 23\n\n$infinitely\n[1] 24 24 24\n\n$stranger\n[1] 25 25 25\n\n$than\n[1] 26 26 26\n\n$anything\n[1] 27 27 27\n\n$which\n[1] 28 43 77 28 43 77 28 43 77\n\n$mind\n[1] 30 30 30\n\n$man\n[1] 32 32 32\n\n$could\n[1] 33 52 33 52 33 52\n\n$invent\n[1] 34 34 34\n\n$would\n[1]  36 105  36 105  36 105\n\n$not\n[1] 37 37 37\n\n$dare\n[1] 38 38 38\n\n$to\n[1] 39 99 39 99 39 99\n\n$conceive\n[1] 40 40 40\n\n$things\n[1] 42 76 42 76 42 76\n\n$are\n[1] 44 78 44 78 44 78\n\n$really\n[1] 45 45 45\n\n$mere\n[1] 46 46 46\n\n$commonplaces\n[1] 47 47 47\n\n$existence\n[1] 49 49 49\n\n$`if`\n[1] 50 50 50\n\n$fly\n[1] 53 53 53\n\n$out\n[1] 54 54 54\n\n$that\n[1] 56 56 56\n\n$window\n[1] 57 57 57\n\n$hand\n[1] 58 60 58 60 58 60\n\n$hover\n[1] 61 61 61\n\n$over\n[1] 62 62 62\n\n$this\n[1] 63 63 63\n\n$great\n[1] 64 64 64\n\n$city\n[1] 65 65 65\n\n$gently\n[1] 66 66 66\n\n$remove\n[1] 67 67 67\n\n$roofs\n[1] 69 69 69\n\n$and\n [1]  70  97 112 117  70  97 112 117  70  97 112 117\n\n$peep\n[1] 71 71 71\n\n$queer\n[1] 75 75 75\n\n$going\n[1] 79 79 79\n\n$strange\n[1] 82 82 82\n\n$coincidences\n[1] 83 83 83\n\n$plannings\n[1] 85 85 85\n\n$cross\n[1] 87 87 87\n\n$purposes\n[1] 88 88 88\n\n$wonderful\n[1] 90 90 90\n\n$chains\n[1] 91 91 91\n\n$events\n[1] 93 93 93\n\n$working\n[1] 94 94 94\n\n$through\n[1] 95 95 95\n\n$generations\n[1] 96 96 96\n\n$leading\n[1] 98 98 98\n\n$most\n[1] 101 115 101 115 101 115\n\n$outré\n[1] 102 102 102\n\n$results\n[1] 103 103 103\n\n$it\n[1] 104 104 104\n\n$make\n[1] 106 106 106\n\n$all\n[1] 107 107 107\n\n$fiction\n[1] 108 108 108\n\n$with\n[1] 109 109 109\n\n$its\n[1] 110 110 110\n\n$conventionalities\n[1] 111 111 111\n\n$foreseen\n[1] 113 113 113\n\n$conclusions\n[1] 114 114 114\n\n$stale\n[1] 116 116 116\n\n$unprofitable\n[1] 118 118 118\n\n\nOnce we have the wordlocations list, we can get the number of occurrences of words without passing over the data again. We only need to apply the length() function to the list.\n\nlapply(wordlocations, length)\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n$fellow\n[1] 1\n\n$said\n[1] 1\n\n$sherlock\n[1] 1\n\n$holmes\n[1] 1\n\n$as\n[1] 1\n\n$we\n[1] 3\n\n$sat\n[1] 1\n\n$on\n[1] 2\n\n$either\n[1] 1\n\n$side\n[1] 1\n\n$of\n[1] 5\n\n$the\n[1] 10\n\n$fire\n[1] 1\n\n$`in`\n[1] 3\n\n$his\n[1] 1\n\n$lodgings\n[1] 1\n\n$at\n[1] 2\n\n$baker\n[1] 1\n\n$street\n[1] 1\n\n$life\n[1] 1\n\n$is\n[1] 1\n\n$infinitely\n[1] 1\n\n$stranger\n[1] 1\n\n$than\n[1] 1\n\n$anything\n[1] 1\n\n$which\n[1] 3\n\n$mind\n[1] 1\n\n$man\n[1] 1\n\n$could\n[1] 2\n\n$invent\n[1] 1\n\n$would\n[1] 2\n\n$not\n[1] 1\n\n$dare\n[1] 1\n\n$to\n[1] 2\n\n$conceive\n[1] 1\n\n$things\n[1] 2\n\n$are\n[1] 2\n\n$really\n[1] 1\n\n$mere\n[1] 1\n\n$commonplaces\n[1] 1\n\n$existence\n[1] 1\n\n$`if`\n[1] 1\n\n$fly\n[1] 1\n\n$out\n[1] 1\n\n$that\n[1] 1\n\n$window\n[1] 1\n\n$hand\n[1] 2\n\n$hover\n[1] 1\n\n$over\n[1] 1\n\n$this\n[1] 1\n\n$great\n[1] 1\n\n$city\n[1] 1\n\n$gently\n[1] 1\n\n$remove\n[1] 1\n\n$roofs\n[1] 1\n\n$and\n[1] 4\n\n$peep\n[1] 1\n\n$queer\n[1] 1\n\n$going\n[1] 1\n\n$strange\n[1] 1\n\n$coincidences\n[1] 1\n\n$plannings\n[1] 1\n\n$cross\n[1] 1\n\n$purposes\n[1] 1\n\n$wonderful\n[1] 1\n\n$chains\n[1] 1\n\n$events\n[1] 1\n\n$working\n[1] 1\n\n$through\n[1] 1\n\n$generations\n[1] 1\n\n$leading\n[1] 1\n\n$most\n[1] 2\n\n$outré\n[1] 1\n\n$results\n[1] 1\n\n$it\n[1] 1\n\n$make\n[1] 1\n\n$all\n[1] 1\n\n$fiction\n[1] 1\n\n$with\n[1] 1\n\n$its\n[1] 1\n\n$conventionalities\n[1] 1\n\n$foreseen\n[1] 1\n\n$conclusions\n[1] 1\n\n$stale\n[1] 1\n\n$unprofitable\n[1] 1"
  },
  {
    "objectID": "9 - Data Frames.html",
    "href": "9 - Data Frames.html",
    "title": "9  Data Frames",
    "section": "",
    "text": "options(jupyter.rich_display = FALSE);\noptions(stringsAsFactors = FALSE)\n\nData frames are used for representing tabular data where each column has a different type, such as\n\n\n\nName\nHeight\nWeight\nGym member?\nCity\n\n\n\n\nCem\n1.75\n66\nT\nIstanbul\n\n\nCan\n1.70\n65\nF\nAnkara\n\n\nHande\n1.62\n61\nT\nIzmir\n\n\n\n\nLists are heterogeneous analogs of vectors.\nData frames are heterogenous analogs of matrices.\nInternally, a data frame is a list of equal-length vectors.\n\n\nWhy not use a matrix?\nEarlier we have seen how to store data in vectors, for example:\n\nheights &lt;- c(Can=1.70, Cem=1.75, Hande=1.62)\nweights &lt;- c(Can=65, Cem=66, Hande=61)\n\nIf we want to have this data combined in a table, we can generate a matrix out of it:\n\nheight_weight &lt;- cbind(\n    c(1.70, 1.75,1.62),\n    c(65, 66, 61)\n)\nrownames(height_weight) &lt;- c(\"Can\",\"Cem\",\"Hande\")\ncolnames(height_weight) &lt;- c(\"Height\",\"Weight\")\nheight_weight\n\n      Height Weight\nCan   1.70   65    \nCem   1.75   66    \nHande 1.62   61    \n\n\nAlternatively, if the data are already stored in a vector:\n\nheight_weight &lt;- cbind(heights, weights)\ncolnames(height_weight) &lt;- c(\"Height\",\"Weight\")\nheight_weight\n\n      Height Weight\nCan   1.70   65    \nCem   1.75   66    \nHande 1.62   61    \n\n\nFor example, get the BMI of “Can”.\n\nheight_weight[\"Can\",\"Weight\"]/height_weight[\"Can\",\"Height\"]^2\n\n[1] 22.49135\n\n\nTrouble arises when we want to store the Boolean gym membership data in this matrix as well.\n\nheights &lt;- c(Can=1.70, Cem=1.75, Hande=1.62)\nweights &lt;- c(Can=65, Cem=66, Hande=61)\nmember &lt;- c(Can=TRUE, Cem=FALSE, Hande=TRUE)\nheight_weight &lt;- cbind(heights, weights, member)\ncolnames(height_weight) &lt;- c(\"Height\",\"Weight\",\"Gym member\")\nheight_weight\n\n      Height Weight Gym member\nCan   1.70   65     1         \nCem   1.75   66     0         \nHande 1.62   61     1         \n\n\n\nThe last column has numeric values 0 or 1, instead of TRUE or FALSE.\nReason: All elements in a matrix must have the same mode (numeric here).\nIf a new mode is added (Boolean here), all elements are coerced to a common type (numeric here).\nTRUE becomes 1, FALSE becomes 0.\n\nSuppose we also want to add the city data.\n\ncity &lt;- c(Can=\"Ankara\",Cem=\"Istanbul\",Hande=\"Izmir\")\n\nheight_weight &lt;- cbind(heights, weights, member, city)\ncolnames(height_weight) &lt;- c(\"Height\",\"Weight\",\"Gym member\",\"City\")\n\nprint(height_weight)\n\n      Height Weight Gym member City      \nCan   \"1.7\"  \"65\"   \"TRUE\"     \"Ankara\"  \nCem   \"1.75\" \"66\"   \"FALSE\"    \"Istanbul\"\nHande \"1.62\" \"61\"   \"TRUE\"     \"Izmir\"   \n\n\nAll entries are now coerced to strings. The data is still there, but we cannot perform computations anymore.\n\nheight_weight[\"Can\",\"Weight\"]/height_weight[\"Can\",\"Height\"]^2\n\nERROR: Error in height_weight[\"Can\", \"Height\"]^2: non-numeric argument to binary operator\n\n\nKeep the data in separate vectors? * There would be no coercion, but data manipulation would be difficult. * Selecting subsets, adding/removing entries, would require several operations and great care. * A data frame that combines several vectors as data columns provides convenience.\n\n\nCreating data frames\nSeveral vectors can be combined into a data frame using the data.frame() function.\n\npeople &lt;- data.frame(Height=heights, \n                     Weight=weights, \n                     Member=c(Can=TRUE, Cem=FALSE, Hande=TRUE), \n                     City=city,\n                    stringsAsFactors=FALSE)\nprint(people)\n\n      Height Weight Member     City\nCan     1.70     65   TRUE   Ankara\nCem     1.75     66  FALSE Istanbul\nHande   1.62     61   TRUE    Izmir\n\n\nRecycling applies to data frames as well. Suppose we add the \"City\" data and make it \"Istanbul\" for all:\n\ndata.frame(Height=heights, Weight=weights, City=\"Istanbul\")\n\n      Height Weight City    \nCan   1.70   65     Istanbul\nCem   1.75   66     Istanbul\nHande 1.62   61     Istanbul\n\n\nHere, the element \"Istanbul\" is repeated until it matches the length of other vectors.\nThe functions rownames() and colnames() can be used to change labels of rows and columns.\n\ntempdf &lt;- data.frame(c(1.70, 1.75,1.62),c(65, 66, 61))\ntempdf\n\n  c.1.7..1.75..1.62. c.65..66..61.\n1 1.70               65           \n2 1.75               66           \n3 1.62               61           \n\n\n\nrownames(tempdf) &lt;- c(\"Can\",\"Cem\",\"Hande\")\ncolnames(tempdf) &lt;- c(\"Height\",\"Weight\")\ntempdf\n\n      Height Weight\nCan   1.70   65    \nCem   1.75   66    \nHande 1.62   61    \n\n\n\n\nAccessing columns of data frames\nA data frame is a list of columns; so we can access a column using the list notation we’ve seen before.\n\npeople\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \n\n\n\npeople[[1]]  # indexing with component number\npeople$Weight  # component name\npeople[[\"City\"]]\n\n[1] 1.70 1.75 1.62\n\n\n[1] 65 66 61\n\n\n[1] \"Ankara\"   \"Istanbul\" \"Izmir\"   \n\n\n\n\nAccessing elements via matrix-like indexing\nA data frame can be indexed as if it is a matrix, using the [row, col] notation.\n\npeople\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \n\n\n\npeople[,1]  # column 1\npeople[2,1] # row 2, column 1\npeople[\"Cem\",\"Height\"]\npeople[\"Can\",]\n\n[1] 1.70 1.75 1.62\n\n\n[1] 1.75\n\n\n[1] 1.75\n\n\n    Height Weight Member City  \nCan 1.7    65     TRUE   Ankara\n\n\n\n\nSelecting rows using indices\nWe can specify a vector of indices to select rows.\n\npeople\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \n\n\n\npeople[c(1,3),]\npeople[c(\"Can\",\"Hande\"),]\n\n      Height Weight Member City  \nCan   1.70   65     TRUE   Ankara\nHande 1.62   61     TRUE   Izmir \n\n\n      Height Weight Member City  \nCan   1.70   65     TRUE   Ankara\nHande 1.62   61     TRUE   Izmir \n\n\nA negative index, again, indicates an element that is to be omitted.\n\npeople[-2,-3]\n\n      Height Weight City  \nCan   1.70   65     Ankara\nHande 1.62   61     Izmir \n\n\n\n\nSelecting some columns\nWe can provide a list of column names or numeric indices to get a subframe.\n\npeople[, c(\"Member\",\"City\")]\npeople[, 3:4]\n\n      Member City    \nCan    TRUE  Ankara  \nCem   FALSE  Istanbul\nHande  TRUE  Izmir   \n\n\n      Member City    \nCan    TRUE  Ankara  \nCem   FALSE  Istanbul\nHande  TRUE  Izmir   \n\n\nA subset of rows and a subset of columns:\n\npeople[c(\"Can\",\"Cem\"), 1:2]\n\n    Height Weight\nCan 1.70   65    \nCem 1.75   66    \n\n\n\n\nFiltering data frames\nThe Boolean operators to select vector elements are applicable to data frames as well.\n\npeople\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \n\n\n\npeople$Height &gt;= 1.70 | people$City == \"Izmir\"\n\n[1] TRUE TRUE TRUE\n\n\n\npeople[ people$Height&gt;= 1.70, \"City\"]\n\n[1] \"Ankara\"   \"Istanbul\"\n\n\n\npeople[ people$Member, ]\n\n      Height Weight Member City  \nCan   1.70   65     TRUE   Ankara\nHande 1.62   61     TRUE   Izmir \n\n\n\npeople[ people$Member, c(\"Height\",\"City\")]\n\n      Height City  \nCan   1.70   Ankara\nHande 1.62   Izmir \n\n\n\n\nAdding new rows\nAs with matrices, we can use rbind() to add a new row to an existing data frame. The new row is usually in the form of a list.\n\npeople\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \n\n\n\nrbind(people, Lale=list(1.71, 64, FALSE, \"Bursa\"))\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \nLale  1.71   64     FALSE  Bursa   \n\n\n\n\nConcatenate two data frames\n\nnewpeople &lt;- data.frame(\n    Weight=c(64, 50),\n    Member=c(F,T),\n    City=c(\"Bursa\",\"Istanbul\"),\n    Height=c(Lale=1.71, Ziya=1.45)\n)\nnewpeople\n\n     Weight Member City     Height\nLale 64     FALSE  Bursa    1.71  \nZiya 50      TRUE  Istanbul 1.45  \n\n\n\nrbind(people, newpeople)\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \nLale  1.71   64     FALSE  Bursa   \nZiya  1.45   50      TRUE  Istanbul\n\n\n\n\nAdding new columns\nSuppose we want to add a column for BMI, which we calculate using the existing columns. We can do this using cbind() as follows.\n\npeople_bmi &lt;- cbind(people, people$Weight/people$Height^2)\npeople_bmi\n\n      Height Weight Member City     people$Weight/people$Height^2\nCan   1.70   65      TRUE  Ankara   22.49135                     \nCem   1.75   66     FALSE  Istanbul 21.55102                     \nHande 1.62   61      TRUE  Izmir    23.24341                     \n\n\nNote that the name of the new column is automatically set. We can change this using the names() or colnames() functions.\n\nnames(people_bmi)[5] &lt;- \"BMI\"\npeople_bmi\n\n      Height Weight Member City     BMI     \nCan   1.70   65      TRUE  Ankara   22.49135\nCem   1.75   66     FALSE  Istanbul 21.55102\nHande 1.62   61      TRUE  Izmir    23.24341\n\n\nA more direct way:\n\npeople2 &lt;- people\npeople2\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \n\n\n\npeople2$BMI &lt;- people2$Weight/people2$Height^2\npeople2\n\n      Height Weight Member City     BMI     \nCan   1.70   65      TRUE  Ankara   22.49135\nCem   1.75   66     FALSE  Istanbul 21.55102\nHande 1.62   61      TRUE  Izmir    23.24341\n\n\nWe can create a new column as we please. For example, a column with a single NA value.\n\npeople2$obese &lt;- NA\npeople2\n\n      Height Weight Member City     BMI      obese\nCan   1.70   65      TRUE  Ankara   22.49135 NA   \nCem   1.75   66     FALSE  Istanbul 21.55102 NA   \nHande 1.62   61      TRUE  Izmir    23.24341 NA   \n\n\n\npeople2$obese &lt;- people2$BMI&gt;30\npeople2\n\n      Height Weight Member City     BMI      obese\nCan   1.70   65      TRUE  Ankara   22.49135 FALSE\nCem   1.75   66     FALSE  Istanbul 21.55102 FALSE\nHande 1.62   61      TRUE  Izmir    23.24341 FALSE\n\n\nRemove a column by setting it to NULL.\n\npeople2$obese &lt;- NULL\npeople2\n\n      Height Weight Member City     BMI     \nCan   1.70   65      TRUE  Ankara   22.49135\nCem   1.75   66     FALSE  Istanbul 21.55102\nHande 1.62   61      TRUE  Izmir    23.24341\n\n\n\n\nMerging data frames\nThe merge(x,y) function is used to create a new data frame from existing frames x and y, by combining them along a common column.\n\ndf1 &lt;- data.frame(Name=c(\"Can\",\"Cem\",\"Hande\"), Phone=c(1234,4345,8492))\ndf2 &lt;- data.frame(Age=c(25,27,26), Name=c(\"Cem\",\"Hande\",\"Can\"))\n\n\ndf1\ndf2\n\n  Name  Phone\n1 Can   1234 \n2 Cem   4345 \n3 Hande 8492 \n\n\n  Age Name \n1 25  Cem  \n2 27  Hande\n3 26  Can  \n\n\n\ndf1\ndf2\nmerge(df1,df2)\n\n  Name  Phone\n1 Can   1234 \n2 Cem   4345 \n3 Hande 8492 \n\n\n  Age Name \n1 25  Cem  \n2 27  Hande\n3 26  Can  \n\n\n  Name  Phone Age\n1 Can   1234  26 \n2 Cem   4345  25 \n3 Hande 8492  27 \n\n\n\nThe merge() function automatically detects that the Name column is common in both, and merges the data on it.\nThe order of names are different in the two frames, which is accounted for.\n\nThe columns we want to merge over may have different names in the two frames. In that case we use the by.x and by.y arguments to merge().\n\ndf2 &lt;- data.frame(Age=c(25,27,26), first_name=c(\"Cem\",\"Hande\",\"Can\"))\ndf1\ndf2\n\n  Name  Phone\n1 Can   1234 \n2 Cem   4345 \n3 Hande 8492 \n\n\n  Age first_name\n1 25  Cem       \n2 27  Hande     \n3 26  Can       \n\n\n\nmerge(df1, df2, by.x=\"Name\", by.y=\"first_name\")\n\n  Name  Phone Age\n1 Can   1234  26 \n2 Cem   4345  25 \n3 Hande 8492  27 \n\n\nSuppose we want to merge on row names.\n\npeople\n\n      Height Weight Member City    \nCan   1.70   65      TRUE  Ankara  \nCem   1.75   66     FALSE  Istanbul\nHande 1.62   61      TRUE  Izmir   \n\n\n\nphonebook &lt;- data.frame(phone=c(Can=1234, Cem=4345, Lale=8492))\nphonebook\n\n     phone\nCan  1234 \nCem  4345 \nLale 8492 \n\n\nNote that phonebook does not contain Hande, and people does not contain Lale.\nTo merge by row names, specify\"row.names\" for the by.x and by.y parameters.\n\nmerge(people, phonebook, by.x=\"row.names\", by.y=\"row.names\")\n\n  Row.names Height Weight Member City     phone\n1 Can       1.70   65      TRUE  Ankara   1234 \n2 Cem       1.75   66     FALSE  Istanbul 4345 \n\n\n\n\nInner and outer joins\n\nThe merged dataframe does not include Hande or Lale, because they are missing in one or the other data frame.\nThis is called an inner join operation.\nTo get all the rows, with some data missing, set all=TRUE (outer join operation).\n\n\nmerged_df &lt;- merge(people, phonebook,\n                   by.x=\"row.names\", by.y=\"row.names\", \n                   all=TRUE)\nmerged_df\n\n  Row.names Height Weight Member City     phone\n1 Can       1.70   65      TRUE  Ankara   1234 \n2 Cem       1.75   66     FALSE  Istanbul 4345 \n3 Hande     1.62   61      TRUE  Izmir      NA \n4 Lale        NA   NA        NA  NA       8492 \n\n\nTo set the people names as row names, assign them using rownames() function, and remove the \"Row.names\" column afterwards.\n\nrownames(merged_df) &lt;- merged_df$Row.names\nmerged_df\n\n      Row.names Height Weight Member City     phone\nCan   Can       1.70   65      TRUE  Ankara   1234 \nCem   Cem       1.75   66     FALSE  Istanbul 4345 \nHande Hande     1.62   61      TRUE  Izmir      NA \nLale  Lale        NA   NA        NA  NA       8492 \n\n\n\nmerged_df$Row.names &lt;- NULL\nmerged_df\n\n      Height Weight Member City     phone\nCan   1.70   65      TRUE  Ankara   1234 \nCem   1.75   66     FALSE  Istanbul 4345 \nHande 1.62   61      TRUE  Izmir      NA \nLale    NA   NA        NA  NA       8492 \n\n\n\n\nApplications\n\n\nAnalyze the grades in a class\n\ngrades &lt;- data.frame(\n    student = c(\"Can\",\"Cem\",\"Hande\",\"Lale\",\"Ziya\"),\n    midterm1 = c(45, 74, 67, 52, 31),\n    midterm2 = c(68, 83, 56, 22, 50),\n    final = c(59, 91, 62, 49, 65))\ngrades\n\n  student midterm1 midterm2 final\n1 Can     45       68       59   \n2 Cem     74       83       91   \n3 Hande   67       56       62   \n4 Lale    52       22       49   \n5 Ziya    31       50       65   \n\n\nGet weighted average\n\ngrades$score &lt;- grades$midterm1*0.3 + grades$midterm2*0.3 + grades$final*0.4\ngrades\n\n  student midterm1 midterm2 final score\n1 Can     45       68       59    57.5 \n2 Cem     74       83       91    83.5 \n3 Hande   67       56       62    61.7 \n4 Lale    52       22       49    41.8 \n5 Ziya    31       50       65    50.3 \n\n\nGet averages of columns\n\ngrades[,-1]\n\n  midterm1 midterm2 final score\n1 45       68       59    57.5 \n2 74       83       91    83.5 \n3 67       56       62    61.7 \n4 52       22       49    41.8 \n5 31       50       65    50.3 \n\n\n\napply(grades[,-1],2,mean)\n\nmidterm1 midterm2    final    score \n   53.80    55.80    65.20    58.96 \n\n\n\nsapply(grades[,-1],mean)\n\nmidterm1 midterm2    final    score \n   53.80    55.80    65.20    58.96 \n\n\n\nlapply(grades[,-1],mean)\n\n$midterm1\n[1] 53.8\n\n$midterm2\n[1] 55.8\n\n$final\n[1] 65.2\n\n$score\n[1] 58.96\n\n\nAssign letter grades\n\nlettergrade &lt;- function(score){\n    if (score &gt; 80) \"A\" else if (score &gt; 70) \"B\" else if (score&gt;60) \"C\" else if (score&gt;50) \"D\" else \"F\"\n}\n\n\nlettergrade(67)\n\n[1] \"C\"\n\n\n\ngrades$score\nsapply(grades$score,lettergrade)\n\n[1] 57.5 83.5 61.7 41.8 50.3\n\n\n[1] \"D\" \"A\" \"C\" \"F\" \"D\"\n\n\n\ngrades$letter &lt;- sapply(grades$score, lettergrade)\ngrades\n\n  student midterm1 midterm2 final score letter\n1 Can     45       68       59    57.5  D     \n2 Cem     74       83       91    83.5  A     \n3 Hande   67       56       62    61.7  C     \n4 Lale    52       22       49    41.8  F     \n5 Ziya    31       50       65    50.3  D     \n\n\n\n\nGrading multiple-choice exams\nOur students have taken a multiple-choice exam. All their answers, as well as the answer key, are recorded as vectors.\n\nkey &lt;- c(\"A\",\"B\",\"C\",\"D\",\"A\")\nanswers &lt;- rbind(\n    c(\"A\", \"B\", \"D\", \"A\", \"B\"),\n    c(\"A\", \"D\", \"C\", \"D\", \"A\"),\n    c(\"B\", \"B\", \"C\", \"D\", \"B\"),\n    c(\"A\", \"B\", \"C\", \"D\", \"D\"),\n    c(\"C\", \"C\", \"C\", \"D\", \"A\")\n)\n\nWe initialize a separate data frame with the student information:\n\nexam &lt;- data.frame(answers,\n                   row.names = c(\"Can\",\"Cem\",\"Hande\",\"Lale\",\"Ziya\"))\nexam\n\n      X1 X2 X3 X4 X5\nCan   A  B  D  A  B \nCem   A  D  C  D  A \nHande B  B  C  D  B \nLale  A  B  C  D  D \nZiya  C  C  C  D  A \n\n\nNow we can process this data frame to get the number of correct answers for each student. For that, we can use the sum(x==y) operation, which gives us the number of equal elements.\n\nkey\nexam[1,]\nexam[1,]==key\nsum(exam[1,]==key)\n\n[1] \"A\" \"B\" \"C\" \"D\" \"A\"\n\n\n    X1 X2 X3 X4 X5\nCan A  B  D  A  B \n\n\n    X1   X2   X3    X4    X5   \nCan TRUE TRUE FALSE FALSE FALSE\n\n\n[1] 2\n\n\nTo repeat this for each row, we create a function that returns the number of matching answers.\n\nncorrect &lt;- function(x){\n    sum(x==key)\n}\n\n\nncorrect(exam[1,])\n\n[1] 2\n\n\nAnd we use apply() to apply it to every row.\n\nexam\n\n      X1 X2 X3 X4 X5\nCan   A  B  D  A  B \nCem   A  D  C  D  A \nHande B  B  C  D  B \nLale  A  B  C  D  D \nZiya  C  C  C  D  A \n\n\n\nhelp(apply)\n\n\napply(exam,1,ncorrect)\n\n  Can   Cem Hande  Lale  Ziya \n    2     4     3     4     3 \n\n\nWe can store this result by creating a new column in the data frame.\n\nexam$correct &lt;- apply(exam,1,ncorrect)\nexam\n\n      X1 X2 X3 X4 X5 correct\nCan   A  B  D  A  B  2      \nCem   A  D  C  D  A  4      \nHande B  B  C  D  B  3      \nLale  A  B  C  D  D  4      \nZiya  C  C  C  D  A  3      \n\n\n\n\nItem database\nSuppose you run a retail store and you keep a data base of your items, their unit price, and the VAT rate for each item, such as the following.\n\nitems &lt;- data.frame(\n    row.names = c(\"Milk\",\"Meat\",\"Toothpaste\",\"Pencil\",\"Detergent\"),\n    vat = c(0.05, 0.04, 0.05, 0.06, 0.03),\n    unitprice = c(10, 20, 5, 1, 4)\n)\nitems\n\n           vat  unitprice\nMilk       0.05 10       \nMeat       0.04 20       \nToothpaste 0.05  5       \nPencil     0.06  1       \nDetergent  0.03  4       \n\n\nYou get some orders for some items, which your automated system stores with an order ID:\n\norders &lt;- data.frame(\n    row.names = c(\"1234\",\"5761\",\"1832\"),\n    item = c(\"Milk\",\"Meat\",\"Toothpaste\"),\n    amount = c(3,1,2))\norders\n\n     item       amount\n1234 Milk       3     \n5761 Meat       1     \n1832 Toothpaste 2     \n\n\nOur task is to add a new column to the orders data frame that holds the total payment for each order, including the VAT.\n  item       amount vat  unitprice total\n1 Meat       1      0.04 20        20.8 \n2 Milk       3      0.05 10        31.5 \n3 Toothpaste 2      0.05  5        10.5\n\nMerge the orders and items with an inner join.\nStore the result in a new data frame.\n\n\norders2 &lt;- merge(orders,items,by.x=\"item\",by.y=\"row.names\")\norders2\n\n  item       amount vat  unitprice\n1 Meat       1      0.04 20       \n2 Milk       3      0.05 10       \n3 Toothpaste 2      0.05  5       \n\n\nNow that we have the unit price and the VAT information on the same data frame, we can calculate the total to pay and store it in a new column.\n\norders2$total &lt;- (orders2$amount*orders2$unitprice)*(1+orders2$vat)\norders2\n\n  item       amount vat  unitprice total\n1 Meat       1      0.04 20        20.8 \n2 Milk       3      0.05 10        31.5 \n3 Toothpaste 2      0.05  5        10.5"
  },
  {
    "objectID": "10 - Factors.html",
    "href": "10 - Factors.html",
    "title": "10  Factors and categories",
    "section": "",
    "text": "options(jupyter.rich_display = FALSE)\noptions(repr.plot.width=6, repr.plot.height=4)\n\nConsider the following data table:\n\n\n\nName\nGender\nMonth of Birth\n\n\n\n\nCan\nMale\nJanuary\n\n\nCem\nMale\nJuly\n\n\nHande\nFemale\nMay\n\n\nMehmet\nMale\nMay\n\n\nDeniz\nFemale\nFebruary\n\n\nKemal\nMale\nJuly\n\n\nDerya\nFemale\nMay\n\n\nFatma\nFemale\nApril\n\n\n\n\nAll columns are strings.\nGender and Month of Birth columns can be considered categories.\n\n\nCategories and levels\n\nA categorical variable (factor) can take one of predetermined, discrete values.\n\nDay of week\nMonth of year\nShirt sizes\n\nA single value of a categorical variable is called a level\n\nMonday\nDecember\nXL\n\n\nGenerate vectors to hold the relevant data.\n\nname &lt;- c(\"Can\",\"Cem\",\"Hande\",\"Mehmet\",\"Deniz\",\"Kemal\",\"Derya\",\"Fatma\")\ngender &lt;- c(\"Male\",\"Male\",\"Female\",\"Male\",\"Female\",\"Male\",\"Female\",\"Female\")\nmode(gender)\n\n[1] \"character\"\n\n\nWe can convert the gender vector to a factor variable using the factor() function.\n\ngender_fac &lt;- factor(gender)\ngender_fac\nmode(gender_fac)\n\n[1] Male   Male   Female Male   Female Male   Female Female\nLevels: Female Male\n\n\n[1] \"numeric\"\n\n\n\n\nGetting the levels of a factor\nThe factor vector has an additional attribute, the levels information.\n\nlevels(gender_fac)\n\n[1] \"Female\" \"Male\"  \n\n\n\nnlevels(gender_fac)\n\n[1] 2\n\n\nAlso, common R functions handle factors in specialized ways.\n\nsummary(gender)  # character vector\n\n   Length     Class      Mode \n        8 character character \n\n\n\nsummary(gender_fac) # factor\n\nFemale   Male \n     4      4 \n\n\nOne can change the level names easily using an assignment to the levels() function.\n\nlevels(gender_fac) &lt;- c(\"F\",\"M\")\ngender_fac\n\n[1] M M F M F M F F\nLevels: F M\n\n\nInternally, categories are represented with integers starting at 1.\n\n\nIndexing and subsetting\nElements of factor-valued vectors are selected in the same way as any other vector.\n\ngender_fac[2:5]\n\n[1] M F M F\nLevels: F M\n\n\n\ngender_fac[c(3,5,7:8)]\n\n[1] F F F F\nLevels: F M\n\n\nNote that after subsetting a factor object, the object continues to store all defined levels even if some of the levels are no longer represented in the subsetted object.\n\n\nFiltering with factors\n\ngender_fac\n\n[1] M M F M F M F F\nLevels: F M\n\n\n\ngender_fac==\"M\"\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE\n\n\n\nname\n\n[1] \"Can\"    \"Cem\"    \"Hande\"  \"Mehmet\" \"Deniz\"  \"Kemal\"  \"Derya\"  \"Fatma\" \n\n\n\nname[gender_fac==\"M\"]\n\n[1] \"Can\"    \"Cem\"    \"Mehmet\" \"Kemal\" \n\n\n\n\nRemoving categories\nSometimes we may want to remove one level in a category. For example, consider the following factor, where the same level is duplicated.\n\ngender_fac &lt;- factor(c(\"Male\",\"Male\",\"Female\",\"Male\",\"female\",\"Male\",\"female\",\"Female\"))\ngender_fac\n\n[1] Male   Male   Female Male   female Male   female Female\nLevels: female Female Male\n\n\nThe factor has technically three levels, but actually \"female\" and \"Female\" are the same. Fix this by overwriting all occurrences of \"female\" with \"Female\".\n\ngender_fac[gender_fac==\"female\"]\n\n[1] female female\nLevels: female Female Male\n\n\n\ngender_fac[gender_fac==\"female\"] &lt;- \"Female\"\ngender_fac\n\n[1] Male   Male   Female Male   Female Male   Female Female\nLevels: female Female Male\n\n\nHowever, the levels attribute still lists the invalid \"female\" category. To remove it, we use the droplevels() function. It removes all levels for which there are no entries.\n\ngender_fac &lt;- droplevels(gender_fac)\ngender_fac\n\n[1] Male   Male   Female Male   Female Male   Female Female\nLevels: Female Male\n\n\n\n\nNominal and ordinal factors\n\nThe gender factor is an example of a nominal factor: There is no inherent order between levels. We cannot ask the question whether “Male” is greater than “Female” or not.\nThe month of birth information is an ordinal factor: Months appear in a certain order, so it makes sense to say that “January” &lt; “February”.\n\n\n\n\nName\nGender\nMonth of Birth\n\n\n\n\nCan\nMale\nJanuary\n\n\nCem\nMale\nJuly\n\n\nHande\nFemale\nMay\n\n\nMehmet\nMale\nMay\n\n\nDeniz\nFemale\nFebruary\n\n\nKemal\nMale\nJuly\n\n\nDerya\nFemale\nMay\n\n\nFatma\nFemale\nApril\n\n\n\nLet’s store the observed month-of-birth (MOB) data as a character vector.\n\nmob &lt;- c(\"January\",\"July\",\"May\",\"May\",\"February\",\"July\",\"May\",\"April\")\n\nTwo problems with this vector:\n\nOnly five unique months. Not all possible levels are represented.\nDoesn’t reflect the natural order of the months. If you compare January and February to see which is greater, you get:\n\n\nmob[1] &lt; mob[5]  # alphabetical ordering\n\n[1] FALSE\n\n\nWhen we create a factor object, we can set levels parameter of the factor() function to ensure that it holds all the levels of the factor in the correct order.\n\nmonths &lt;- c(\"January\",\"February\",\"March\",\"April\",\"May\",\n            \"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\")\n\n\nmob_fac &lt;- factor(mob, levels=months, ordered=TRUE)\nmob_fac\n\n[1] January  July     May      May      February July     May      April   \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\nComparisons can be done correctly:\n\nmob_fac[1] &lt; mob_fac[5]  # January &lt; February\n\n[1] TRUE\n\n\nThe summary() function gives a count of elements in each level.\n\nsummary(mob_fac)\n\n  January  February     March     April       May      June      July    August \n        1         1         0         1         3         0         2         0 \nSeptember   October  November  December \n        0         0         0         0 \n\n\n\n\nCombining two factor objects\nEarlier we have seen that combining two vectors into a single vector is done with the c() function:\n\nx1 &lt;- c(1,2,3,4)\nx2 &lt;- c(7,8,9)\nc(x1, x2)\n\n[1] 1 2 3 4 7 8 9\n\n\nHowever, this does not work with factor objects:\n\nmob_fac\n\n[1] January  July     May      May      February July     May      April   \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\n\nmob2 &lt;- factor(c(\"April\",\"March\",\"May\"), levels=months, ordered=TRUE)\nmob2\n\n[1] April March May  \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\n\nc(mob_fac, mob2)\n\n [1] 1 7 5 5 2 7 5 4 4 3 5\n\n\nc() combines the numeric values of levels. Not what we want.\nFactors are combined in an indirect way: First use the result of c() to index the months vector, which holds an ordered list of all categories. This will give a character vector:\n\nlevels(mob_fac)\n\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\n\n\nlevels(mob_fac)[ c(mob_fac, mob2) ]\n\n [1] \"January\"  \"July\"     \"May\"      \"May\"      \"February\" \"July\"    \n [7] \"May\"      \"April\"    \"April\"    \"March\"    \"May\"     \n\n\nThen we convert this to a factor object\n\nfactor(levels(mob_fac)[ c(mob_fac, mob2) ], levels=levels(mob_fac), ordered=TRUE)\n\n [1] January  July     May      May      February July     May      April   \n [9] April    March    May     \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\nIf we need to use this task frequently, we can write a function for it:\n\nconcat_factors &lt;- function(f1, f2, ordered=TRUE) {\n    stopifnot( identical(levels(f1), levels(f2)) ) # ensure that the levels are the same\n    return( factor(levels(f1)[ c(f1,f2) ], levels=levels(f1), ordered=ordered) )\n}\n\n\nconcat_factors(mob_fac, mob2)\n\n [1] January  July     May      May      February July     May      April   \n [9] April    March    May     \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\n\n\nBinning\nOne can create categories from continuous data, such as Small/Medium/Large, or Low/High.\nExample:\n\nx &lt;- c(11, 18, 36, 74, 43, 81, 95, 64, 32, 51)\n\nSuppose we want to categorize this data as small for values in [0, 30), medium for [30, 70), and high for [70, 100]. The notation [30,70) means that the value 30 belongs to this category, but 70 does not.\nThe cut() function generates a factor object with the interval end specified by the breaks parameter.\n\ncut(x, breaks=c(0, 30, 70, 100))\n\n [1] (0,30]   (0,30]   (30,70]  (70,100] (30,70]  (70,100] (70,100] (30,70] \n [9] (30,70]  (30,70] \nLevels: (0,30] (30,70] (70,100]\n\n\nHowever, note that the ends of the intervals are not as we want. The first value of the boundary in not included in the interval, but the second value is.\nTo fix this, we set the parameter right to FALSE.\n\ncut(x, breaks=c(0, 30, 70, 100), right = F)\n\n [1] [0,30)   [0,30)   [30,70)  [70,100) [30,70)  [70,100) [70,100) [30,70) \n [9] [30,70)  [30,70) \nLevels: [0,30) [30,70) [70,100)\n\n\nBut the last value 100 is excluded now. We can include it by setting the include.lowest parameter to TRUE.\n\ncut(x, breaks = c(0, 30, 70, 100),  right = F, include.lowest = T)\n\n [1] [0,30)   [0,30)   [30,70)  [70,100] [30,70)  [70,100] [70,100] [30,70) \n [9] [30,70)  [30,70) \nLevels: [0,30) [30,70) [70,100]\n\n\nThe levels can be set with the labels parameter.\n\ncut(x, breaks = c(0, 30, 70, 100), right = F, include.lowest = T,\n   labels = c(\"Low\",\"Medium\",\"High\"))\n\n [1] Low    Low    Medium High   Medium High   High   Medium Medium Medium\nLevels: Low Medium High\n\n\n\nx\n\n [1] 11 18 36 74 43 81 95 64 32 51\n\n\n\n\nFactors and data frames\nSuppose that we create a data frame out of name, gender, and mob vectors:\n\nname &lt;- c(\"Can\",\"Cem\",\"Hande\",\"Mehmet\",\"Deniz\",\"Kemal\",\"Derya\",\"Fatma\")\ngender &lt;- c(\"Male\",\"Male\",\"Female\",\"Male\",\"Female\",\"Male\",\"Female\",\"Female\")\nmob &lt;- c(\"January\",\"July\",\"May\",\"May\",\"February\",\"July\",\"May\",\"April\")\ndf &lt;- data.frame(name, gender, mob, stringsAsFactors = F)\ndf\n\n  name   gender mob     \n1 Can    Male   January \n2 Cem    Male   July    \n3 Hande  Female May     \n4 Mehmet Male   May     \n5 Deniz  Female February\n6 Kemal  Male   July    \n7 Derya  Female May     \n8 Fatma  Female April   \n\n\n\nsummary(df)\n\n     name              gender              mob           \n Length:8           Length:8           Length:8          \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n\n\n\nmonths &lt;- c(\"January\",\"February\",\"March\",\"April\",\"May\",\n            \"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\")\ndf$gender &lt;- factor(df$gender)\ndf$mob &lt;- factor(df$mob, levels=months, ordered = T)\nsummary(df)\n\n     name              gender        mob   \n Length:8           Female:4   May     :3  \n Class :character   Male  :4   July    :2  \n Mode  :character              January :1  \n                               February:1  \n                               April   :1  \n                               March   :0  \n                               (Other) :0  \n\n\nWhat is the effect of the stringsAsFactors parameter?\n\ndf &lt;- data.frame(name, gender, mob, stringsAsFactors = T)  \nsummary(df)\n\n      name      gender        mob   \n Can    :1   Female:4   April   :1  \n Cem    :1   Male  :4   February:1  \n Deniz  :1              January :1  \n Derya  :1              July    :2  \n Fatma  :1              May     :3  \n Hande  :1                          \n (Other):2                          \n\n\nNote that all fields are interpreted as factors in df, including names. The reason is that the stringsAsFactorsparameter is TRUE by default (for R versions older than 4.0.0). We can turn it off, and use the factor vectors we prepared before:\n\ndf &lt;- data.frame(name, gender_fac, mob_fac, stringsAsFactors = FALSE )\nsummary(df)\n\n     name            gender_fac     mob_fac \n Length:8           Female:4    May     :3  \n Class :character   Male  :4    July    :2  \n Mode  :character               January :1  \n                                February:1  \n                                April   :1  \n                                March   :0  \n                                (Other) :0  \n\n\nAs another example, consider the mtcars data set:\n\nhead(mtcars)\n\n                  mpg  cyl disp hp  drat wt    qsec  vs am gear carb\nMazda RX4         21.0 6   160  110 3.90 2.620 16.46 0  1  4    4   \nMazda RX4 Wag     21.0 6   160  110 3.90 2.875 17.02 0  1  4    4   \nDatsun 710        22.8 4   108   93 3.85 2.320 18.61 1  1  4    1   \nHornet 4 Drive    21.4 6   258  110 3.08 3.215 19.44 1  0  3    1   \nHornet Sportabout 18.7 8   360  175 3.15 3.440 17.02 0  0  3    2   \nValiant           18.1 6   225  105 2.76 3.460 20.22 1  0  3    1   \n\n\nThe summary() function returns the summary statistics for each numeric field.\n\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\nHowever, it makes more sense to treat \"cyl\", \"vs\", \"am\", \"gear\" and \"carb\" as categorical variables.\n\nmtcars$cyl &lt;- factor(mtcars$cyl, ordered=TRUE)\nmtcars$gear &lt;- factor(mtcars$gear, ordered=TRUE)\nmtcars$carb &lt;- factor(mtcars$carb, ordered=TRUE)\nmtcars$vs &lt;- factor(mtcars$vs)\nmtcars$am &lt;- factor(mtcars$am)\n\nNow we can use the summary() function to get the counts of categories in each factor field.\n\nsummary(mtcars)\n\n      mpg        cyl         disp             hp             drat      \n Min.   :10.40   4:11   Min.   : 71.1   Min.   : 52.0   Min.   :2.760  \n 1st Qu.:15.43   6: 7   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080  \n Median :19.20   8:14   Median :196.3   Median :123.0   Median :3.695  \n Mean   :20.09          Mean   :230.7   Mean   :146.7   Mean   :3.597  \n 3rd Qu.:22.80          3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920  \n Max.   :33.90          Max.   :472.0   Max.   :335.0   Max.   :4.930  \n       wt             qsec       vs     am     gear   carb  \n Min.   :1.513   Min.   :14.50   0:18   0:19   3:15   1: 7  \n 1st Qu.:2.581   1st Qu.:16.89   1:14   1:13   4:12   2:10  \n Median :3.325   Median :17.71                 5: 5   3: 3  \n Mean   :3.217   Mean   :17.85                        4:10  \n 3rd Qu.:3.610   3rd Qu.:18.90                        6: 1  \n Max.   :5.424   Max.   :22.90                        8: 1  \n\n\n\nlevels(mtcars$am)\n\n[1] \"0\" \"1\"\n\n\nThe \"vs\" (V engine or straight) and \"am\" (Automatic or manual transmission) fields have level values 0 or 1. Let’s replace them with clearer labels.\n\nlevels(mtcars$vs) &lt;- c(\"V-engine\",\"Standard\")\nlevels(mtcars$am) &lt;- c(\"Automatic\",\"Manual\")\n\n\nsummary(mtcars)\n\n      mpg        cyl         disp             hp             drat      \n Min.   :10.40   4:11   Min.   : 71.1   Min.   : 52.0   Min.   :2.760  \n 1st Qu.:15.43   6: 7   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080  \n Median :19.20   8:14   Median :196.3   Median :123.0   Median :3.695  \n Mean   :20.09          Mean   :230.7   Mean   :146.7   Mean   :3.597  \n 3rd Qu.:22.80          3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920  \n Max.   :33.90          Max.   :472.0   Max.   :335.0   Max.   :4.930  \n       wt             qsec              vs             am     gear   carb  \n Min.   :1.513   Min.   :14.50   V-engine:18   Automatic:19   3:15   1: 7  \n 1st Qu.:2.581   1st Qu.:16.89   Standard:14   Manual   :13   4:12   2:10  \n Median :3.325   Median :17.71                                5: 5   3: 3  \n Mean   :3.217   Mean   :17.85                                       4:10  \n 3rd Qu.:3.610   3rd Qu.:18.90                                       6: 1  \n Max.   :5.424   Max.   :22.90                                       8: 1  \n\n\n\n\nPlotting factor variables\nWhen we specify a factor-type vector as data, the plot() function displays a bar plot.\n\nplot(mtcars$am)\n\n\n\n\nWhen the x-axis is categorical and the y-axis is numerical, a boxplot is displayed.\n\nplot(x = mtcars$vs, y=mtcars$hp, ylab=\"Horse power\")\n\n\n\n\nIf both axes are categorical, a stacked bar plot is displayed.\n\nplot(x = mtcars$vs, y=mtcars$gear, xlab=\"Engine type\",ylab=\"Gear\")\n\n\n\n\n\n\nThe table() function\nThe table() function can be used to return counts of elements in each level of a categorical variable.\n\naffils &lt;- c(\"R\",\"D\",\"D\",\"R\",\"U\",\"D\") # political party affiliations\ntable(affils)\n\naffils\nD R U \n3 2 1 \n\n\nIt can be used to create contingency tables, such as two-way tables:\n\ntable(mtcars$am, mtcars$vs)\n\n           \n            V-engine Standard\n  Automatic       12        7\n  Manual           6        7\n\n\nOr three-way tables:\n\ntable(mtcars$am, mtcars$vs, mtcars$gear,\n      dnn=c(\"Transmission\",\"Engine\",\"Gears\"))\n\n, , Gears = 3\n\n            Engine\nTransmission V-engine Standard\n   Automatic       12        3\n   Manual           0        0\n\n, , Gears = 4\n\n            Engine\nTransmission V-engine Standard\n   Automatic        0        4\n   Manual           2        6\n\n, , Gears = 5\n\n            Engine\nTransmission V-engine Standard\n   Automatic        0        0\n   Manual           4        1\n\n\n\n\nThe tapply() function\n\nMore general than table().\nThe function call tapply(x, f, func) breaks the vector x by levels given in f and applies the function func on each subgroup.\n\n\nages &lt;- c(25, 26, 55, 37, 21, 42) # ages of some people\naffils &lt;- c(\"R\",\"D\",\"D\",\"R\",\"U\",\"D\") # party affiliations of the same people\ntapply(ages, affils, mean)\n\n D  R  U \n41 31 21 \n\n\nLook at the iris database.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1 5.1          3.5         1.4          0.2         setosa \n2 4.9          3.0         1.4          0.2         setosa \n3 4.7          3.2         1.3          0.2         setosa \n4 4.6          3.1         1.5          0.2         setosa \n5 5.0          3.6         1.4          0.2         setosa \n6 5.4          3.9         1.7          0.4         setosa \n\n\n\ntapply(iris$Sepal.Length, iris$Species, mean)\n\n    setosa versicolor  virginica \n     5.006      5.936      6.588 \n\n\nGet the mean miles-per-gallon, broken by the engine type.\n\ntapply(mtcars$mpg, mtcars$vs, mean)\n\nV-engine Standard \n16.61667 24.55714 \n\n\nGet the mean miles-per-gallon, broken by the engine type and transmission type.\n\ntapply(mtcars$mpg, list(mtcars$vs, mtcars$am), mean)\n\n         Automatic Manual  \nV-engine 15.05000  19.75000\nStandard 20.74286  28.37143"
  },
  {
    "objectID": "11 - Data import & plotting.html",
    "href": "11 - Data import & plotting.html",
    "title": "11  Data Import & more plotting",
    "section": "",
    "text": "Built-in R datasets\nR comes bundled with some standard data sets. To get a complete list, use the following command:\nlibrary(help=\"datasets\")\nTo see the description of a particular data set:\nhelp(iris)\nR has some functions to get some summary information about the data.\ndim(mtcars)\n\n[1] 32 11\nhead(mtcars)\n\n                  mpg  cyl disp hp  drat wt    qsec  vs am gear carb\nMazda RX4         21.0 6   160  110 3.90 2.620 16.46 0  1  4    4   \nMazda RX4 Wag     21.0 6   160  110 3.90 2.875 17.02 0  1  4    4   \nDatsun 710        22.8 4   108   93 3.85 2.320 18.61 1  1  4    1   \nHornet 4 Drive    21.4 6   258  110 3.08 3.215 19.44 1  0  3    1   \nHornet Sportabout 18.7 8   360  175 3.15 3.440 17.02 0  0  3    2   \nValiant           18.1 6   225  105 2.76 3.460 20.22 1  0  3    1\ntail(mtcars)\n\n               mpg  cyl disp  hp  drat wt    qsec vs am gear carb\nPorsche 914-2  26.0 4   120.3  91 4.43 2.140 16.7 0  1  5    2   \nLotus Europa   30.4 4    95.1 113 3.77 1.513 16.9 1  1  5    2   \nFord Pantera L 15.8 8   351.0 264 4.22 3.170 14.5 0  1  5    4   \nFerrari Dino   19.7 6   145.0 175 3.62 2.770 15.5 0  1  5    6   \nMaserati Bora  15.0 8   301.0 335 3.54 3.570 14.6 0  1  5    8   \nVolvo 142E     21.4 4   121.0 109 4.11 2.780 18.6 1  1  4    2\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000\nData is frequently stored in tabular form in text files. The read.table() function can read a file from your disk and return a data frame containing that data.\nhelp(read.table)\nSuppose we have a data file mydata.txt with the following contents:\nThe file can be read into a data frame simply with:\nhwdata &lt;- read.table(\"mydata.txt\")\nhwdata\nclass(hwdata)\n\n   V1     V2   V3\n1  Can    1.70 65\n2  Cem    1.75 66\n3  Hande  1.62 61\n4  Lale   1.76 64\n5  Arda   1.78 63\n6  Bilgin 1.77 84\n7  Cem    1.69 75\n8  Ozlem  1.75 65\n9  Ali    1.73 75\n10 Haluk  1.71 81\n\n\n[1] \"data.frame\"\nWe can change the columns of the dataframe in the way we know:\nnames(hwdata) &lt;- c(\"Name\", \"Height\",\"Weight\")\nhwdata\n\n   Name   Height Weight\n1  Can    1.70   65    \n2  Cem    1.75   66    \n3  Hande  1.62   61    \n4  Lale   1.76   64    \n5  Arda   1.78   63    \n6  Bilgin 1.77   84    \n7  Cem    1.69   75    \n8  Ozlem  1.75   65    \n9  Ali    1.73   75    \n10 Haluk  1.71   81\nThe function read.table() is quite versatile, and it has a lot of parameters to tune its behavior. The help documentation can be helpful:\nhelp(read.table)\nNow let’s read the data file mydata2.txt that has a header row, and set the column names of the resulting data frame accordingly:\nhwdata &lt;- read.table(\"mydata2.txt\",header = TRUE)\nhwdata\n\n   Name   Height Weight\n1  Can    1.70   65    \n2  Cem    1.75   66    \n3  Hande  1.62   61    \n4  Lale   1.76   64    \n5  Arda   1.78   63    \n6  Bilgin 1.77   84    \n7  Cem    1.69   75    \n8  Ozlem  1.75   65    \n9  Ali    1.73   75    \n10 Haluk  1.71   81\nNow read the file mydata3.txt whose fields are separated with commas instead of spaces:\nhwdata &lt;- read.table(\"mydata3.txt\",header = TRUE, sep=\",\")\nhwdata\n\n   Name   Height Weight\n1  Can    1.70   65    \n2  Cem    1.75   66    \n3  Hande  1.62   61    \n4  Lale   1.76   64    \n5  Arda   1.78   63    \n6  Bilgin 1.77   84    \n7  Cem    1.69   75    \n8  Ozlem  1.75   65    \n9  Ali    1.73   75    \n10 Haluk  1.71   81\nLet’s read the data file mydata4.txt which contains some comments added by the data collector.\nThe comment character can be set with the comment.char parameter to read.table().\nhwdata &lt;- read.table(\"mydata4.txt\",header = TRUE, sep=\",\", comment.char=\"#\")\nhwdata\n\n   Name   Height Weight\n1  Can    1.70   65    \n2  Cem    1.75   66    \n3  Hande  1.62   61    \n4  Lale   1.76   64    \n5  Arda   1.78   63    \n6  Bilgin 1.77   84    \n7  Cem    1.69   75    \n8  Ozlem  1.75   65    \n9  Ali    1.73   75    \n10 Haluk  1.71   81\nActually this was a redundant setting, because by default comment.char is already set to \"#\".\nSometimes a text in a field may contain the separator character. To avoid breaking the field’s content, we use quotes in the data file, such as the mydata5.txt file below:\nThe function read.table() recognizes the single- or double quotes by default.\nhwdata &lt;- read.table(\"mydata5.txt\", header=TRUE)\nhwdata\n\n   Name          Height Weight\n1  Can Can       1.70   65    \n2  Cem Cem       1.75   66    \n3  Hande Hande   1.62   61    \n4  Lale Lale     1.76   64    \n5  Arda Arda     1.78   63    \n6  Bilgin Bilgin 1.77   84    \n7  Cem Cim       1.69   75    \n8  Ozlem Ozlem   1.75   65    \n9  Ali Ali       1.73   75    \n10 Haluk Haluk   1.71   81\nOther quote characters can be specified with the quote parameter to read.table(). For example, consider the data file mydata6.txt:\nhwdata &lt;- read.table(\"mydata6.txt\", header=TRUE, quote=\"%\")\nhwdata\n\n   Name          Height Weight\n1  Can Can       1.70   65    \n2  Cem Cem       1.75   66    \n3  Hande Hande   1.62   61    \n4  Lale Lale     1.76   64    \n5  Arda Arda     1.78   63    \n6  Bilgin Bilgin 1.77   84    \n7  Cem Cim       1.69   75    \n8  Ozlem Ozlem   1.75   65    \n9  Ali Ali       1.73   75    \n10 Haluk Haluk   1.71   81\nSuppose that we process the data file by, e.g., adding some columns.\nhwdata &lt;- read.table(\"mydata6.txt\", header=TRUE, quote=\"%\")\nhwdata$BMI &lt;- hwdata$Weight / hwdata$Height^2\nhwdata$BMI &lt;- round(hwdata$BMI, 2)  # round to two decimal places\nhwdata\n\n   Name          Height Weight BMI  \n1  Can Can       1.70   65     22.49\n2  Cem Cem       1.75   66     21.55\n3  Hande Hande   1.62   61     23.24\n4  Lale Lale     1.76   64     20.66\n5  Arda Arda     1.78   63     19.88\n6  Bilgin Bilgin 1.77   84     26.81\n7  Cem Cim       1.69   75     26.26\n8  Ozlem Ozlem   1.75   65     21.22\n9  Ali Ali       1.73   75     25.06\n10 Haluk Haluk   1.71   81     27.70\nThe function write.table() can be used to store a data frame in a file.\nwrite.table(hwdata,\"mydata7.txt\")\nThis function writes the table together with the row names and column names:\nWe can omit the row and column names with the following parameter settings.\nwrite.table(hwdata,\"mydata7.txt\",row.names = FALSE, col.names = FALSE)\noptions(repr.plot.width=5, repr.plot.height=5)\nPlot the weight of the people in our data set versus their height.\nplot(hwdata$Height, hwdata$Weight)\nOur data is made up, and it does not reflect reality. Let’s visualize a real life data set of height and weight of 10,000 people: https://github.com/johnmyleswhite/ML_for_Hackers/tree/master/02-Exploration/data\nheights_weights_gender &lt;- read.table(\"01_heights_weights_genders.csv\", header=T, sep=\",\")\nLet’s see how the data looks like:\nhead(heights_weights_gender)\n\n  Gender Height   Weight  \n1 Male   73.84702 241.8936\n2 Male   68.78190 162.3105\n3 Male   74.11011 212.7409\n4 Male   71.73098 220.0425\n5 Male   69.88180 206.3498\n6 Male   67.25302 152.2122\nPut the heights and weights of men on their separate vectors and plot.\nmen &lt;- heights_weights_gender$Gender == \"Male\"\nmen_heights &lt;- heights_weights_gender[[\"Height\"]][men]\nmen_weights &lt;- heights_weights_gender[[\"Weight\"]][men]\nplot(men_heights, men_weights)\nChange the axis labels and add a plot title\nplot(men_heights, men_weights,\n     xlab = \"Height [inches]\", \n     ylab=\"Weight [pounds]\",\n     main=\"Weight vs height for men\")\nChange the marker type and color:\nplot(men_heights, men_weights, \n     pch=4, \n     col=\"blue\",\n     xlab = \"Height [inches]\", \n     ylab=\"Weight [pounds]\")\ntitle(\"Weight vs height for men\")\nDo the same for women:\nwomen &lt;- heights_weights_gender$Gender == \"Female\"\nwomen_heights &lt;- heights_weights_gender[[\"Height\"]][women]\nwomen_weights &lt;- heights_weights_gender[[\"Weight\"]][women]\nplot(women_heights, women_weights, \n     pch=20, \n     col=\"red\", \n     xlab = \"Height [inches]\", \n     ylab=\"Weight [pounds]\")\ntitle(\"Weight vs height for women\")\nLet’s try to show them on the same plot.\nplot(men_heights, men_weights, pch=4, col=\"blue\", xlab = \"Height [inches]\", ylab=\"Weight [pounds]\")\nplot(women_heights, women_weights, pch=20, col=\"red\", xlab = \"Height [inches]\", ylab=\"Weight [pounds]\")\ntitle(\"Weight vs height of adults\")\nThis does not work. In order to overlay a scatter plot, we need to use the points() function, which adds the new points on the existing plot.\nplot(men_heights, men_weights, pch=4, col=\"blue\", xlab = \"Height [inches]\", ylab=\"Weight [pounds]\")\npoints(women_heights, women_weights, pch=20, col=\"red\", xlab = \"Height [inches]\", ylab=\"Weight [pounds]\")\ntitle(\"Weight vs height of adults\")\nThe plot limits don’t look right, because they are automatically set for the male data. Set the limits manually:\nplot(men_heights, men_weights, pch=4, col=\"blue\",\n     xlab = \"Height [inches]\", ylab=\"Weight [pounds]\",\n     xlim = c(50,80), ylim = c(60,270))\npoints(women_heights, women_weights, pch=20, col=\"red\",\n       xlab = \"Height [inches]\", ylab=\"Weight [pounds]\",\n       xlim = c(50,80), ylim = c(60,270))\ntitle(\"Weight vs height of adults\")\nWe need a legend to understand which is which:\nplot(men_heights, men_weights, pch=4, col=\"blue\",\n     xlab = \"Height [inches]\", ylab=\"Weight [pounds]\",\n     xlim = c(50,80), ylim = c(60,270))\npoints(women_heights, women_weights, pch=20, col=\"red\")\ntitle(\"Weight vs height of adults\")\nlegend(\"bottomright\", c(\"Men\",\"Women\"), \n       col=c(\"blue\",\"red\"), \n       pch=c(4,20), inset=0.05, cex=0.75)\nSometimes we want several plots in one figure. We can achieve this with the par() function.\noptions(repr.plot.width=6, repr.plot.height=4)\nnormal1 &lt;- rnorm(1000)\npar(mfrow=c(1,2))\nplot(normal1)\nhist(normal1)\nHere mfrow=c(1,2) specifies that the plots should be arranged as one row and two columns, and placement of figures should go by rows.\nAlternatively, mfcol argument would force placement by columns. In this particular example, it gives an identical result.\nGenerate normally-distributed random numbers with twice the standard deviation and compare the plots.\noptions(repr.plot.width=8,repr.plot.height=8)\nnormal2 &lt;- rnorm(1000, sd = 2)\npar(mfrow=c(2,2))\nplot(normal1)\nhist(normal1)\nplot(normal2)\nhist(normal2)\nMatch the axis scales for better comparison.\npar(mfrow=c(2,2))\nplot(normal1, ylim = c(-6,6), pch=4, col=\"blue\")\nhist(normal1, xlim = c(-6,6), col=\"red\")\nplot(normal2, ylim = c(-6,6), pch=4, col=\"blue\")\nhist(normal2, xlim = c(-6,6), col=\"red\")\nA box-and-whisker plot provides a graphical summary of the distribution of data points.\nrandnums &lt;- rnorm(1000)\nsummary(randnums)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-3.29100 -0.65548  0.05161  0.03068  0.70574  3.02370\nThe boxplot is a visual summary of the data:\noptions(repr.plot.width=3,repr.plot.height=5)\nboxplot(randnums)\nIf you prefer to plot it sideways:\noptions(repr.plot.width=6,repr.plot.height=3)\nboxplot(randnums,horizontal = TRUE)\ntitle(\"Normally distributed random numbers\")\nBoxplots of two or more distributions could be displayed side-by-side using par() function, but it is more informative to show them on a common set of axes.\nrandnums2 &lt;- rnorm(1000, sd=2)\noptions(repr.plot.width=6,repr.plot.height=3)\nboxplot(randnums, randnums2, horizontal = TRUE)\ntitle(\"Normally distributed random numbers\")\nLet’s draw boxplots on the mtcars data set.\nhead(mtcars)\n\n                  mpg  cyl disp hp  drat wt    qsec  vs am gear carb\nMazda RX4         21.0 6   160  110 3.90 2.620 16.46 0  1  4    4   \nMazda RX4 Wag     21.0 6   160  110 3.90 2.875 17.02 0  1  4    4   \nDatsun 710        22.8 4   108   93 3.85 2.320 18.61 1  1  4    1   \nHornet 4 Drive    21.4 6   258  110 3.08 3.215 19.44 1  0  3    1   \nHornet Sportabout 18.7 8   360  175 3.15 3.440 17.02 0  0  3    2   \nValiant           18.1 6   225  105 2.76 3.460 20.22 1  0  3    1\nboxplot(mtcars$mpg, mtcars$hp, mtcars$wt)\nThe scales vary too much. It is better in this case to plot them on separate axes.\npar(mfrow = c(1,3))\nboxplot(mtcars$mpg)\ntitle(\"mpg\")\nboxplot(mtcars$hp)\ntitle(\"hp\")\nboxplot(mtcars$wt)\ntitle(\"wt\")\nA strip chart is a one-dimensional scatter plot of some data. It helps us to see distributions of data points.\nrandnums1 &lt;- rnorm(100)\nrandnums2 &lt;- rnorm(100,mean=1,sd=0.5)\nstripchart(list(randnums1, randnums2))\nTo avoid the overlap of points, we can introduce some “jitter”.\nstripchart(list(randnums1, randnums2), method=\"jitter\", group.names = c(\"data 1\",\"data 2\"))\nSome embellishments:\nstripchart(list(randnums1, randnums2), method=\"jitter\",\n           group.names = c(\"data 1\",\"data 2\"),\n          col=c(\"red\",\"darkblue\"), pch=4)\nWe frequently need to save our plot in various graphics formats so that we can put them in reports, papers or web pages. R can export graphics to many formats, including JPEG, PNG, TIFF, SVG, PDF, PS, BMP, WMF.\nFor example, here are the steps to create a PNG file * Call the png() function with the file name as argument. * Give the plotting commands. They will not produce a visible plot now. * When done, call the function dev.off(). Very important, otherwise you will get a bad file.\noptions(repr.plot.width=4,repr.plot.height=4)\n\nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\nExport to a PNG file using the png() function.\npng(\"cars.png\")  # open the PNG file.\n# Plotting commands\nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\n# finalize the export to png\ndev.off()\nNote: If you are using RStudio, this can be achieved from the Plots-&gt;Export-&gt;Save menu.\nTo export to a PDF file, just change the first line:\npdf(\"cars.pdf\")\nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\ndev.off()\nThe plotting functions allow for many customizations, depending on the file format. One common customization is the size of the plot. Let’s recreate the PNG file with a different size.\npng(\"cars2.png\", width = 200, height = 300) \n# Plotting commands\nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\n# finalize the export to png\ndev.off()"
  },
  {
    "objectID": "11 - Data import & plotting.html#histograms",
    "href": "11 - Data import & plotting.html#histograms",
    "title": "11  Data Import & more plotting",
    "section": "Histograms",
    "text": "Histograms\nIf we want to see how the data is distributed, we can generate a histogram.\n\nhist(men_heights)\n\n\n\n\nIncrease the number of bins to 20 and use relative frequencies, not total counts.\n\nhist(men_heights, breaks=20, freq = FALSE)\n\n\n\n\nLet’s show both genders, and use color to differentiate: Use the rgb() function whose 4th parameter gives the transparency of the color:\n\nhist(men_heights, breaks=20, freq = FALSE, col=rgb(0,0,1,0.5))\nhist(women_heights, breaks=20, freq = FALSE, add=TRUE, col=rgb(1,0,0,0.5))\n\n\n\n\nFix the title and the x-label of the plot.\n\nhist(men_heights, breaks=20, freq = FALSE, col=rgb(0,0,1,0.5),\n     main=\"Male and female heights\", xlab = \"Height [inches]\", xlim=c(50,80), ylim=c(0,0.15))\nhist(women_heights, breaks=20, freq = FALSE, col=rgb(1,0,0,0.5), add=T)"
  },
  {
    "objectID": "11 - Data import & plotting.html#density-plots",
    "href": "11 - Data import & plotting.html#density-plots",
    "title": "11  Data Import & more plotting",
    "section": "Density plots",
    "text": "Density plots\nR can estimate distribution as a smooth curve, which might look better than a histogram. Plot the male and female heights with lines of thickness 2.\n\nd1 &lt;- density(men_heights)\nd2 &lt;- density(women_heights)\nplot(d1, main=\"\", xlab=\"\", col=\"blue\", lwd=2)\nlines(d2, col=\"red\", lwd=3)\n\n\n\n\nLet’s fix the plot limits and add a text label to mark the curves.\n\nd1 &lt;- density(men_heights)\nd2 &lt;- density(women_heights)\nplot(d1, main=\"Height distribution\", xlab=\"Height [inches]\",\n     col=\"blue\", lwd=2, xlim = c(50,80))\nlines(d2, col=\"red\", lwd=2)\ntext(59, 0.12, \"Women\", col=\"red\")\ntext(72, 0.12, \"Men\", col=\"blue\")"
  },
  {
    "objectID": "11 - Data import & plotting.html#line-plots",
    "href": "11 - Data import & plotting.html#line-plots",
    "title": "11  Data Import & more plotting",
    "section": "Line plots",
    "text": "Line plots\nLet’s use the built-in EuStockMarkets data set to illustrate line plots.\n\nhelp(EuStockMarkets)\n\n\nhead(EuStockMarkets)\n\n     DAX     SMI    CAC    FTSE  \n[1,] 1628.75 1678.1 1772.8 2443.6\n[2,] 1613.63 1688.5 1750.5 2460.2\n[3,] 1606.51 1678.6 1718.0 2448.2\n[4,] 1621.04 1684.1 1708.1 2470.4\n[5,] 1618.16 1686.6 1723.1 2484.7\n[6,] 1610.61 1671.6 1714.3 2466.8\n\n\nThis is a time series object. Let’s convert it to a data frame:\n\neustock &lt;- as.data.frame(EuStockMarkets)\n\nPlot the stocks DAX with lines.\n\nplot(eustock$DAX, type=\"l\")\n\n\n\n\nPlot DAX with a thick red line.\n\nplot(eustock$DAX, type=\"l\", col=\"red\", lwd=3)\n\n\n\n\nPlot DAX and SMI together:\n\nplot(eustock$DAX, type=\"l\", col=\"red\")\nlines(eustock$SMI, col=\"green\")\n\n\n\n\nLet’s plot all the stocks on the same plot:\n\nnstocks &lt;- length(names(eustock))\ncolors &lt;- rainbow(nstocks)\nplot(eustock[[1]], type=\"l\", col=colors[1], xlab=\"Business days\", ylab=\"Stock value\")\nfor(i in 2:nstocks ){\n    lines(eustock[[i]], col=colors[i])\n    }\nlegend(\"topleft\", names(eustock), col=colors, lty=rep(1,nstocks), inset=0.05)"
  },
  {
    "objectID": "11 - Data import & plotting.html#dot-bar-and-pie-charts",
    "href": "11 - Data import & plotting.html#dot-bar-and-pie-charts",
    "title": "11  Data Import & more plotting",
    "section": "Dot, bar, and pie charts",
    "text": "Dot, bar, and pie charts\n\nmtcars\n\n                    mpg  cyl disp  hp  drat wt    qsec  vs am gear carb\nMazda RX4           21.0 6   160.0 110 3.90 2.620 16.46 0  1  4    4   \nMazda RX4 Wag       21.0 6   160.0 110 3.90 2.875 17.02 0  1  4    4   \nDatsun 710          22.8 4   108.0  93 3.85 2.320 18.61 1  1  4    1   \nHornet 4 Drive      21.4 6   258.0 110 3.08 3.215 19.44 1  0  3    1   \nHornet Sportabout   18.7 8   360.0 175 3.15 3.440 17.02 0  0  3    2   \nValiant             18.1 6   225.0 105 2.76 3.460 20.22 1  0  3    1   \nDuster 360          14.3 8   360.0 245 3.21 3.570 15.84 0  0  3    4   \nMerc 240D           24.4 4   146.7  62 3.69 3.190 20.00 1  0  4    2   \nMerc 230            22.8 4   140.8  95 3.92 3.150 22.90 1  0  4    2   \nMerc 280            19.2 6   167.6 123 3.92 3.440 18.30 1  0  4    4   \nMerc 280C           17.8 6   167.6 123 3.92 3.440 18.90 1  0  4    4   \nMerc 450SE          16.4 8   275.8 180 3.07 4.070 17.40 0  0  3    3   \nMerc 450SL          17.3 8   275.8 180 3.07 3.730 17.60 0  0  3    3   \nMerc 450SLC         15.2 8   275.8 180 3.07 3.780 18.00 0  0  3    3   \nCadillac Fleetwood  10.4 8   472.0 205 2.93 5.250 17.98 0  0  3    4   \nLincoln Continental 10.4 8   460.0 215 3.00 5.424 17.82 0  0  3    4   \nChrysler Imperial   14.7 8   440.0 230 3.23 5.345 17.42 0  0  3    4   \nFiat 128            32.4 4    78.7  66 4.08 2.200 19.47 1  1  4    1   \nHonda Civic         30.4 4    75.7  52 4.93 1.615 18.52 1  1  4    2   \nToyota Corolla      33.9 4    71.1  65 4.22 1.835 19.90 1  1  4    1   \nToyota Corona       21.5 4   120.1  97 3.70 2.465 20.01 1  0  3    1   \nDodge Challenger    15.5 8   318.0 150 2.76 3.520 16.87 0  0  3    2   \nAMC Javelin         15.2 8   304.0 150 3.15 3.435 17.30 0  0  3    2   \nCamaro Z28          13.3 8   350.0 245 3.73 3.840 15.41 0  0  3    4   \nPontiac Firebird    19.2 8   400.0 175 3.08 3.845 17.05 0  0  3    2   \nFiat X1-9           27.3 4    79.0  66 4.08 1.935 18.90 1  1  4    1   \nPorsche 914-2       26.0 4   120.3  91 4.43 2.140 16.70 0  1  5    2   \nLotus Europa        30.4 4    95.1 113 3.77 1.513 16.90 1  1  5    2   \nFord Pantera L      15.8 8   351.0 264 4.22 3.170 14.50 0  1  5    4   \nFerrari Dino        19.7 6   145.0 175 3.62 2.770 15.50 0  1  5    6   \nMaserati Bora       15.0 8   301.0 335 3.54 3.570 14.60 0  1  5    8   \nVolvo 142E          21.4 4   121.0 109 4.11 2.780 18.60 1  1  4    2   \n\n\n\ndotchart(mtcars$mpg,\n         labels=row.names(mtcars),cex=.7,\n         main=\"Gas Mileage for Car Models\", \n         xlab=\"Miles Per Gallon\")\n\n\n\n\n\ntable(mtcars$cyl)\n\n\n 4  6  8 \n11  7 14 \n\n\n\nbarplot(table(mtcars$cyl), main=\"Cylinder distribution\", xlab = \"Cylinders\")\n\n\n\n\n\ncounts &lt;- table(mtcars$cyl)\nbarplot(counts, main=\"Cylinder Distribution\", horiz=TRUE,\n  names.arg=c(\"4 cyl\", \"6 cyl\", \"8 cyl\"))\n\n\n\n\n\npie(counts, labels=c(\"4 cyl\", \"6 cyl\", \"8 cyl\"),\n    col = rainbow(length(counts)),\n    main = \"Cylinder distribution\")"
  },
  {
    "objectID": "11 - Data import & plotting.html#parametric-plots",
    "href": "11 - Data import & plotting.html#parametric-plots",
    "title": "11  Data Import & more plotting",
    "section": "Parametric plots",
    "text": "Parametric plots\n\noptions(repr.plot.width=8,repr.plot.height=6)\nt &lt;- seq(0, 2*pi, length.out = 200)\npar(mfrow=c(2,3))\nplot(cos(t), sin(2*t), type=\"l\")\nplot(cos(3*t), sin(2*t), type=\"l\")\nplot(cos(3*t), sin(4*t), type=\"l\")\nplot(cos(5*t), sin(4*t), type=\"l\")\nplot(cos(5*t), sin(6*t), type=\"l\")\nplot(cos(9*t), sin(8*t), type=\"l\")"
  },
  {
    "objectID": "12 - Correlation and regression analysis.html",
    "href": "12 - Correlation and regression analysis.html",
    "title": "12  Correlations and linear regression",
    "section": "",
    "text": "Correlation\nWe say that two variables are correlated when a change in one is associated with a change in the other.\nGenerate some synthetic data with random noise.\nset.seed(6556)\nx &lt;- 1:20\ny &lt;- x + rnorm(20, sd=3)  # y is correlated with x\nz &lt;- sample(1:20,20)/2 + rnorm(20, sd=5)\ndf &lt;- data.frame(x,y,z)\noptions(repr.plot.width=8, repr.plot.height=3)\npar(mfrow=c(1,3))\nplot(df$x, df$y)\nplot(df$x, df$z)\nplot(df$y, df$z)\nIt appears that x and y are correlated positively, while z in not correlated with the rest.\nLet’s check this intuition by calculating the Pearson correlation coefficient.\ncor(df, method=\"pearson\")\n\n  x         y          z         \nx 1.0000000 0.91448499 0.11100764\ny 0.9144850 1.00000000 0.04973288\nz 0.1110076 0.04973288 1.00000000\nThe correlation coefficient between x and y is close to 1, and that between z and the others is small.\nHowever, these results might be due to luck, resulting from the finite number of data we got.\nThe correlation test gives us a confidence interval about this result.\ncor.test(df$x, df$y, method=\"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  df$x and df$y\nt = 9.5888, df = 18, p-value = 1.697e-08\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.7927889 0.9660614\nsample estimates:\n     cor \n0.914485\ncor.test(df$x, df$z, method=\"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  df$x and df$z\nt = 0.47389, df = 18, p-value = 0.6413\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.3486394  0.5276105\nsample estimates:\n      cor \n0.1110076\nLet’s apply this to a real data set, the height and weight data for men and women which we have used before.\nurl &lt;- \"01_heights_weights_genders.csv\"\nheights_weights_gender &lt;- read.table(url, header=T, sep=\",\")\nmen &lt;- heights_weights_gender$Gender == \"Male\"\nmen_heights &lt;- heights_weights_gender[[\"Height\"]][men]\nmen_weights &lt;- heights_weights_gender[[\"Weight\"]][men]\nwomen &lt;- heights_weights_gender$Gender == \"Female\"\nwomen_heights &lt;- heights_weights_gender[[\"Height\"]][women]\nwomen_weights &lt;- heights_weights_gender[[\"Weight\"]][women]\nplot(men_heights, men_weights)\ncor.test(men_heights,men_weights)\n\n\n    Pearson's product-moment correlation\n\ndata:  men_heights and men_weights\nt = 120.75, df = 4998, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8557296 0.8698894\nsample estimates:\n      cor \n0.8629788\ncor.test(women_heights,women_weights)\n\n\n    Pearson's product-moment correlation\n\ndata:  women_heights and women_weights\nt = 113.88, df = 4998, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8417121 0.8571417\nsample estimates:\n      cor \n0.8496086\nCorrelation is a summary statistic. It can hide important features of data.\nA famous example is the Anscombe data set, which illustrates that very different data can lead to the same correlation coefficient.\nanscombe\n\n   x1 x2 x3 x4 y1    y2   y3    y4   \n1  10 10 10  8  8.04 9.14  7.46  6.58\n2   8  8  8  8  6.95 8.14  6.77  5.76\n3  13 13 13  8  7.58 8.74 12.74  7.71\n4   9  9  9  8  8.81 8.77  7.11  8.84\n5  11 11 11  8  8.33 9.26  7.81  8.47\n6  14 14 14  8  9.96 8.10  8.84  7.04\n7   6  6  6  8  7.24 6.13  6.08  5.25\n8   4  4  4 19  4.26 3.10  5.39 12.50\n9  12 12 12  8 10.84 9.13  8.15  5.56\n10  7  7  7  8  4.82 7.26  6.42  7.91\n11  5  5  5  8  5.68 4.74  5.73  6.89\noptions(repr.plot.width=10, repr.plot.height=3)\npar(mfrow = c(1,4))\nplot(anscombe$x1, anscombe$y1)\nplot(anscombe$x2, anscombe$y2)\nplot(anscombe$x3, anscombe$y3)\nplot(anscombe$x4, anscombe$y4,xlim=c(4,20))\nDespite fundamental differences, the correlation coefficient for each pair of variables is the same.\ncor(anscombe$x1, anscombe$y1)\ncor(anscombe$x2, anscombe$y2)\ncor(anscombe$x3, anscombe$y3)\ncor(anscombe$x4, anscombe$y4)\n\n[1] 0.8164205\n\n\n[1] 0.8162365\n\n\n[1] 0.8162867\n\n\n[1] 0.8165214\nWhen we discover a correlation between two variables \\(x\\) and \\(y\\), we may want to find out a formula for the relation between them. That way, we can predict the outcome of unobserved input values.\nIf we assume a linear relationship \\(y=ax+b\\). Then, given the observations \\((x_1,y_1),\\ldots,(x_n,y_n)\\), the statistical procedure to determine the coefficients \\(a\\) and \\(b\\) is called linear regression.\nOnce we have some estimates \\(\\hat{a}\\) and \\(\\hat{b}\\) for the parameters, when we get a new input value \\(x\\), we can predict the outcome as \\(y=\\hat{a}x + \\hat{b}\\).\nLet’s create a synthetic data set again.\nset.seed(1235)\nx &lt;- 1:10 + rnorm(10,sd=2)\ny &lt;- x + rnorm(10, sd=3)  # y is correlated with x\ndf &lt;- data.frame(x,y)\ndf\n\n   x          y        \n1  -0.3959759 -3.217074\n2  -0.5697077  2.685184\n3   4.9799180  2.729447\n4   4.2235517  2.958473\n5   5.2284153  2.758888\n6   9.3963930 10.634494\n7   7.0956912  8.935584\n8   9.3097248  7.947907\n9  11.7305673  9.731882\n10 10.8051459 11.754786\noptions(repr.plot.width=5, repr.plot.height=4)\nplot(x,y)\nOur purpose is to draw a line such that the distances between given points and the line are minimized. R provides a function lm() (for “linear model”) that performs this task.\nlinmodel &lt;- lm(y~x, data=df)\nlinmodel\n\n\nCall:\nlm(formula = y ~ x, data = df)\n\nCoefficients:\n(Intercept)            x  \n    -0.4448       0.9929\nWe see a nonzero intercept, even though we expect zero. Is this a significant result?\nsummary(linmodel)\n\n\nCall:\nlm(formula = y ~ x, data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.3791 -1.6957 -0.8209  1.6796  3.6956 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  -0.4448     1.2884  -0.345 0.738831    \nx             0.9929     0.1737   5.716 0.000446 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 2.253 on 8 degrees of freedom\nMultiple R-squared:  0.8033,    Adjusted R-squared:  0.7787 \nF-statistic: 32.67 on 1 and 8 DF,  p-value: 0.000446\nconfint(linmodel)\n\n            2.5 %      97.5 %  \n(Intercept) -3.4158320 2.526273\nx            0.5923686 1.393511\nThe resulting line can be plotted with the abline() function.\nplot(x,y)\nabline(linmodel, col=\"red\")\nLet’s make a prediction for \\(x=25,26,\\ldots,30\\).\nnewx &lt;- 25:30\npredict.lm(linmodel, data.frame(x=newx))\n\n       1        2        3        4        5        6 \n24.37871 25.37165 26.36459 27.35753 28.35047 29.34341\nAssuming that \\(y=a_0 + a_1x + a_2x^2 + a_3x^3+...\\)\nConsider the following data:\nset.seed(8764)\nx &lt;- 0:19\ny &lt;- -0.1*x^2 + 2*x + 1 + rnorm(20, sd=2)\nplot(x,y)\nThis model is obviously not linear in \\(x\\). However, we can still use linear regression here.\nCreate new variables: \\(x_1 \\equiv x\\) and \\(x_2 \\equiv x^2\\).\nThen we can set up a linear model with two independent variables as before.\nx1 &lt;- x\nx2 &lt;- x^2\nquadmodel &lt;- lm(y~x1+x2, data=data.frame(x1,x2,y))\nquadmodel\n\n\nCall:\nlm(formula = y ~ x1 + x2, data = data.frame(x1, x2, y))\n\nCoefficients:\n(Intercept)           x1           x2  \n    -0.4860       2.3705      -0.1202\nThe estimated model is \\(\\hat{y} = -0.1202x^2 + 2.3705x-0.4860\\), while the truth was $y=-0.1x^2 + 2x -1 $.\nWe cannot plot the fitted curve directly with abline(). Instead, we need to extract the model coefficients and set up a predictions vector with it.\nquadmodel$coefficients\n\n(Intercept)          x1          x2 \n -0.4859914   2.3704527  -0.1201814\na &lt;- quadmodel$coefficients[\"x1\"]\nb &lt;- quadmodel$coefficients[\"x2\"]\nc &lt;- quadmodel$coefficients[\"(Intercept)\"]\nc(a,b,c)\n\n         x1          x2 (Intercept) \n  2.3704527  -0.1201814  -0.4859914\nxp &lt;- seq(0,20,length.out = 100)\nyp &lt;- a*xp + b*xp^2 + c\nplot(x,y)\nlines(xp,yp, col=\"red\")\nsummary(quadmodel)\n\n\nCall:\nlm(formula = y ~ x1 + x2, data = data.frame(x1, x2, y))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.3577 -0.8349  0.0507  1.0750  2.5515 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -0.48599    0.96133  -0.506     0.62    \nx1           2.37045    0.23452  10.108 1.32e-08 ***\nx2          -0.12018    0.01192 -10.086 1.36e-08 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 1.579 on 17 degrees of freedom\nMultiple R-squared:  0.8592,    Adjusted R-squared:  0.8427 \nF-statistic: 51.88 on 2 and 17 DF,  p-value: 5.789e-08\nconfint(quadmodel)\n\n            2.5 %      97.5 %     \n(Intercept) -2.5142103  1.54222740\nx1           1.8756591  2.86524640\nx2          -0.1453202 -0.09504259"
  },
  {
    "objectID": "12 - Correlation and regression analysis.html#correlation-does-not-always-mean-causation",
    "href": "12 - Correlation and regression analysis.html#correlation-does-not-always-mean-causation",
    "title": "12  Correlations and linear regression",
    "section": "Correlation does not always mean causation",
    "text": "Correlation does not always mean causation\nIf A and B are correlated, this might mean there is a causal link between them * A causes B, e.g. rain and crop growth. * A and B influence each other; e.g., rain causes tree growth, and large forests cause rain.\nHowever, correlation can also exist without causation.\n\nBoth A and B are may be influenced by another factor\n\nPure luck, no causation.\n\n (Source)"
  },
  {
    "objectID": "12 - Correlation and regression analysis.html#linear-regression-of-height-and-weight-data",
    "href": "12 - Correlation and regression analysis.html#linear-regression-of-height-and-weight-data",
    "title": "12  Correlations and linear regression",
    "section": "Linear regression of height and weight data",
    "text": "Linear regression of height and weight data\n\ndf &lt;- data.frame(men_heights,men_weights,women_heights,women_weights)\nhead(df)\n\n  men_heights men_weights women_heights women_weights\n1 73.84702    241.8936    58.91073      102.0883     \n2 68.78190    162.3105    65.23001      141.3058     \n3 74.11011    212.7409    63.36900      131.0414     \n4 71.73098    220.0425    64.48000      128.1715     \n5 69.88180    206.3498    61.79310      129.7814     \n6 67.25302    152.2122    65.96802      156.8021     \n\n\n\nmen_hw_model &lt;- lm(\"men_weights ~ men_heights\", data=df)\nwomen_hw_model &lt;- lm(\"women_weights ~ women_heights\", data=df)\n\n\nmen_hw_model\n\n\nCall:\nlm(formula = \"men_weights ~ men_heights\", data = df)\n\nCoefficients:\n(Intercept)  men_heights  \n   -224.499        5.962  \n\n\n\nplot(men_heights,men_weights)\nabline(men_hw_model,col=\"red\")\n\n\n\n\n\nwomen_hw_model\nplot(women_heights,women_weights)\nabline(women_hw_model,col=\"red\")\n\n\nCall:\nlm(formula = \"women_weights ~ women_heights\", data = df)\n\nCoefficients:\n  (Intercept)  women_heights  \n     -246.013          5.994"
  },
  {
    "objectID": "12 - Correlation and regression analysis.html#linear-regression-with-multiple-variables",
    "href": "12 - Correlation and regression analysis.html#linear-regression-with-multiple-variables",
    "title": "12  Correlations and linear regression",
    "section": "Linear regression with multiple variables",
    "text": "Linear regression with multiple variables\nOur linear model can involve two independent variables: \\[y = a_0 + a_1x_1 + a_2 x_2\\]\n\n# generate synthetic data\nset.seed(1234)\nx1 &lt;- sample(1:20,20) + rnorm(20,sd=2)\nx2 &lt;- sample(1:20,20)/2 + rnorm(20, sd=5)\n\ny &lt;- 0 + 1*x1 + 2*x2 + rnorm(10, sd=3)\ndf &lt;- data.frame(x1,x2,y)\ndf\n\n   x1        x2         y        \n1  12.625346 -2.2599294 12.208969\n2   3.745128  5.8808594 19.495541\n3  12.036633  7.5157502 28.077552\n4  16.410487 -4.0301563  8.370853\n5   7.705962  5.0896204 16.518797\n6  20.736362  1.9555519 23.547894\n7   6.751271 -2.0748100  4.546511\n8   4.620524  0.6884524 12.208242\n9   2.010014  7.3152791 16.180377\n10  6.924739 14.7390874 32.230811\n11 15.447952  3.1332329 25.817899\n12  9.006522 14.0295481 41.054313\n13 11.022790 -4.7890427  2.454123\n14 20.019720  6.7829423 33.606283\n15 14.356543 22.2449554 57.480047\n16 10.059126  2.3261981 13.611950\n17 13.540943 -2.8481679  9.789467\n18 -3.408696  5.4619762 13.726069\n19 19.086346 10.8854222 40.396995\n20  3.042854  3.3069613  5.484674\n\n\n\nplot(df)\n\n\n\n\n\nlinmodel2 &lt;- lm(y~x1+x2, data=df)\nlinmodel2\nconfint(linmodel2)\n\n\nCall:\nlm(formula = y ~ x1 + x2, data = df)\n\nCoefficients:\n(Intercept)           x1           x2  \n     2.7540       0.8876       1.8784  \n\n\n            2.5 %      97.5 %  \n(Intercept) -0.1173064 5.625245\nx1           0.6656861 1.109491\nx2           1.6702903 2.086563"
  }
]