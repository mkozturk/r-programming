[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming with R",
    "section": "",
    "text": "Preface\nThis is a compilation of the lecture notes from the course CMPE 140: Introduction to Programming for Economics and Management, which I taught at Boğaziçi University between 2017 and 2021.\nThis course is designed to be an introduction to structured programming using the R language. As such, we discuss only the core language. We also discuss basic visualization, data analysis, and regression analysis. However, advanced libraries on data science (the so-called tidyverse is out of the scope of these notes)\nThere are many good books about using R for the purpose of data science. However, they are mainly aimed at users who have a background in other coding languages, or mature programmers with a specific data task in mind. Books that teach R as a first programming language are rare. Two books I have particularly found useful are Matloff’s The Art of R Programming1 and Davies’ The Book of R2.1 Norman Matloff, The Art of R Programming. No Starch Press, 2011.2 Tilman M. Davies, The Book of R. No Starch Press, 2016.\nAlthough far from being either complete or perfect, I hope these notes could be useful to novice R programmers."
  },
  {
    "objectID": "First Steps.html#simple-arithmetic",
    "href": "First Steps.html#simple-arithmetic",
    "title": "2  First steps in R",
    "section": "Simple arithmetic",
    "text": "Simple arithmetic\nThe arithmetic operators are\n\nAddition: +\nSubtraction: -\nMultiplication: * (not x)\nDivision: /\nExponentiation: ^\n\nWith these, you can use the R interpreter as a calculator.\nYou can run the following expressions in the R interpreter. The interpreter will evaluate them and return the value.\n\n1 + 2 + 3\n\n[1] 6\n\n\n\n2 * 3 - 5\n\n[1] 1\n\n\n\n1/2 + 1/4\n\n[1] 0.75\n\n\n\n5^2\n\n[1] 25\n\n\nIn addition to arithmetic operators, R can evaluate many common mathematical functions, such as sqrt for square root:\n\nsqrt(25)\n\n[1] 5\n\n\n\n\n\n\n\n\nExercise\n\n\n\nEvaluate the following expressions.\n\n\\(\\frac{1}{2} + \\frac{2}{3} + \\frac{3}{4}\\)\n\\(\\frac{1 + 2/3}{3 - 1/(2/3)}\\)\n\\(1 + \\frac{1}{1 + \\frac{1}{1 + \\frac{1}{2}}}\\)\n\\(\\sqrt{17.4^2 + 3.67^2 - 9.12^2}\\)"
  },
  {
    "objectID": "First Steps.html#variable-assignment",
    "href": "First Steps.html#variable-assignment",
    "title": "2  First steps in R",
    "section": "Variable assignment",
    "text": "Variable assignment\nA very basic feature of programs is that you can assign names to some values, and then use that name over and over.\n\nx &lt;- 10 # Read: \"x gets 10\"\n\nWe can verify that x has the assigned value:\n\nx\n\n[1] 10\n\n\nWe can always assign a new value to x.\n\nx &lt;- 11\nx\n\n[1] 11\n\n\nThe following statement updates the value of x. First, the right-hand side is evaluated. The resulting value is assigned as a new value to x.\n\nx &lt;- x + 1\nx\n\n[1] 12\n\n\n\n\n\n\n\n\nExercise\n\n\n\nGiven the variables\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\nupdate the variable account_balance by adding the interest.\n\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\n# write your update below (1 line)\n...\n# end of your code\naccount_balance\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nGiven the variables\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\nfind the value of the account_balance after 5 update periods.\n\naccount_balance &lt;- 1000\ninterest_rate &lt;- 0.10\n# write your code lines below (5 lines)\n...\n# end of your code\naccount_balance\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nAssignments can be more complex, and may involve many variables. Consider the follwoign example:\nEvery year, 1% of the people living in city A move to city B, and 2% of people living in city B move to city A. If the current populations of city A and city B are 10000 and 20000, respectively, find the populations of both cities next year.\n\n# Initialize variables\ncityA &lt;- 10000\ncityB &lt;- 20000\n\n# Update variables\ncityA_next &lt;- cityA + 0.02*cityB - 0.01*cityA\ncityB_next &lt;- cityB + 0.01*cityA - 0.02*cityB\ncityA &lt;- cityA_next\ncityB &lt;- cityB_next\n\n# Display new values\ncityA\n\n[1] 10300\n\ncityB\n\n[1] 19700\n\n\nNote that we used intermediate variables cityA_next and cityB_next, instead of directly updating like cityA &lt;- cityA + 0.02*cityB - 0.01*cityA. Why would a direct update be a mistake? Try rerunning your program with this mistake and compare the results."
  },
  {
    "objectID": "Vectors.html#why-vectors",
    "href": "Vectors.html#why-vectors",
    "title": "3  Data vectors in R",
    "section": "Why vectors?",
    "text": "Why vectors?\nOften, we store large amounts of related data and process them together. For example, we may have height and weight values of 100 people, and we may want to calculate their body-mass index, or the mean height. Storing them as separate variables are difficult, and we don’t have a way of automatically processing them:\n\nheight1 &lt;- 1.70\nweight1 &lt;- 65\nbmi1 &lt;- weight1 / height1^2\n\nheight2 &lt;- 1.75\nweight2 &lt;- 66\nbmi2 &lt;- weight2 / height2^2\n\n# ... a lot of lines...\n\nheight100 &lt;- 1.68\nweight100 &lt;- 70\nbmi100 &lt;- weight100 / height100^2\n\nHow can we get, e.g. the mean body-mass index of the group? Again, with difficulty:\n\ntotal &lt;- 0 \nheight1 &lt;- 1.70\nweight1 &lt;- 65\nbmi1 &lt;- weight1 / height1^2\ntotal &lt;- total + bmi1\n\nheight2 &lt;- 1.75\nweight2 &lt;- 66\nbmi2 &lt;- weight2 / height2^2\ntotal &lt;- total + bmi2\n\n# ... a lot of lines...\n\nheight100 &lt;- 1.68\nweight100 &lt;- 70\nbmi100 &lt;- weight100 / height100^2\ntotal &lt;- total + bmi100\n\nmean_bmi = total / 100\n\nImagine doing this for 1000, or one million people.\nOn the other hand, vectors have a sequential structure. If heights is a vector holding the height values, we can get the first element with height[1], second element with height[2], and so on. Better yet, later we’ll see that we can use a loop to go over every element with a few lines of code, regardless of the length of the vector:\n\ntotal &lt;- 0\ni &lt;- 1\nwhile (i&lt;=100)\n    total &lt;- total + weights[i]/heights[i]^2\nmean_bmi &lt;- total / 100\n\nAn even shorter (and better!) way is calling the mean() function\n\nmean_bmi &lt;- mean(weights/heights^2)\n\n\n\n\n\n\n\nTip\n\n\n\nR is designed for data processing, so vectors are the main object of fast calculations. The function mean() works faster than the loop equivalent, because it is internally optimized. It is always more efficient to use an existing function than doing the same thing manually.\nInternally, vectors are designed to occupy an unbroken section in the memory. Every element occupies the same amount of bytes. That way, vector operations can go over elements quickly, without wasting time to jump around the memory."
  },
  {
    "objectID": "Vectors.html#creating-vectors",
    "href": "Vectors.html#creating-vectors",
    "title": "3  Data vectors in R",
    "section": "Creating vectors",
    "text": "Creating vectors\nThe most general way to create data vectors is to use the c() function (short for concatenate).\n\nheights &lt;- c(1.70, 1.75, 1.62)\nweights &lt;- c(65, 66, 61)\n\n\nheights\n\n[1] 1.70 1.75 1.62\n\n\n\nweights\n\n[1] 65 66 61\n\n\nVectors can also be created with the colon operator (:)\n\nx &lt;- 2:10 # assign integers from 2 to 10, inclusive.\nx\n\n[1]  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "Vectors.html#extending-vectors",
    "href": "Vectors.html#extending-vectors",
    "title": "3  Data vectors in R",
    "section": "Extending vectors",
    "text": "Extending vectors\nThe function c() can also be used to add new elements to vectors.\nSuppose initially we have only two pieces of data:\n\nheights &lt;- c(1.70, 1.75)\nheights\n\n[1] 1.70 1.75\n\n\nThen we get another data point, and we extend the vector.\n\nc(heights, 1.62)\n\n[1] 1.70 1.75 1.62\n\n\n\nheights\n\n[1] 1.70 1.75\n\n\n\nheights &lt;- c(heights, 1.62)\n\n\nheights\n\n[1] 1.70 1.75 1.62\n\n\n\nheights &lt;- c(1.62, heights)\n\n\nheights\n\n[1] 1.62 1.70 1.75 1.62\n\n\n\nc(heights, heights)\n\n[1] 1.62 1.70 1.75 1.62 1.62 1.70 1.75 1.62"
  },
  {
    "objectID": "Vectors.html#modes",
    "href": "Vectors.html#modes",
    "title": "3  Data vectors in R",
    "section": "Modes",
    "text": "Modes\nR variable types are called modes. Modes include: “numeric”, “character”, “logical”, “complex”, and so on.\n\nmode(c(1,2))\n\n[1] \"numeric\"\n\nmode(c(\"abc\",\"xyz\"))\n\n[1] \"character\"\n\nmode(c(TRUE,FALSE))\n\n[1] \"logical\"\n\nmode(2+4i)\n\n[1] \"complex\"\n\n\nAll elements in a vector must be of the same mode. This is required for efficient calculation over vectors. Other data structures, such as the list, can be used to store mixed-type data."
  },
  {
    "objectID": "Vectors.html#vector-arithmetic",
    "href": "Vectors.html#vector-arithmetic",
    "title": "3  Data vectors in R",
    "section": "Vector arithmetic",
    "text": "Vector arithmetic\nIf you add two vectors, both with the same number of elements, corresponding elements are added:\n\nc(1,4,9) + c(2,16,5)\n\n[1]  3 20 14\n\n\nThe same rule applies to all basic operations:\n\nc(1,4,9) * c(2,16,5)\n\n[1]  2 64 45\n\n\n\nc(1,4,9) / c(2,16,5)\n\n[1] 0.50 0.25 1.80\n\n\nLogical comparisons such as &lt; or &gt; also follow this rule.\n\n3 &gt; 2\n\n[1] TRUE\n\n\n\nc(1,4,9) &gt; c(2,16,5)\n\n[1] FALSE FALSE  TRUE\n\n\nIf we add a vector and a single number, the single number is recycled until its length matches the other vector.\n\nc(1,4,9) + c(5)  # converted to: c(1,4,9) + c(5,5,5)\n\n[1]  6  9 14\n\n\nSame goes for other operations:\n\nc(1,4,9) &lt; 5  # converted to: c(1,4,9) &lt; c(5,5,5)\n\n[1]  TRUE  TRUE FALSE\n\n\n\nc(1,4,9)^2   # converted to: c(1,4,9) ^ c(2,2,2)\n\n[1]  1 16 81\n\n\nIf the operation is done with two vectors with different sizes, you might get a warning:\n\nc(1,4,9) + c(2,3)\n\nWarning in c(1, 4, 9) + c(2, 3): longer object length is not a multiple of\nshorter object length\n\n\n[1]  3  7 11\n\n\nHowever, the following works without warning:\n\nc(1,4,9,10) + c(2,3) # converted to c(1,4,9,10) + c(2,3,2,3)\n\n[1]  3  7 11 13\n\n\nR recycles the shorter vector until its length matches the longer vector. This is also done with vectors of length 3 and 2, but not perfectly, so a warning gets issued.\n\n\n\n\n\n\nExercise\n\n\n\nA set of temperature measurements are given in Fahrenheit scale as follows:\ntemperatures_F &lt;- c(87, 89, 101, 91, 86, 71, 76)\nThis can be converted to Celsius degrees using the formula \\[C = \\frac{5}{9}(F-32)\\]\nWrite an R expression that returns a vector of corresponding Celsius values."
  },
  {
    "objectID": "Vectors.html#vectorized-functions",
    "href": "Vectors.html#vectorized-functions",
    "title": "3  Data vectors in R",
    "section": "Vectorized functions",
    "text": "Vectorized functions\nThese are built-in R functions that operate on vectors as a whole, optimized to process them fast.\n\nsum()\nAdds up all elements in vector, returns the total. `\n\nsum(c(1,4,9))\n\n[1] 14\n\n\n\nsum(1:1000)\n\n[1] 500500\n\n\n\n\n\n\n\n\nExercise\n\n\n\nUsing sum() calculate the total of squares of the first 100 numbers: \\(\\sum_{i=1}^{100} i^2 = 1 + 4 + 9 + \\cdots + 10000\\)\n\n\n\n\ncumsum()\nAdds up the elements at every step, returns a vector of cumulative totals up to that element.\n\ncumsum(1:10)\n\n [1]  1  3  6 10 15 21 28 36 45 55\n\n\n\n\nprod(), cumprod()\nSimilar to sum() and cumsum(), but for products of elements.\n\nprod(c(1,4,9))\n\n[1] 36\n\n\n\nprod(1:5)  # 5!\n\n[1] 120\n\n\n\ncumprod(1:5)\n\n[1]   1   2   6  24 120\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSuppose you have 10 marbles, each of a different color. The number of ways you can select 4 marbles out of them is given by \\[\\left(\\begin{matrix} 10\\\\4 \\end{matrix}\\right)=\\frac{10!}{4!6!}\\] Calculate this number using prod()."
  },
  {
    "objectID": "Vectors.html#mathematical-functions",
    "href": "Vectors.html#mathematical-functions",
    "title": "3  Data vectors in R",
    "section": "Mathematical functions",
    "text": "Mathematical functions\nFamiliar mathematical functions are all designed to apply on vectors elementwise.\nThe square root function:\n\nsqrt(c(4,9,16))\n\n[1] 2 3 4\n\n\nThe constant pi holds the value of \\(\\pi\\)\n\nx &lt;- c(0, pi/4, pi/2, 3*pi/4, pi)\n# alternatively: x &lt;- 0:4 * pi/4\nsin(x)\n\n[1] 0.000000e+00 7.071068e-01 1.000000e+00 7.071068e-01 1.224647e-16\n\n\nThe exponential function \\(\\mathrm{e}^x\\)\n\nexp(1:5)\n\n[1]   2.718282   7.389056  20.085537  54.598150 148.413159\n\n\nThe natural logarithm function (inverse of exp)\n\nlog(exp(1:5))\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "Vectors.html#representing-missing-data",
    "href": "Vectors.html#representing-missing-data",
    "title": "3  Data vectors in R",
    "section": "Representing missing data",
    "text": "Representing missing data\n\nIn many data sets, we often have some missing data, i.e., observations for which the values are missing.\nIn R, missing values are denoted with NA.\nAny vector can contain missing values.\n\n\nweights &lt;- c(65, NA, 61)\nnames &lt;- c(\"Can\",\"Cem\",NA)"
  },
  {
    "objectID": "Vectors.html#vector-element-names",
    "href": "Vectors.html#vector-element-names",
    "title": "3  Data vectors in R",
    "section": "Vector element names",
    "text": "Vector element names\nFor readability, we can assign name labels to the elements of a data vector.\n\nheights &lt;- c(Can=1.70, Cem=1.75, Hande=1.62)\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nweights &lt;- c(Can=65, Cem=66, Hande=61)\nweights\n\n  Can   Cem Hande \n   65    66    61 \n\n\nWe can retrieve these names with the names() function.\n\nnames(heights)\n\n[1] \"Can\"   \"Cem\"   \"Hande\"\n\n\nWe can assign names to the elements of a vector that already exists.\n\nheights &lt;- c(1.70, 1.75, 1.62)\nnames(heights) &lt;- c(\"Can\",\"Cem\",\"Hande\")\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\nIf for some reason we want to remove the names, we use the unname() function.\n\nunname(heights)\n\n[1] 1.70 1.75 1.62\n\n\nThe original vector is not changed with this function call, because we did not assign the result to heights.\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62"
  },
  {
    "objectID": "Vectors.html#vector-indexing",
    "href": "Vectors.html#vector-indexing",
    "title": "3  Data vectors in R",
    "section": "Vector indexing",
    "text": "Vector indexing\nWe can access a single element of a vector by providing the index of the element in square brackets.\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nheights[1]  # first element\n\nCan \n1.7 \n\n\n\nheights[3] # third element\n\nHande \n 1.62 \n\n\nWe can select a slice of the vector by providing a range inside brackets.\n\nheights[1:2]  # select from element 1 to element 2, inclusive.\n\n Can  Cem \n1.70 1.75 \n\n\nWe can also give a vector consisting of element indices.\n\nheights[c(1,3)]  # select elements 1 and 3.\n\n  Can Hande \n 1.70  1.62 \n\n\nThe indices do not have to be in order:\n\nheights[c(2,1,3)]\n\n  Cem   Can Hande \n 1.75  1.70  1.62 \n\n\nWe can select the same element more than once.\n\nheights[c(1,1,3,2,3)]\n\n  Can   Can Hande   Cem Hande \n 1.70  1.70  1.62  1.75  1.62 \n\n\nWe can provide a Boolean (true/false) vector for indexing. This will select only elements with corresponding TRUE values.\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nheights[c(T,F,F)]  # T is a shorthand for TRUE, F is for FALSE.\n\nCan \n1.7 \n\n\nWe can exclude elements using negative indices.\n\nheights[-1]  # exclude first element.\n\n  Cem Hande \n 1.75  1.62 \n\n\n\nheights[c(-1,-3)]  # exclude 1st and 3rd elements\n\n Cem \n1.75 \n\n\n\n\n\n\n\n\nExercise\n\n\n\nSuppose we define a four-element vector\nv &lt;- c(3,6,2,-1).\nWhich of the following CANNOT be used to select the second and third elements of this vector?\n\nv[2:3]\nv[c(2,3)]\nv[c(6,2)]\nv[c(F,T,T,F)]\nv[c(-1,-4)]"
  },
  {
    "objectID": "Vectors.html#using-names-to-select-elements",
    "href": "Vectors.html#using-names-to-select-elements",
    "title": "3  Data vectors in R",
    "section": "Using names to select elements",
    "text": "Using names to select elements\nIf the elements are given names consisting of strings, we can use these names in brackets instead of indices.\n\nheights[\"Can\"]\n\nCan \n1.7 \n\n\n\nheights[c(\"Can\",\"Can\",\"Hande\",\"Cem\",\"Hande\")]\n\n  Can   Can Hande   Cem Hande \n 1.70  1.70  1.62  1.75  1.62"
  },
  {
    "objectID": "Vectors.html#modify-element-values-in-a-vector",
    "href": "Vectors.html#modify-element-values-in-a-vector",
    "title": "3  Data vectors in R",
    "section": "Modify element values in a vector",
    "text": "Modify element values in a vector\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nheights[1] &lt;- 1.72\n\n\nheights\n\n  Can   Cem Hande \n 1.72  1.75  1.62 \n\n\n\nheights[1] &lt;- 1.70"
  },
  {
    "objectID": "Vectors.html#insert-values-to-an-existing-vector",
    "href": "Vectors.html#insert-values-to-an-existing-vector",
    "title": "3  Data vectors in R",
    "section": "Insert values to an existing vector",
    "text": "Insert values to an existing vector\nA vector’s size is determined at its creation, and its elements are stored contiguously (side-by-side) in memory. Therefore it is really not possible to add or remove an element in a vector. However, we can reassign the identifier to a new one.\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nheights &lt;- c(heights[1:2], Lale=1.76, heights[3])\n\n\nheights\n\n  Can   Cem  Lale Hande \n 1.70  1.75  1.76  1.62"
  },
  {
    "objectID": "Vectors.html#delete-elements-from-vector",
    "href": "Vectors.html#delete-elements-from-vector",
    "title": "3  Data vectors in R",
    "section": "Delete elements from vector",
    "text": "Delete elements from vector\nAgain, we cannot directly remove an element from an existing vector, but we can create a new vector without the element we want to delete, and reassign to the name.\n\nheights\n\n  Can   Cem  Lale Hande \n 1.70  1.75  1.76  1.62 \n\n\n\nheights &lt;- heights[-3]  # exclude element 3\n\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\n\n\n\n\n\nExercise\n\n\n\nSuppose we define a vector with\nv &lt;- c(3,4,5)\nWhat is the output of the following commands?\nv &lt;- c(5, v, 1:2)\nv &lt;- v[-2]\nv[2:4]\n\n2 3 4\n5 3 4 5 3 4\n4 5 3\n4 5 1"
  },
  {
    "objectID": "Vectors.html#getting-the-length-of-a-vector",
    "href": "Vectors.html#getting-the-length-of-a-vector",
    "title": "3  Data vectors in R",
    "section": "Getting the length of a vector",
    "text": "Getting the length of a vector\nWe can get the number of elements in a vector using the length() function.\n\nlength(heights)\n\n[1] 3\n\n\n\nlength(10:17)\n\n[1] 8"
  },
  {
    "objectID": "Vectors.html#vector-filtering",
    "href": "Vectors.html#vector-filtering",
    "title": "3  Data vectors in R",
    "section": "Vector filtering",
    "text": "Vector filtering\n\nApply a Boolean function (e.g., greater than, less than, …) to each element of the vector.\nReturns a Boolean vector according to the result on each element.\n\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nheights &gt; 1.65\n\n  Can   Cem Hande \n TRUE  TRUE FALSE \n\n\nUsing this Boolean vector, we can select data points satisfying the condition.\n\ntall_people &lt;- heights&gt;1.65\ntall_people\n\n  Can   Cem Hande \n TRUE  TRUE FALSE \n\n\n\nheights[tall_people]\n\n Can  Cem \n1.70 1.75 \n\n\nObviously, this can be done in a single line, too.\n\nheights[heights&gt;1.65]\n\n Can  Cem \n1.70 1.75 \n\n\nOne can also filter a vector according to another vector’s values.\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nweights\n\n  Can   Cem Hande \n   65    66    61 \n\n\n\nweights[ heights &gt; 1.65 ]  # weights of people who are taller than 1.65\n\nCan Cem \n 65  66 \n\n\n\n\n\n\n\n\nExercise\n\n\n\nGiven the vectors with named values:\nages &lt;- c(Ali=18, Hasan=21, Fatma=18, Hande=22, Cem=21)\nweights &lt;- c(Ali=75, Hasan=72, Fatma=60, Hande=56, Cem=67)\nwhich of the following commands prints the weights of people who are 18 years old?\n\nweights[ages==18]\nages[weights]==18\nweights[names(ages==18)]\nnames(weights[ages==18])"
  },
  {
    "objectID": "Vectors.html#modify-a-vector-by-filtering",
    "href": "Vectors.html#modify-a-vector-by-filtering",
    "title": "3  Data vectors in R",
    "section": "Modify a vector by filtering",
    "text": "Modify a vector by filtering\nWe can use filtering to selectively change only the elements that satisfy a condition.\nExample: For people who weigh more than 65 kg, decrease the weight by 1 kg.\n\nweights\n\n  Can   Cem Hande \n   65    66    61 \n\n\n\nweights[weights &gt; 65] - 1\n\nCem \n 65 \n\n\n\nweights[weights &gt; 65] &lt;- weights[weights &gt; 65] - 1\nweights\n\n  Can   Cem Hande \n   65    65    61"
  },
  {
    "objectID": "Vectors.html#get-indices-of-elements-that-satisfy-a-condition",
    "href": "Vectors.html#get-indices-of-elements-that-satisfy-a-condition",
    "title": "3  Data vectors in R",
    "section": "Get indices of elements that satisfy a condition",
    "text": "Get indices of elements that satisfy a condition\nThe which() function returns the indices (and labels, if available) of elements in a vector for which a Boolean function returns TRUE.\n\nheights &lt;- c(Can=1.70, Cem=1.75, Hande=1.62)\nweights &lt;- c(Can=65, Cem=66, Hande=61)\n\n\nheights &gt; 1.65\n\n  Can   Cem Hande \n TRUE  TRUE FALSE \n\n\n\nwhich(heights &gt; 1.65)\n\nCan Cem \n  1   2"
  },
  {
    "objectID": "Vectors.html#using-all-and-any",
    "href": "Vectors.html#using-all-and-any",
    "title": "3  Data vectors in R",
    "section": "Using all() and any()",
    "text": "Using all() and any()\n\nWe use the all() function to check if all elements in a vector are TRUE.\nWe use the any() function to check if any one of the elements in a vector are TRUE.\n\n\nheights\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\nall(heights &gt; 1.60) # TRUE\n\n[1] TRUE\n\nall(heights &gt; 1.70) # FALSE\n\n[1] FALSE\n\nany(heights &gt; 1.70) # TRUE\n\n[1] TRUE\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSuppose a vector named ages holds the ages of a group who want to enter a museum. You want to make sure that there is at least one grownup among them. Which command do you use?\n\nany(ages &gt; 18)\nall(ages &gt; 18)\nany(ages &lt; 18)\nall(ages &lt; 18)\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSuppose a vector named ages holds the ages of a group who want to enter a bar. You want to make sure that everybody is of proper age to drink. Which command do you use?\n\nany(ages &gt; 18)\nall(ages &gt; 18)\nany(ages &lt; 18)\nall(ages &lt; 18)"
  },
  {
    "objectID": "Vectors.html#generating-vectors-with-repeated-elements",
    "href": "Vectors.html#generating-vectors-with-repeated-elements",
    "title": "3  Data vectors in R",
    "section": "Generating vectors with repeated elements",
    "text": "Generating vectors with repeated elements\nThe rep() function can be used to replicate values or vectors a specified number of times.\n\nrep(3,10)\n\n [1] 3 3 3 3 3 3 3 3 3 3\n\n\n\nrep(\"abc\",5)\n\n[1] \"abc\" \"abc\" \"abc\" \"abc\" \"abc\"\n\n\n\nrep(c(1,2,3),5)\n\n [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\n\n\nrep(c(1,2,3),length.out=10)\n\n [1] 1 2 3 1 2 3 1 2 3 1"
  },
  {
    "objectID": "Vectors.html#generating-sequences-with-seq",
    "href": "Vectors.html#generating-sequences-with-seq",
    "title": "3  Data vectors in R",
    "section": "Generating sequences with seq()",
    "text": "Generating sequences with seq()\nThe seq() function generates a vector of numbers in arithmetic progression. It is a generalization of the colon(:) operator.\n\nseq(4,9)  # same as 4:9\n\n[1] 4 5 6 7 8 9\n\n\nUnlike the colon operator, you can specify a step size with the by parameter.\n\nseq(from=12, to=29, by=3)\n\n[1] 12 15 18 21 24 27\n\n\nAlternatively, if you want a fixed number of elements, you can specify the length.out parameter.\n\nseq(from=1.1, to=6, length.out=10)\n\n [1] 1.100000 1.644444 2.188889 2.733333 3.277778 3.822222 4.366667 4.911111\n [9] 5.455556 6.000000\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a sequence of values from 5 down to −11 that progresses in steps of 0.3.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a sequence of length 101 from 0 to \\(\\pi\\)."
  },
  {
    "objectID": "Vectors.html#sorting-a-vector",
    "href": "Vectors.html#sorting-a-vector",
    "title": "3  Data vectors in R",
    "section": "Sorting a vector",
    "text": "Sorting a vector\nThe sort() function returns a vector with elements sorted in increasing order.\n\nsort(heights)\n\nHande   Can   Cem \n 1.62  1.70  1.75 \n\n\nIf you want reverse (decreasing) order, set the decreasing parameter to TRUE.\n\nsort(heights, decreasing = TRUE)\n\n  Cem   Can Hande \n 1.75  1.70  1.62 \n\n\nSuppose we want to sort the weights in a special way: First element is weight of the shortest person, last element is the weight of the tallest person.\nIn order to do that, we compute an ordering.\n\norder(heights)\n\n[1] 3 1 2\n\n\nThis shows that when heights are sorted, element 3 would be in the first location, element 1 in the second location, and element 2 in the last location.\nWe can use this ordering with the weights vector to get what we want.\n\nweights[order(heights)]  # return the weights of people ordered by their heights.\n\nHande   Can   Cem \n   61    65    66 \n\n\nIf you have a named vector, you can sort it by the names:\n\nheights[sort(names(heights))]\n\n  Can   Cem Hande \n 1.70  1.75  1.62 \n\n\n\n\n\n\n\n\nExercise\n\n\n\nConsider the following data\n\n\n\nCountry\nArea\nPopulation\n\n\n\n\nRussia\n17,098,242\n142,257,519\n\n\nUnited States\n9,833,517\n326,625,791\n\n\nChina\n9,596,960\n1,379,302,771\n\n\nBrazil\n8,515,770\n207,353,391\n\n\nAustralia\n7,741,220\n23,232,413\n\n\nIndia\n3,287,263\n1,281,935,911\n\n\nTurkey\n783,562\n80,845,215\n\n\nFrance\n643,801\n67,106,161\n\n\nJapan\n377,915\n126,451,398\n\n\nUnited Kingdom\n243,610\n65,648,100\n\n\n\n\nCreate two vectors area and population that hold the data in the respective columns. Label the elements in each vector with the country name.\nCreate a new vector called density that holds the population density of the countries.\nPrint the names of countries sorted by population density, in descending order (from highest to lowest)."
  },
  {
    "objectID": "Basic plotting.html#simple-scatter-plots",
    "href": "Basic plotting.html#simple-scatter-plots",
    "title": "4  Basic plotting",
    "section": "Simple scatter plots",
    "text": "Simple scatter plots\n\nScatter plots and line plots are created with the plot command. (Use help(plot) for detailed description.)\nSimplest use: plot(y) or plot(x,y).\n\n\nplot(c(1,3,5,4,6))\n\n\n\n\nA plot with separate x and y coordinate vectors\n\nmy_x_values &lt;- c(-2, -1.5, 0, 1.7, 2.3)\nmy_y_values &lt;-  c(1,3,5,4,6)\nplot(my_x_values, my_y_values)"
  },
  {
    "objectID": "Basic plotting.html#plotting-a-mathematical-expression",
    "href": "Basic plotting.html#plotting-a-mathematical-expression",
    "title": "4  Basic plotting",
    "section": "Plotting a mathematical expression",
    "text": "Plotting a mathematical expression\n\nx &lt;- -5:5\ny &lt;- x^2\nplot(x, y)"
  },
  {
    "objectID": "Basic plotting.html#change-the-axis-labels-and-the-title",
    "href": "Basic plotting.html#change-the-axis-labels-and-the-title",
    "title": "4  Basic plotting",
    "section": "Change the axis labels and the title",
    "text": "Change the axis labels and the title\n\nheights &lt;- c(1.70, 1.67, 1.75, 1.62, 1.81)\nweights &lt;- c(65, 70, 66, 61, 85)\nplot(heights, weights, xlab=\"height (m)\", ylab=\"weight (kg)\")\ntitle(\"Weight vs. height\")"
  },
  {
    "objectID": "Basic plotting.html#change-the-marker-shape-and-color",
    "href": "Basic plotting.html#change-the-marker-shape-and-color",
    "title": "4  Basic plotting",
    "section": "Change the marker shape and color",
    "text": "Change the marker shape and color\n\nplot(heights, weights, pch=4, col=\"red\", xlab=\"height (m)\", ylab=\"weight (kg)\")\ntitle(\"Weight vs. height\")\n\n\n\n\nFor details of setting the marker shape, size, and color see this document: https://www.statmethods.net/advgraphs/parameters.html\n\n\n\n\n\n\nExercise\n\n\n\nGiven the variables\nx &lt;- -5:5\ny &lt;- 1 - x^2 / 25\ngenerate the following plot."
  },
  {
    "objectID": "Basic plotting.html#line-plots",
    "href": "Basic plotting.html#line-plots",
    "title": "4  Basic plotting",
    "section": "Line plots",
    "text": "Line plots\n\nx &lt;- -5:5\ny &lt;- x^2\nplot(x,y,type=\"l\")\n\n\n\n\nSuppose we plot the weights of people against their heights:\n\nheights &lt;- c(1.70, 1.67, 1.75, 1.62, 1.81)\nweights &lt;- c(65, 70, 66, 61, 85)\nplot(heights, weights, type=\"l\")\n\n\n\n\nSince the data is not ordered, the line plot is zigzagging around. In this particular case, ordering weights with respect to heights produces a more pleasing plot.\n\nplot(sort(heights), weights[order(heights)], type=\"l\")"
  },
  {
    "objectID": "Basic plotting.html#function-plotting",
    "href": "Basic plotting.html#function-plotting",
    "title": "4  Basic plotting",
    "section": "Function plotting",
    "text": "Function plotting\nPlot the function \\(y(x) = \\mathrm{e}^{-0.1x^2}\\sin(x)\\).\n\nx &lt;- seq(-10, 10, length.out = 201)\ny &lt;- exp(-0.1*x^2)*sin(x)\nplot(x, y, type=\"l\", col=\"darkgreen\")\ntitle(\"A function\")"
  },
  {
    "objectID": "Basic plotting.html#plotting-two-functions-together",
    "href": "Basic plotting.html#plotting-two-functions-together",
    "title": "4  Basic plotting",
    "section": "Plotting two functions together",
    "text": "Plotting two functions together\nPlot the functions \\(y_1(x) = \\mathrm{e}^{-0.1x^2}\\sin(x)\\) and \\(y_2(x) = \\sin(x)\\) on the same graph.\n\nx &lt;- seq(-10,10, length.out = 101)\ny1 &lt;- exp(-0.1*x^2)*sin(x)\ny2 &lt;- sin(x)\nplot(x, y1, type=\"l\", col=\"red\")\npoints(x, y2, type=\"l\", col=\"blue\")\ntitle(\"Two functions\")\n\n\n\n\nThe y-axis limits are set according to the first plot, so the second plot appears cropped. To fix this, let’s set the limits manually.\n\nplot(x, y1, ylim=c(-1.1, 1.1), type=\"l\", col=\"red\")\npoints(x, y2, type=\"l\", col=\"blue\")\ntitle(\"Two functions\")\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nThe Taylor expansion of a function is a polynomial approximation to that function around a chosen point. For example, the Taylor expansion to \\(\\sin(x)\\) around \\(x=0\\) is the infinite series: \\[ \\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\cdots\\].\nWhen we stop the terms at some points, the resulting polynomial becomes an approximation to \\(\\sin(x)\\) around \\(x=0\\). For example, if we use only the first term, our approximation is: \\[\\sin(x)\\approx x\\] If we use the first two terms, the approximation has less error: \\[\\sin(x)\\approx x - \\frac{x^3}{3!}\\] etc.\nPlot the sine function from \\(x=-4\\) to \\(x=4\\) in red, and then plot each approximation, up to four terms, on the same frame. Observe how the subsequent polynomials converge to the sine function."
  },
  {
    "objectID": "Basic plotting.html#histograms",
    "href": "Basic plotting.html#histograms",
    "title": "4  Basic plotting",
    "section": "Histograms",
    "text": "Histograms\nA histogram divides the range of the data into “bins”, displays the count of points in each bin.\n\nx &lt;- c(rep(17,4), rep(18,7), rep(19,5), rep(20,5), rep(21,4))  \n# Remember that rep(17,4) gives (17,17,17,17)\nx\n\n [1] 17 17 17 17 18 18 18 18 18 18 18 19 19 19 19 19 20 20 20 20 20 21 21 21 21\n\n\n\nhist(x, col=\"blue\")\n\n\n\n\nSpecify the break points of the histogram:\n\nhist(x, col=\"red\", breaks=15:22)\n\n\n\n\nShow the density instead of bin counts:\n\nhist(x, col=\"skyblue\", breaks=15:22, freq=FALSE)\n\n\n\n\nThe density values of bars sum up to 1."
  },
  {
    "objectID": "Pseudorandom number generation.html#uniformly-distributed-random-numbers",
    "href": "Pseudorandom number generation.html#uniformly-distributed-random-numbers",
    "title": "5  Pseudorandom number generation",
    "section": "Uniformly distributed random numbers",
    "text": "Uniformly distributed random numbers\nUniformly distributed random numbers are generated with runif(n, min, max). Default parameters are n=1, min=0, max=1.\n\nrunif(20,-1,1) # 20 random numbers, uniformly distributed between -1 and 1.\n\n [1]  0.0434271717 -0.2545901961 -0.8550298712  0.1515010367 -0.4330742215\n [6]  0.8933711154 -0.6796927955  0.0004589334  0.1694160644  0.3009928511\n[11]  0.2048388137  0.0054464517 -0.3716698317 -0.8119168803  0.0464187078\n[16] -0.7662025592  0.4662518837  0.5770013169  0.2459967798 -0.9186255848\n\n\n\nrunif(20,-1,1) # 20 random numbers, uniformly distributed between -1 and 1.\n\n [1] -0.43654619  0.57851000 -0.20333654 -0.14091812 -0.03801497 -0.10647906\n [7] -0.64735658 -0.88589618  0.79982700  0.38114682 -0.28573955  0.11965487\n[13] -0.49397596  0.35485469 -0.03999775  0.25907603 -0.77256892  0.27046182\n[19]  0.76141921 -0.96163945"
  },
  {
    "objectID": "Pseudorandom number generation.html#normally-distributed-random-numbers",
    "href": "Pseudorandom number generation.html#normally-distributed-random-numbers",
    "title": "5  Pseudorandom number generation",
    "section": "Normally distributed random numbers",
    "text": "Normally distributed random numbers\nAnother common distribution is the Normal or Gaussian distribution (a.k.a. the bell curve). Normally distributed random numbers are generated with the rnorm(n,mean,sd) function. Default parameter values are n=1, mean=0, sd=1.\n\nrnorm(20)\n\n [1] -1.7464598 -2.5608446 -1.0940751 -0.5922735 -0.2945351 -0.6309478\n [7]  0.8917938  0.5374663  1.0173756 -1.5275702  0.2170979 -0.1413056\n[13]  1.7290465 -0.6582857 -0.6587658  1.8619994  0.6325903 -0.6783980\n[19]  0.3721694  2.3345917"
  },
  {
    "objectID": "Pseudorandom number generation.html#comparison-of-distributions",
    "href": "Pseudorandom number generation.html#comparison-of-distributions",
    "title": "5  Pseudorandom number generation",
    "section": "Comparison of distributions",
    "text": "Comparison of distributions\n\noptions(repr.plot.width=8, repr.plot.height=3)\nplot(runif(1000,-1,1)); title(\"Uniformly distributed numbers\")\n\n\n\nplot(rnorm(1000)); title(\"Normally distributed numbers, sd=1\")\n\n\n\nplot(rnorm(1000,sd=10)); title(\"Normally distributed numbers, sd=10\")\n\n\n\n\nPlot the histograms of the random samples.\n\nhist(runif(1000,-1,1), breaks=25, main=\"Uniformly distributed numbers\")\n\n\n\nhist(rnorm(1000), breaks=25,main=\"Normally distributed numbers\")\n\n\n\n\nNote that the distributions are not perfectly smooth. The reason is that our random sample is finite. As we draw more and more samples, the histogram will approach the theoretical distribution.\n\nhist(runif(100000,-1,1), breaks=30, main=\"Uniformly distributed numbers\")\n\n\n\nhist(rnorm(100000), breaks=30, main=\"Normally distributed numbers\")"
  },
  {
    "objectID": "Pseudorandom number generation.html#generating-synthetic-data",
    "href": "Pseudorandom number generation.html#generating-synthetic-data",
    "title": "5  Pseudorandom number generation",
    "section": "Generating synthetic data",
    "text": "Generating synthetic data\nBy adding random “noise” to deterministic vectors, we can simulate a real-life data set where the underlying “law” is \\(y=x\\).\n\nx &lt;- seq(0,10, length.out = 101)\ny &lt;- x + rnorm(length(x), sd=0.5)\nplot(x,y)"
  },
  {
    "objectID": "Pseudorandom number generation.html#getting-the-same-random-sequence-every-time",
    "href": "Pseudorandom number generation.html#getting-the-same-random-sequence-every-time",
    "title": "5  Pseudorandom number generation",
    "section": "Getting the same random sequence every time",
    "text": "Getting the same random sequence every time\nIn some cases we want to get the same random sequence in every simulation, so that we can identify and correct errors. For that, we can set the seed of the random number generator to a fixed number.\n\nset.seed(1234)\nrunif(10,-1,1)\n\n [1] -0.77259318  0.24459881  0.21854947  0.24675888  0.72183077  0.28062121\n [7] -0.98100849 -0.53489899  0.33216752  0.02850228\n\nset.seed(1234)\nrunif(10,-1,1)\n\n [1] -0.77259318  0.24459881  0.21854947  0.24675888  0.72183077  0.28062121\n [7] -0.98100849 -0.53489899  0.33216752  0.02850228"
  },
  {
    "objectID": "Pseudorandom number generation.html#choosing-a-vector-element-randomly",
    "href": "Pseudorandom number generation.html#choosing-a-vector-element-randomly",
    "title": "5  Pseudorandom number generation",
    "section": "Choosing a vector element randomly",
    "text": "Choosing a vector element randomly\nThe sample function allows us to selected elements randomly from a given vector.\nBy default, it chooses elements without replacement. So, an element is chosen at most once.\n\nx &lt;- 11:20\nsample(x)\n\n [1] 14 12 17 16 19 20 18 15 13 11\n\n\nTo choose elements with replacement, we set the replace parameter to TRUE.\n\nsample(x, 10, replace = TRUE)\n\n [1] 14 14 15 18 14 18 13 14 20 15\n\n\nCoin toss experiment\n\n\ntosses &lt;- sample(c(\"H\",\"T\"),size=10,replace = TRUE)\ntosses\n\n [1] \"T\" \"T\" \"H\" \"T\" \"H\" \"T\" \"T\" \"T\" \"H\" \"H\"\n\n\nWe throw a coin 10 times. How many heads do we get on average?\nThe number of heads in one experiment (10 throws):\n\ntosses==\"H\"\n\n [1] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE\n\n\n\nsum(tosses==\"H\")\n\n[1] 4\n\n\nThis number changes every time due to the randomness:\n\ntosses &lt;- sample(c(\"H\",\"T\"),10,replace = TRUE)\nsum(tosses==\"H\")\n\n[1] 4\n\n\nIn order to get the expected number of heads, we need to repeat the experiment many times and average over the outcomes. (See “loops” later.)\nSuppose you gamble with a coin: You gain 1 TL if it comes heads, and lose 1 TL otherwise. You repeat the coin toss 5 times. What is your balance at every step of the game?\nOur gain is +1 if heads, and -1 if tails. To simplify the accounting, let us sample from (-1,1) and get the cumulative sum.\n\noutcomes &lt;- sample(c(-1,1), 5, replace=TRUE)\noutcomes\n\n[1] -1  1 -1  1  1\n\ncumsum(outcomes)\n\n[1] -1  0 -1  0  1\n\n\nRepeat the coin toss 100 times. The balance looks as follows.\n\noptions(repr.plot.width=10, repr.plot.height=4)\nx &lt;- cumsum(sample(c(-1,1), 100, replace=TRUE))\nplot(x, type=\"o\")\n\n\n\n\nThis is called a random walk.\nThrowing dice\n\n\nd1 &lt;- sample(1:6, 10, replace=TRUE)\nd2 &lt;- sample(1:6, 10, replace=TRUE)\nd1\n\n [1] 1 2 6 6 3 6 6 3 5 6\n\nd2\n\n [1] 6 4 3 3 1 3 4 3 3 2\n\n\nSimulating the outcome of a pair of dice:\n\nd1 + d2\n\n [1]  7  6  9  9  4  9 10  6  8  8\n\n\nNow throw two dice 1000 times and plot a histogram of the total outcomes.\n\nd1 &lt;- sample(1:6, 100000, replace=TRUE)\nd2 &lt;- sample(1:6, 100000, replace=TRUE)\n\n\nhist(d1+d2, breaks = 1:12)"
  },
  {
    "objectID": "Pseudorandom number generation.html#estimating-pi",
    "href": "Pseudorandom number generation.html#estimating-pi",
    "title": "5  Pseudorandom number generation",
    "section": "Estimating pi",
    "text": "Estimating pi\nSuppose we generate random number pairs \\((x,y)\\) within the square \\(-1\\leq x\\leq 1\\) and \\(-1\\leq y\\leq 1\\). Some of them fall inside the inscribed circle \\(x^2 + y^2 \\leq 1\\).\n\noptions(repr.plot.width=4, repr.plot.height=4)\nx &lt;- runif(100,-1,1)\ny &lt;- runif(100,-1,1)\n# plot the random points:\nplot(x, y, asp=1)\n# plot the unit circle:\nt &lt;- seq(0,2*pi, length.out=100)\nxx &lt;- cos(t)\nyy &lt;- sin(t)\nlines(xx,yy,lwd = 3,col=\"red\")\n\n\n\n\nThe area of the circle is \\(\\pi\\) and the area of the square is 4, so the ratio of points inside the circle to the points inside the square gives an estimate of \\(\\pi/4\\). So, we can approximate \\(\\pi\\) as:\n\n4*sum(x^2 + y^2 &lt;= 1)/length(x)\n\n[1] 3.24\n\n\nWith a new set of random hits, the estimate will differ:\n\nx &lt;- runif(100,-1,1)\ny &lt;- runif(100,-1,1)\n4*sum(x^2 + y^2 &lt; 1)/length(x)\n\n[1] 3.16"
  },
  {
    "objectID": "Pseudorandom number generation.html#exercises",
    "href": "Pseudorandom number generation.html#exercises",
    "title": "5  Pseudorandom number generation",
    "section": "Exercises",
    "text": "Exercises\n\nWrite an R expression that simulates the outcome of the 6/49 Lottery (Sayısal Loto), where one draws 6 numbers from 1, 2, …, 49. Note that the same number cannot appear twice in one drawing.\nGenerate 1000 random numbers, drawn from the normal distribution with standard deviation 2, and another 1000 with standard deviation 0.5. Plot the histogram for each set of numbers. What can you say about the effect of the standard deviation?\nThrow 10 coins and count the number of heads. Repeat this experiment ten times, and find the mean of the number of heads.\nThrow 3 dice 10000 times. Plot the histogram of the outcomes (outcomes should be between 3 and 18)."
  },
  {
    "objectID": "Functions.html#a-first-example",
    "href": "Functions.html#a-first-example",
    "title": "6  Functions",
    "section": "A first example",
    "text": "A first example\nLet us define a function that returns the square of a given number.\n\nsquare &lt;- function(x) {\n    return(x^2)\n}\n\nWe call the function by providing the input value as an argument. The function returns a value, which we can store in a variable.\n\nfoo &lt;- square(3)\nfoo\n\n[1] 9\n\n\nIf we type a function’s name and press Enter, we get back the definition of the function.\n\nsquare\n\nfunction (x) \n{\n    return(x^2)\n}"
  },
  {
    "objectID": "Functions.html#general-syntax-of-function-definition",
    "href": "Functions.html#general-syntax-of-function-definition",
    "title": "6  Functions",
    "section": "General syntax of function definition",
    "text": "General syntax of function definition\nA function can take any number of input arguments. It performs some computations in its body, and generates a return value. The returned value can be any R object (number, string, vector, list, dataframe, etc.)\n&lt;function_name&gt; &lt;- function([&lt;argument_1&gt;, &lt;argument_2&gt;, ...]) {\n    &lt;statements&gt;\n    return(&lt;return_value&gt;)\n}\nThe return statement is optional. The function returns the value of the last expression in its block. So the function square() can also be defined as:\n\nsquare &lt;- function(x) {\n    print(x)\n    x^2\n    }\nsq3 &lt;- square(3)\n\n[1] 3\n\nsq3\n\n[1] 9\n\n\nThe job of the braces {} is to combine several statements into one.\nAs we have only one statement here, braces can be omitted and the function can be stated in one line.\n\nsquare &lt;- function(x) x^2\nsquare(3)\n\n[1] 9"
  },
  {
    "objectID": "Functions.html#function-arguments",
    "href": "Functions.html#function-arguments",
    "title": "6  Functions",
    "section": "Function arguments",
    "text": "Function arguments\nA function can be defined with any number of arguments.\n\nf &lt;- function(x,y,z){\n    return(x + y*z)\n}\nf(1,2,3)\n\n[1] 7\n\n\nIt is possible to change the order of arguments by using the argument names explicitly:\n\nf(z=3,x=1,y=2)\n\n[1] 7\n\n\nYou can even omit some names, and the unnamed arguments will be matched in order.\n\nf(z=3,1,2)\n\n[1] 7"
  },
  {
    "objectID": "Functions.html#return-values",
    "href": "Functions.html#return-values",
    "title": "6  Functions",
    "section": "Return values",
    "text": "Return values\nThe return value of the function can be any R object, such as a number, a vector, a matrix, a list, etc.\n\nsumdiff &lt;- function(x,y){\n    return( c(x+y, x-y) )\n}\n\nsumdiff(5,8)\n\n[1] 13 -3"
  },
  {
    "objectID": "Functions.html#functions-returning-functions",
    "href": "Functions.html#functions-returning-functions",
    "title": "6  Functions",
    "section": "Functions returning functions",
    "text": "Functions returning functions\nA function itself is an R object, therefore we can easily write functions that return functions.\nHere is a function that returns a power function with any order we like:\n\npowerfun &lt;- function(p){\n    return(function(y){return(y^p)})\n}\n# Alternatively:\n# powerfun &lt;- function(p) function(x) x^p\n\nNow we can use this function to generate other functions:\n\nsq &lt;- powerfun(2)\ncube &lt;- powerfun(3)\n\n\nsq\n\nfunction (y) \n{\n    return(y^p)\n}\n&lt;environment: 0x5c68f1cc1cb8&gt;\n\n\nEvaluate functions with input value 5.\n\nsq(5)\n\n[1] 25\n\ncube(5)\n\n[1] 125"
  },
  {
    "objectID": "Functions.html#functions-with-side-effects",
    "href": "Functions.html#functions-with-side-effects",
    "title": "6  Functions",
    "section": "Functions with side effects",
    "text": "Functions with side effects\nSometimes we call a function not for its return value, but for its side effect, such as generating a plot.\n\nplot_random_walk &lt;- function(n){\n    x &lt;- cumsum(sample(c(-1,1), n, replace=TRUE))\n    plot(x, type=\"o\", xlab=\"step number\", ylab=\"Distance from origin\")\n    title(\"A random walk\")\n}\n\n\nset.seed(7652)\nplot_random_walk(100)"
  },
  {
    "objectID": "Functions.html#vectorization-of-functions",
    "href": "Functions.html#vectorization-of-functions",
    "title": "6  Functions",
    "section": "Vectorization of functions",
    "text": "Vectorization of functions\nThe simple function square() defined above happens to work with vector arguments without any modification, because the returned statement x^2 is valid for both numbers and vectors.\n\nsquare &lt;- function(x) x^2\nsquare(c(1,2,3,4,5))\n\n[1]  1  4  9 16 25\n\n\nHowever, functions are not always applicable with vector arguments as they are. For example, a function that returns the sum of integers from 1 up to its argument value:\n\naddupto &lt;- function(n) sum(1:n)\naddupto(10)\n\n[1] 55\n\n\nWhen we call this function with a vector argument, only the first element is taken, and a warning message is issued\n\naddupto(c(10,20)) # Internally it tries sum(1:c(10,20))\n\nWarning in 1:n: numerical expression has 2 elements: only the first used\n\n\n[1] 55\n\n\nIf you want this function to work with vector input, the preferred way in R is to use the built-in sapply function, which maps a function on each element of a vector.\n\nsapply(c(10,20, 30, 40, 50), addupto)\n\n[1]   55  210  465  820 1275"
  },
  {
    "objectID": "Functions.html#default-arguments",
    "href": "Functions.html#default-arguments",
    "title": "6  Functions",
    "section": "Default arguments",
    "text": "Default arguments\nWhen you define a function, you can set some of the arguments to default values. Then you don’t have to specify them at each call.\n\nf &lt;- function(capital, interest_rate=0.1) {\n    capital * (1+interest_rate)\n}\n\nWithout specifying the interest_rate value, 0.1 is assumed.\n\nf(1000)\n\n[1] 1100\n\n\nBut if you want to change it, you can provide it as an extra argument.\n\nf(1000, 0.2)\n\n[1] 1200\n\n\nCalling the function with argument names is usually clearer for the reader.\n\nf(capital = 1000, interest_rate = 0.2)\n\n[1] 1200\n\n\nYou can change the order of the arguments when you use argument names.\n\nf(interest_rate=0.2, capital=1000)\n\n[1] 1200"
  },
  {
    "objectID": "Functions.html#scope-of-variables",
    "href": "Functions.html#scope-of-variables",
    "title": "6  Functions",
    "section": "Scope of variables",
    "text": "Scope of variables\n\nThe value of a variable defined outside a function (a global variable) can be seen inside a function.\nHowever, a variable defined inside a function block is not recognized outside of it.\nWe say that the scope of the variable b is limited to the function f().\n\n\na &lt;- 5 # a global variable\n\nf &lt;- function(){\n    b &lt;- 10 # a local variable\n    cat(\"inside f(): a =\",a,\"b =\",b,\"\\n\")\n}\n\nf()\n\ninside f(): a = 5 b = 10 \n\ncat(\"outside f(): a =\",a,\" \")\n\noutside f(): a = 5  \n\ncat(\"b =\",b)  # raises an error\n\nError: object 'b' not found\n\n\nA local variable temporarily overrides a global variable with the same name.\n\na &lt;- 5 # a global variable\ncat(\"before f(): a =\",a,\"\\n\")\n\nbefore f(): a = 5 \n\nf &lt;- function(){\n    a &lt;- 10 # a local variable\n    cat(\"inside f(): a =\",a,\"\\n\")\n}\n\nf()\n\ninside f(): a = 10 \n\ncat(\"after f(): a =\",a)\n\nafter f(): a = 5"
  },
  {
    "objectID": "Functions.html#assigning-values-to-upper-level-variables",
    "href": "Functions.html#assigning-values-to-upper-level-variables",
    "title": "6  Functions",
    "section": "Assigning values to upper-level variables",
    "text": "Assigning values to upper-level variables\nAlthough the values of variables defined in upper levels are available in lower levels, they cannot be modified in a lower level, because an assignment will create only a local variable with the same name.\nUsing the superassignment operator &lt;&lt;- it is possible to assign to a variable in the higher level.\n\na &lt;- 5\ncat(\"before f(): a =\",a,\"\\n\")\n\nbefore f(): a = 5 \n\nf &lt;- function(){\n    a &lt;&lt;- 10\n    cat(\"inside f(): a =\",a,\"\\n\")\n}\n\nf()\n\ninside f(): a = 10 \n\ncat(\"after f(): a =\",a)\n\nafter f(): a = 10\n\n\nHowever, this is not recommended in general. It cause some subtle errors that are difficult to find. You almost never need this.\nTo modify a global variable, the most transparent way is to assign the function output to it explicitly.\n\na &lt;- 5\ncat(\"before f(): a =\",a,\"\\n\")\n\nbefore f(): a = 5 \n\nf &lt;- function(x) {x+5}\na &lt;- f(a)\ncat(\"after f(): a =\",a)\n\nafter f(): a = 10"
  },
  {
    "objectID": "Functions.html#unspecified-arguments-with-...",
    "href": "Functions.html#unspecified-arguments-with-...",
    "title": "6  Functions",
    "section": "Unspecified arguments with ...",
    "text": "Unspecified arguments with ...\nSome functions take an unlimited number of arguments, e.g. c().\n\nc(1,2,3)\n\n[1] 1 2 3\n\nc(4,2,6,1,3,5,1)\n\n[1] 4 2 6 1 3 5 1\n\n\nThe c() function is defined with an ellipsis (three dots) as the argument list.\n\nhelp(c)\n\nEllipsis has two use cases:\n\nWrite a function that takes any number of arguments (like c() or sum()).\nPass some arguments to another function, called inside the current function\n\nLet’s modify our function for generating and plotting a random walk. It accepts some unspecified arguments represented with the ellipsis, and passes them to plot()\n\nplot_random_walk &lt;- function(n, ...){\n    x &lt;- cumsum(sample(c(-1,1), n, replace=TRUE))\n    plot(x, type=\"o\", ...)\n} \n\nWe can then call the function by specifying only the number of points:\n\noptions(repr.plot.width=10, repr.plot.height=4)\nplot_random_walk(100)\n\n\n\n\nor by specifying plot parameters:\n\nplot_random_walk(100, \n                 pch=4, \n                 col=\"red\", \n                 main=\"A random walk\", \n                 xlab=\"step number\", \n                 ylab=\"displacement\")\n\n\n\n\nThe arguments passed with the ellipsis can be converted to a vector, so we can process them inside the function.\n\ndiff &lt;- function(...) {\n    # returns the difference between the first and the last argument\n    arguments &lt;- c(...)\n    cat(\"Number of arguments = \",length(arguments))\n    arguments[length(arguments)] - arguments[1] # last argument minus first argument\n}\ndiff(1,4,2)\n\nNumber of arguments =  3\n\n\n[1] 1\n\ndiff(1,4,2,6,3,1)\n\nNumber of arguments =  6\n\n\n[1] 0\n\n\nEllipsis arguments can have arbitrary names, and can be converted to a list object (more on lists later).\n\nf &lt;- function(...){\n    args &lt;- list(...)\n    print(args)\n}\nf(a=1, b=3, foo=7654)\n\n$a\n[1] 1\n\n$b\n[1] 3\n\n$foo\n[1] 7654"
  },
  {
    "objectID": "Functions.html#exercises",
    "href": "Functions.html#exercises",
    "title": "6  Functions",
    "section": "Exercises",
    "text": "Exercises\nWrite a function with the name FtoC that takes a temperature measurement in degrees Fahrenheit, and returns the equivalent value in degrees Celsius. Make sure that your function works with vector input, too.\n\nWrite a function with the name bmi that takes two arguments, height and weight, and returns the body-mass index calculated with these argument values. The function should work with vector input, too.\n\nWrite a function named range that takes a vector of numbers, and returns the difference between its minimum and the maximum elements. Test your function with some randomly-generated vectors."
  },
  {
    "objectID": "Conditional execution.html",
    "href": "Conditional execution.html",
    "title": "7  Conditional execution",
    "section": "",
    "text": "Exercises\nA particular homework is graded with A, B, C, or D according to the following scheme:\nWrite an R program that reads the score from the user and prints the corresponding grade.\nA bank has a variable interest rate depending on the account balance. The interest rate is 20% for balances less than 10,000 TL, 22% for balances up to 100,000 TL, and 25% for higher balances.\nWrite a function named interest that takes the current balance as its parameter, and returns the interest due according to this scheme."
  },
  {
    "objectID": "Conditional execution.html#the-if-else-statement",
    "href": "Conditional execution.html#the-if-else-statement",
    "title": "7  Conditional execution",
    "section": "The if-else statement",
    "text": "The if-else statement\nIn the example above, the program responds only when the grade is greater than 50.\nSuppose we want to get a response for any grade, either “Passed” or “Failed”.\nOne way:\n\npassed &lt;- function(grade){\n    if (grade&gt;50) {\n        retval &lt;- \"Passed!\"\n    }\n    if (grade &lt;= 50) {\n        retval &lt;- \"Failed\"\n    }\n    retval\n}\npassed(45)\n\n[1] \"Failed\"\n\n\nBetter way: Using the else statement together with if.\n\n\n\nimage.png\n\n\n\ngrade &lt;- 55\nif (grade&gt;50) \"Passed!\" else \"Failed.\"\n\n[1] \"Passed!\""
  },
  {
    "objectID": "Conditional execution.html#if-else-one-liner",
    "href": "Conditional execution.html#if-else-one-liner",
    "title": "7  Conditional execution",
    "section": "if-else one liner",
    "text": "if-else one liner\nThe if-else statement is actually a function, returning the last statement in the executed block. We can use this feature to capture the output of the if-else and store it in a variable.\n\ngrade &lt;- 45\nstatus &lt;- if (grade&gt;50) \"Passed\" else \"Failed\"\nstatus\n\n[1] \"Failed\""
  },
  {
    "objectID": "Conditional execution.html#relational-operators",
    "href": "Conditional execution.html#relational-operators",
    "title": "7  Conditional execution",
    "section": "Relational operators",
    "text": "Relational operators\nIn the examples above, we have used the &gt; (greater than) operator. There are several such operators for comparing values. Each of these expressions return Boolean (True/False) values.\n\n\n\noperation\nmeaning\n\n\n\n\na == b\na is equal to b\n\n\na != b\na is not equal to b\n\n\na &lt; b\na is less than b\n\n\na &lt;= b\na is less than or equal to b\n\n\na &gt; b\na is greater than b\n\n\na &gt;= b\na is greater than or equal to b\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\nEquality check is done with two equal signs.\nMind the syntax: &lt;= is correct, =&lt; is incorrect.\nWith strings, these operations test for alphabetical ordering\n\n\n\n\n2 &lt; 5\n\n[1] TRUE\n\n2 &gt;= 5\n\n[1] FALSE\n\n1 == 2\n\n[1] FALSE\n\n1 != 2\n\n[1] TRUE\n\n\nWhen used with vectors, these operations are applied elementwise, and a Boolean vector is returned.\n\nx &lt;- c(2,3,4)\ny &lt;- c(6,1,4)\nx &gt;= y\n\n[1] FALSE  TRUE  TRUE\n\n\nNote that the if() statement expects a single True/False value as an argument. When it receives a Boolean vector, it uses only the first element to make the comparison.\n\nif (x&gt;=y) \"foo\" else \"bar\"\n\nError in if (x &gt;= y) \"foo\" else \"bar\": the condition has length &gt; 1\n\n\nIf you want to check if the relation holds for every pair of elements in x and y, you should use the all() function.\n\nx &lt;- c(2,3,4)\ny &lt;- c(1,0,5)\nx&gt;=y\n\n[1]  TRUE  TRUE FALSE\n\nall(x&gt;=y)\n\n[1] FALSE\n\nif(all(x&gt;=y)) \"foo\" else \"bar\"\n\n[1] \"bar\"\n\nany(x&gt;=y)\n\n[1] TRUE\n\nif(any(x&gt;=y)) \"foo\" else \"bar\"\n\n[1] \"foo\""
  },
  {
    "objectID": "Conditional execution.html#checking-the-equality-of-floating-point-numbers",
    "href": "Conditional execution.html#checking-the-equality-of-floating-point-numbers",
    "title": "7  Conditional execution",
    "section": "Checking the equality of floating-point numbers",
    "text": "Checking the equality of floating-point numbers\nFloating-point numbers are numbers with a decimal point. They are stored in a special way in computer systems for efficiency and accuracy in calculations. However, this special way causes some errors in representations(truncation error and roundoff error). Numbers that should be mathematically equal can turn out to be nonequal in the computer.\nExample:\n\nx &lt;- 10.1 - 10\ny &lt;- 0.1\nx == y\n\n[1] FALSE\n\n\nEven though x and y are mathematically equal, their representations in the computer’s memory are not. For this reason, the equality check returns FALSE\nTo check the equality of two floating-point numbers, programmers check if their difference is smaller than a threshold:\n\nabs(x-y)&lt;1e-15\n\n[1] TRUE\n\n\nThe value 1e-15 is the notation for \\(10^{-15}\\). It is about the same as the machine precision, which is the error the computer makes when representing a real number.\nR has a built-in function all.equal() that checks for almost-equality, within the errors of the machine.\n\nall.equal(x,y)\n\n[1] TRUE"
  },
  {
    "objectID": "Conditional execution.html#logical-operators",
    "href": "Conditional execution.html#logical-operators",
    "title": "7  Conditional execution",
    "section": "Logical operators",
    "text": "Logical operators\nOften, we need to combine two or more conditions in order to get a more complicated condition. For example\nIF (you are younger than 18) AND (you are male)\n    THEN (you are a boy).\nIF (you have heart condition) OR (you are pregnant) \n    THEN (you should not drink alcohol).\nIF (you are older than 18) AND (you are NOT married) \n    THEN (you can get married).\nEvery logical condition can be expressed by combining AND, OR, and NOT operators.\n\n\n\noperation\nmeaning\n\n\n\n\na & b\nBoolean AND for vectors\n\n\na | b\nBoolean OR for vectors\n\n\n!a\nBoolean negation\n\n\na && b\nBoolean AND for scalars\n\n\na || b\nBoolean OR for scalars\n\n\n\n\nx &lt;- c(T, F, T, F)\ny &lt;- c(F, T, T, F)\nx & y\n\n[1] FALSE FALSE  TRUE FALSE\n\nx | y\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n!x\n\n[1] FALSE  TRUE FALSE  TRUE\n\n\nAs seen above, & and | operators can take vector operands, and return a vector of Booleans.\nIn contrast, && and || operators work with scalars and return only a single Boolean value. If vectors are given to them as operands, they use only the first elements of these vectors.\n\n(1&gt;2) && (3&lt;5)\n\n[1] FALSE\n\n\n\nc(T,F) || c(F,F)  # same as T || F\n\nError in c(T, F) || c(F, F): 'length = 2' in coercion to 'logical(1)'\n\n\nThis distinction exists because if() should take only a single Boolean value for comparison. It would not be correct to use & with if, though it will give us an answer based on the first elements.\n\nx &lt;- c(TRUE, FALSE, TRUE)\ny &lt;- c(TRUE, TRUE, FALSE)\nif (x && y) \"Both True!\"\n\nError in x && y: 'length = 3' in coercion to 'logical(1)'\n\n\n\nif (x & y) \"Both TRUE\"\n\nError in if (x & y) \"Both TRUE\": the condition has length &gt; 1\n\n\n\n\n\n\n\n\nExercise\n\n\n\nThe “top hat function” has the value 1 between 0 and 1, and 0 everywhere else.\nWhich of the following statements can NOT be used to get the value of the top hat function? (Can be more than one.)\nA. if (x&gt;=0) { if (x&lt;=1) 1} else 0\nB. if (x&gt;=0) { if (x&lt;=1) 1 else 0} else 0\nC. if (x&gt;=0 && x&lt;=1) 1 else 0\nD. if (x&lt;0 && x&gt;1) 0 else 1"
  },
  {
    "objectID": "Conditional execution.html#vectorized-if-else-the-ifelse-function",
    "href": "Conditional execution.html#vectorized-if-else-the-ifelse-function",
    "title": "7  Conditional execution",
    "section": "Vectorized if-else: The ifelse() function",
    "text": "Vectorized if-else: The ifelse() function\nConsider the following task: We have a vector composed of the ages of people.\n\nages &lt;- c(Ali=16, Fatma=9, Mehmet=65, Elif=41, Zehra=12)\nages\n\n   Ali  Fatma Mehmet   Elif  Zehra \n    16      9     65     41     12 \n\n\nBased on this, we want to create a vector with two values: \"Child\" or \"Adult\".\n   Ali  Fatma Mehmet   Elif  Zehra \n Child  Child  Adult  Adult  Child \nUsing if-else with this vector does not work because it expects a single True/False value.\n\nif(ages&lt;18) \"Child\" else \"Adult\"\n\nError in if (ages &lt; 18) \"Child\" else \"Adult\": the condition has length &gt; 1\n\n\nTo get a vector consisting of desired values, we use the vectorized function ifelse().\nFirst note that ages&lt;18 gives a vector of boolean values:\n\nages&lt;18\n\n   Ali  Fatma Mehmet   Elif  Zehra \n  TRUE   TRUE  FALSE  FALSE   TRUE \n\n\nThe following ifelse function takes a boolean vector, returns a new vector with \"Child\" for true, \"Adult\" for false:\n\nifelse(ages&lt;18, \"Child\",\"Adult\")\n\n    Ali   Fatma  Mehmet    Elif   Zehra \n\"Child\" \"Child\" \"Adult\" \"Adult\" \"Child\" \n\n\nThis could also be done with vector filtering, albeit in a more clumsy way.\n\ntemp &lt;- ages # copy ages to new vector\ntemp[1:length(temp)] &lt;- \"Adult\"  # replace all elements with \"Adult\"\ntemp[ages&lt;18] &lt;- \"Child\" # replace some elements with \"Child\"\ntemp\n\n    Ali   Fatma  Mehmet    Elif   Zehra \n\"Child\" \"Child\" \"Adult\" \"Adult\" \"Child\""
  },
  {
    "objectID": "Conditional execution.html#nested-if-else-statements",
    "href": "Conditional execution.html#nested-if-else-statements",
    "title": "7  Conditional execution",
    "section": "Nested if-else statements",
    "text": "Nested if-else statements\nAny kind of statements can be put into an if-block, including other if statements. This allows us to make successive decisions. For example, here is a code that prints the level of a grade.\n\nx &lt;- 20\nif (x&gt;75) {\n    \"Top\"\n} else {\n    if (x&gt;50) {\n     \"Middle\"\n    } else {\n        if (x&gt;25) {\"Low\"\n        } else { \"Bottom\" }\n\nError in parse(text = input): &lt;text&gt;:10:0: unexpected end of input\n8:         if (x&gt;25) {\"Low\"\n9:         } else { \"Bottom\" }\n  ^\n\n\nThe same structure can also be written in one line, but it would not be very readable.\n\nx &lt;- 25\nif (x&gt;75) \"Top\" else if (x&gt;50) \"Middle\" else if (x&gt;25) \"Low\" else \"Bottom\"\n\n[1] \"Bottom\"\n\n\nHere is a nested if-else structure that determines the region where a given point belongs.\n\nx &lt;- 2\ny &lt;- -3\nif(x&gt;0) {\n    if(y&gt;0) {\n        \"upper right\"\n    } else {  # y&lt;=0\n        \"lower right\"\n    }\n} else {  # x&lt;=0\n    if(y&gt;0) {\n        \"upper left\"\n    } else { # y&lt;=0\n        \"lower left\"\n    }\n}\n\n[1] \"lower right\"\n\n\nAnother version of the same program:\n\nx &lt;- 5\ny &lt;- -3\nypos &lt;- if (y&gt;0) \"upper\" else \"lower\"\nxpos &lt;- if (x&gt;0) \"right\" else \"left\"\ncat(ypos,xpos)\n\nlower right\n\n\nAs another example, let us read an integer, and produce a response according to whether it is negative, divisible by two, or divisible by three.\n\nn &lt;- 6\nif (n&lt;0) {\n    \"Negative.\"\n} else {\n    if (n%%2 == 0) {\n        \"Divisible by 2.\"\n    } else {\n        if (n%%3 == 0) {\n            \"Divisible by 3.\"\n        } else {\n            \"Nonnegative, not divisible by 2 or 3.\"\n        }\n    }\n}\n\n[1] \"Divisible by 2.\""
  },
  {
    "objectID": "Conditional execution.html#example-1",
    "href": "Conditional execution.html#example-1",
    "title": "7  Conditional execution",
    "section": "Example",
    "text": "Example\nConsider the continuous function\n\\[ f(x) = \\begin{cases}\n      x^2 + 2x + 3 & x\\lt 0 \\\\\n      x+3 & 0\\leq x \\lt 2 \\\\\n      x^2 + 4x -7 & 2\\leq x\n   \\end{cases}\\]\n\nWrite a function that takes a single numeric argument x. The function should return the value of the function f(x).\nModify the function so that it takes a vector argument x, and returns a vector consisting of the function values evaluated at each element of the vector x.\nPlot the function f (x) for −3 &lt; x &lt; 3.\n\n\n\nThe function that takes a single number \\(x\\) and returns the number \\(f(x)\\).\n\n\nmyfunc &lt;- function(x) {\n    if(x&lt;0){\n        return (x^2 + 2*x + 3)\n    }\n    else if (x&lt;2){\n        return (x + 3)\n    }\n    else {\n        return (x^2 + 4*x - 7)\n    }\n}\n\nTest the function with values from different regions and verify that they give the correct answer.\n\nmyfunc(-1)\n\n[1] 2\n\nmyfunc(1)\n\n[1] 4\n\nmyfunc(3)\n\n[1] 14\n\n\n\nmyfunc(c(-1,1,3))\n\nError in if (x &lt; 0) {: the condition has length &gt; 1\n\n\n\nVectorize the function: Make the function accept a vector input and return a vector.\n\nIt is possible to do this with sapply, without modifying the original function definition.\n\nsapply(c(-1,1,3), myfunc)\n\n[1]  2  4 14\n\n\nHowever, if we need a genuinely vectorized function, we can redefine the function using ifelse.\n\nmyfunc_vec &lt;- function(x) {\n    ifelse(x&lt;0, x^2 + 2*x + 3, ifelse(x&lt;2, x+3, x^2 + 4*x - 7))\n}\n\n\nmyfunc_vec(c(-1,1,3))\n\n[1]  2  4 14\n\n\n\nPlot the function using the vectorized function definition.\n\n\nx &lt;- seq(-3,3,length.out = 101)\nplot(x, myfunc_vec(x), type=\"l\")\n\n\n\n\nThe same can also be achieved by wrapping sapply around the function defined in (a).\n\nplot(x, sapply(x,myfunc), type=\"l\")"
  },
  {
    "objectID": "Loops.html#the-while-loop",
    "href": "Loops.html#the-while-loop",
    "title": "8  Repetition structures",
    "section": "The while loop",
    "text": "The while loop\nSimple example: Print the squares of 1, 2, … 10.\nWithout loops, it would be cumbersome:\n\ni &lt;- 1\ncat(i,i^2,\"\\n\")\n\n1 1 \n\ni &lt;- i+1\ncat(i,i^2, \"\\n\")\n\n2 4 \n\ni &lt;- i+1\ncat(i,i^2, \"\\n\")\n\n3 9 \n\n\nWith loops, it is shorter and more flexible:\n\ni &lt;- 1 # initialization\nwhile (i&lt;=10) {  # condition\n    cat(i,i^2,\"\\n\")\n    i &lt;- i+1  # update\n}\n\n1 1 \n2 4 \n3 9 \n4 16 \n5 25 \n6 36 \n7 49 \n8 64 \n9 81 \n10 100"
  },
  {
    "objectID": "Loops.html#general-structure-of-the-while-loop",
    "href": "Loops.html#general-structure-of-the-while-loop",
    "title": "8  Repetition structures",
    "section": "General structure of the while loop",
    "text": "General structure of the while loop\n&lt;initialization&gt;\nwhile( &lt;condition&gt; ) {\n    &lt;statements&gt;\n    &lt;update variables&gt;\n}\n\n&lt;condition&gt; is a Boolean expression, usually involving existing variables.\nIf &lt;condition&gt; is true the block is executed (this is called one iteration).\nWhen the block is completed, the condition is reevaluated and the block is re-executed if necessary."
  },
  {
    "objectID": "Loops.html#updating-the-variables",
    "href": "Loops.html#updating-the-variables",
    "title": "8  Repetition structures",
    "section": "Updating the variables",
    "text": "Updating the variables\n\nIn general, we want the condition to become false eventually, otherwise the loop never ends.\nThe variables of the program must be updated within the block to ensure that.\n\n\ni &lt;- 1 # initialization\nwhile (i&lt;=10) {  # condition\n    cat(i,i^2,\"\\n\")\n    i &lt;- i+1  # update\n}\n\n1 1 \n2 4 \n3 9 \n4 16 \n5 25 \n6 36 \n7 49 \n8 64 \n9 81 \n10 100 \n\n\n\nExample\nFind the sum of elements in a vector\nWithout a loop:\n\nmydata &lt;- c(-1,4,2,5,1,4,6,2,0)\ntotal &lt;- 0\ni &lt;- 1\ntotal &lt;- total + mydata[i]\ni &lt;- i+1\ntotal &lt;- total + mydata[i]\ni &lt;- i+1\ntotal &lt;- total + mydata[i]\n#...\n\nWith a loop\n\nmydata &lt;- c(-1,4,2,5,1,4,6,2,0)\ntotal &lt;- 0\ni &lt;- 1\nwhile (i&lt;=length(mydata)){\n    total &lt;- total + mydata[i]\n    cat(i, mydata[i], total, \"\\n\")\n    i &lt;- i + 1\n}\n\n1 -1 -1 \n2 4 3 \n3 2 5 \n4 5 10 \n5 1 11 \n6 4 15 \n7 6 21 \n8 2 23 \n9 0 23 \n\ntotal\n\n[1] 23\n\n\n\n\nExample\nFind the maximum element in a vector\n\nmydata &lt;- c(1,4,2,5,1,4,6,2,0,7,3,1)\nlargest &lt;- mydata[1]\ni &lt;- 2\nwhile (i&lt;=length(mydata)){\n    if(mydata[i]&gt;largest)\n        largest &lt;- mydata[i]\n    i &lt;- i + 1\n}\nlargest\n\n[1] 7"
  },
  {
    "objectID": "Loops.html#the-for-loop",
    "href": "Loops.html#the-for-loop",
    "title": "8  Repetition structures",
    "section": "The for loop",
    "text": "The for loop\n\nAlternative to while that does not take a Boolean condition.\nThe for statement takes elements from a vector one by one, and runs the loop body with the current element.\nThe loop terminates when the last element is used.\n\n\nfor(i in c(2,-1,5,3,7)) {\n    cat(i,i^2,\"\\n\")\n}\n\n2 4 \n-1 1 \n5 25 \n3 9 \n7 49 \n\n\nIn many cases for is simpler than while, especially when you need to iterate over the elements of a vector.\n\n\n\n\n\n\nExample: Add up the elements in a vector with for:\n\n\n\n\nmydata &lt;- c(-1,4,2,5,1,4,6,2,0)\ntotal &lt;- 0\nfor (d in mydata)\n    total &lt;- total + d\ntotal\n\n[1] 23\n\n\nThe line for(d in mydata) means that d first gets mydata[1], then mydata[2], etc, until all the elements in mydata are used up.\nFind the maximum value in a vector with a for loop.\n\nmydata &lt;- c(1,4,2,5,1,4,6,2,0)\nlargest &lt;- mydata[1]\nfor(d in mydata) \n    if(d&gt;largest) \n        largest &lt;- d\nlargest\n\n[1] 6\n\n\n\n\nNote that by using for you don’t need to keep track of the element index. This is OK if you are interested in the element values only, but it might not work if the element’s location is relevant.\n\n\n\n\n\n\nExample: Find the index of the maximum value in a vector.\n\n\n\n\nmydata &lt;- c(1,4,2,5,1,4,6,2,0)\nlargest &lt;- mydata[1]\nlargest_index &lt;- 1\ni &lt;- 2\nwhile (i&lt;=length(mydata)){\n    if(mydata[i]&gt;largest){\n        largest_index &lt;- i\n        largest &lt;- mydata[i]\n    }\n    i &lt;- i + 1\n}\n\ncat(largest_index, largest)\n\n7 6\n\n\nRewrite this as a function\n\ngetmax &lt;- function(x) {\n    largest &lt;- x[1]\n    largest_index &lt;- 1\n    i &lt;- 2\n    while (i&lt;=length(x)){\n        if(x[i]&gt;largest){\n            largest_index &lt;- i\n            largest &lt;- x[i]\n        }\n        i &lt;- i + 1\n    }\n    c(largest_index, largest)\n}\ngetmax(mydata)\n\n[1] 7 6"
  },
  {
    "objectID": "Loops.html#the-break-statement",
    "href": "Loops.html#the-break-statement",
    "title": "8  Repetition structures",
    "section": "The break statement",
    "text": "The break statement\nWhen the program encounters a break statement, it terminates the loop. The remainder of the block is skipped over.\n\ni &lt;- 1\nwhile(i&lt;=10){\n    if(i==7)\n        break\n    cat(\"i =\",i,\"\\n\")\n    i &lt;- i+1\n}\n\ni = 1 \ni = 2 \ni = 3 \ni = 4 \ni = 5 \ni = 6 \n\ncat(\"Goodbye\")\n\nGoodbye\n\n\nSame with a for loop\n\nfor(i in 1:10){\n    if (i==7)\n        break\n    cat(\"i =\",i,\"\\n\")\n}\n\ni = 1 \ni = 2 \ni = 3 \ni = 4 \ni = 5 \ni = 6 \n\n\n\n\n\n\n\n\nExample: Determine if a given number is prime\n\n\n\n\nn &lt;- 87659867241\nprime &lt;- TRUE # assume prime unless proven otherwise\ni &lt;- 2\nwhile (i &lt;= sqrt(n)){  # check only up to the square root of n\n    if (n%%i == 0){\n        prime &lt;- FALSE\n        break\n    }\n    i &lt;- i+1\n}\nif (!prime) cat(n,\"is not prime;\",i,\"divides it.\")\n\n87659867241 is not prime; 3 divides it.\n\n\nRewrite this as a function\n\nisprime &lt;- function(n) {\n    prime &lt;- TRUE # assume prime unless proven otherwise\n    i &lt;- 2\n    while (i*i &lt;= n){  # check only up to the square root of n\n        if (n%%i == 0){\n            prime &lt;- FALSE\n            break\n        }\n        i &lt;- i+1\n    }\n    prime\n}\n\nisprime(87659867241)\n\n[1] FALSE"
  },
  {
    "objectID": "Loops.html#the-next-statement",
    "href": "Loops.html#the-next-statement",
    "title": "8  Repetition structures",
    "section": "The next statement",
    "text": "The next statement\n\nTakes the program flow to the beginning of the loop.\nSkips over the remaining statements.\n\n\ni&lt;-0\nwhile(i&lt;=10){\n    i &lt;- i+1\n    if( i%%3==0 )\n        next\n    cat(i, \"\")\n}\n\n1 2 4 5 7 8 10 11 \n\n\nCaution: If the update statement is located after next, the loop may not terminate.\n\ni&lt;-1\nwhile(i&lt;=10){\n    if( i%%3==0 )\n        next\n    cat(i, \"\")\n    i &lt;- i+1\n}\n\n\n\n\n\n\n\nExample: Print the digits of a positive number\n\n\n\n\nx &lt;- 1764502\nwhile (x&gt;0){\n    lastdig &lt;- x%%10\n    x &lt;- floor( x/10 )\n    cat(lastdig,\"\\n\")\n}\n\n2 \n0 \n5 \n4 \n6 \n7 \n1 \n\n\nCollect into a vector:\n\nx &lt;- 1764502\nv &lt;- c()\nwhile (x&gt;0){\n    v &lt;- c(x%%10, v)\n    x &lt;- floor( x/10 )\n}\nv\n\n[1] 1 7 6 4 5 0 2"
  },
  {
    "objectID": "Loops.html#the-repeat-loop",
    "href": "Loops.html#the-repeat-loop",
    "title": "8  Repetition structures",
    "section": "The repeat loop",
    "text": "The repeat loop\n\nThe repeat statement provides an infinite loop.\nDoes not take a test. To end the loop, use break.\n\n\ni &lt;- 1\nrepeat {\n    i &lt;- i + 3\n    cat(i,\"\")\n    if(i&gt;10) break\n}\n\n4 7 10 13 \n\n\nThe next statement works in the same way in repeat loops.\n\ni &lt;- -2\nrepeat {\n    i &lt;- i + 1\n    if (i%%3==0) next\n    cat(i,\"\")\n    if(i&gt;10) break\n}\n\n-1 1 2 4 5 7 8 10 11 \n\n\n\n\n\n\n\n\nWhich type of loop should I use?\n\n\n\n\nwhile is the most general one.\nrepeat is the same as while(TRUE).\nfor is more convenient when going over sequences such as vectors."
  },
  {
    "objectID": "Loops.html#nested-loops",
    "href": "Loops.html#nested-loops",
    "title": "8  Repetition structures",
    "section": "Nested loops",
    "text": "Nested loops\nA loop body can contain anything, including other loops.\n\nfor (i in 1:4) {\n    cat(\"i =\",i,\"\\n\")\n    for (j in c(7,8,9))\n        cat(\"   i+j =\",i+j,\"\\n\")\n}\n\ni = 1 \n   i+j = 8 \n   i+j = 9 \n   i+j = 10 \ni = 2 \n   i+j = 9 \n   i+j = 10 \n   i+j = 11 \ni = 3 \n   i+j = 10 \n   i+j = 11 \n   i+j = 12 \ni = 4 \n   i+j = 11 \n   i+j = 12 \n   i+j = 13 \n\n\n\n\n\n\n\n\nExample: Print a triangle of stars with size 5.\n\n\n\n*\n**\n***\n****\n*****\n\nnlines &lt;- 5\nfor (line in 1:nlines){\n    for (col in 1:line)\n        cat(\"*\")\n    cat(\"\\n\")\n}\n\n*\n**\n***\n****\n*****\n\n\n\n\n\n\n\n\n\n\nExample: Simple bar chart\n\n\n\nGiven a vector x with positive integer entries, print x[l] stars for each line l.\n\nx &lt;- c(5,2,8,5,1,4,7,10,3)\nfor (line in 1:length(x)){\n    for (col in 1:x[line])\n        cat(\"*\")\n    cat(\"\\n\")\n}\n\n*****\n**\n********\n*****\n*\n****\n*******\n**********\n***\n\n\n\n\n\n\n\n\n\n\nExample: All possible pairs from two vectors\n\n\n\nWrite a function that takes two vectors and prints products of all possible pairs from these vectors.\npair_product( 2:3, 7:9 )    \n2 * 7 = 14 \n2 * 8 = 16 \n2 * 9 = 18 \n3 * 7 = 21 \n3 * 8 = 24 \n3 * 9 = 27 \nIn complicated problems, it is best to start with the simplest case and gradually add features.\nFirst, take only two numbers and display their product:\n\na &lt;- 2\nb &lt;- 7\ncat(a, \"*\", b, \"=\", a*b, \"\\n\")\n\n2 * 7 = 14 \n\n\nNext, make one parameter a vector, and “wrap a loop” around cat().\n\na &lt;- 2\nb_vector &lt;- c(7,3,8)\nfor (b in b_vector){\n    cat(a, \"*\", b, \"=\", a*b, \"\\n\")    \n}\n\n2 * 7 = 14 \n2 * 3 = 6 \n2 * 8 = 16 \n\n\nFinally, make the other factor a vector and wrap an outer loop around the existing loop.\n\npair_product &lt;- function(a_vector, b_vector){\n    for (a in a_vector){\n        for (b in b_vector){\n            cat(a, \"*\", b, \"=\", a*b, \"\\n\")\n        }\n    }\n}\npair_product(c(2,3,-1),c(7,3,8,5))\n\n2 * 7 = 14 \n2 * 3 = 6 \n2 * 8 = 16 \n2 * 5 = 10 \n3 * 7 = 21 \n3 * 3 = 9 \n3 * 8 = 24 \n3 * 5 = 15 \n-1 * 7 = -7 \n-1 * 3 = -3 \n-1 * 8 = -8 \n-1 * 5 = -5 \n\n\n\n\n\n\n\n\n\n\nExample: List Pythagorean triples\n\n\n\nA Pythagorean triple consists of three integers a,b,c such that \\(a^2 + b^2 = c^2\\) holds. Let us determine all Pythagorean triplets such that \\(a,b\\leq 100\\).\n\nfor (a in 1:100)\n    for(b in b:100)\n        for(c in b:142) # why 142? Max value of a^2+b^2\n            if (a*a + b*b == c*c)\n                cat(a,b,c,\"\\n\")\n\n75 100 125 \n\n\nThe output above shows some triples such as 3 4 5 and 4 3 5, which are really not different. How do we remove such repetitions?"
  },
  {
    "objectID": "Loops.html#performance-of-vectorized-operations-and-loops",
    "href": "Loops.html#performance-of-vectorized-operations-and-loops",
    "title": "8  Repetition structures",
    "section": "Performance of vectorized operations and loops",
    "text": "Performance of vectorized operations and loops\n\nMany tasks involve applying looping over vector elements.\nR has built-in vectorized functions for these tasks, but we can implement our own with loops.\nConsider adding two vectors and assigning the result on a third:\n\n\nx &lt;- c(1,2,3)\ny &lt;- c(4,5,6)\nz &lt;- x + y\nz\n\n[1] 5 7 9\n\n\nAlternative way by using a for loop\n\nz &lt;- vector(length=length(x))\nfor(i in 1:length(x))\n    z[i] &lt;- x[i] + y[i]\nz\n\n[1] 5 7 9\n\n\nLet’s measure the time that the computer takes for each operation. We use large vectors so that we can see the time difference clearly.\n\nx &lt;- runif(1000000)\ny &lt;- runif(1000000)\nsystem.time(z &lt;- x+y) # Time taken by vectorized addition \n\n   user  system elapsed \n  0.003   0.002   0.005 \n\n\n\nz &lt;- vector(length=1000000)\nsystem.time(for(i in 1:length(x)) z[i] &lt;- x[i] + y[i]) # time taken by explicit loop.\n\n   user  system elapsed \n  0.088   0.004   0.093 \n\n\n\nThere is a large difference between execution times.\nThis is due to the implementation of R: The for() loop, the : operator, the index operator [ are all function calls, which slows the code.\nVectorized functions are written with C: They run fast.\nWhen dealing with large data, use vectorized functions instead of a loop, whenever possible."
  },
  {
    "objectID": "Loops.html#further-examples",
    "href": "Loops.html#further-examples",
    "title": "8  Repetition structures",
    "section": "Further examples",
    "text": "Further examples\n\nMoving average\nMoving averages are a way to reduce fluctuations in data. For example, the 2-element sample moving average of a vector \\(v\\) with \\(n\\) elements is defined as\n\\[ \\left(\\frac{v_1+v_2}{2},\\frac{v_2+v_3}{2},\\frac{v_3+v_4}{2}, \\ldots, \\frac{v_{n-1}+v_n}{2}\\right)\\]\nLet’s generate some synthetic data with an upward trend and some random noise.\n\ndata &lt;- cumsum(sample(c(-1,2),size = 100, replace=TRUE))\nplot(data, type=\"l\")\n\n\n\n\n\nmovav &lt;- vector(length=length(data)-1)\nfor(i in 1:length(data)-1)\n    movav[i] &lt;- (data[i] + data[i+1])/2\n\n\nplot(data, type=\"l\")\nlines(movav, col=\"red\")\n\n\n\n\nImplement this in vectorized form:\n\nmovav &lt;- (data[1:length(data)-1] + data[2:length(data)])/2\n\n\n\nFibonacci sequence\nA Fibonacci sequence starts with 1 and 1, and each new value is the sum of the two previous values. Formally: \\[\\begin{eqnarray}\nF_1 &=& 1\\\\\nF_2 &=& 1\\\\\nF_{n} &=& F_{n-1} + F_{n-2}\n\\end{eqnarray}\\]\nEach number in this sequence is called a Fibonacci number. Let us write R code that displays the first 20 Fibonacci numbers.\n\nf1 &lt;- 1\nf2 &lt;- 1\nfor (i in 3:20){\n    temp &lt;- f1\n    f1 &lt;- f2\n    f2 &lt;- f2 + temp\n    cat(f2,\"\\n\")\n}\n\n2 \n3 \n5 \n8 \n13 \n21 \n34 \n55 \n89 \n144 \n233 \n377 \n610 \n987 \n1597 \n2584 \n4181 \n6765 \n\n\n\n\nCompound interest\n\naccount_balance &lt;- 10000\ninterest_rate &lt;- 0.1\nyears &lt;- 10\nbalance_vec &lt;- account_balance\nfor (y in 1:years){\n    account_balance &lt;- account_balance * (1+interest_rate)\n    balance_vec &lt;- c(balance_vec, account_balance)\n    cat(\"After\",y,\"years your account balance is\",account_balance,\"\\n\")\n}\n\nAfter 1 years your account balance is 11000 \nAfter 2 years your account balance is 12100 \nAfter 3 years your account balance is 13310 \nAfter 4 years your account balance is 14641 \nAfter 5 years your account balance is 16105.1 \nAfter 6 years your account balance is 17715.61 \nAfter 7 years your account balance is 19487.17 \nAfter 8 years your account balance is 21435.89 \nAfter 9 years your account balance is 23579.48 \nAfter 10 years your account balance is 25937.42 \n\n\n\n\nSeries sum\nEvaluate the sum \\[\\sum_{i=1}^{n} 2^{-i} = \\frac{1}{2} + \\frac{1}{4} +\\ldots + \\frac{1}{2^n}\\] for given \\(n\\).\n\nn &lt;- 5\ntotal &lt;- 0\nfor (i in 1:n) {\n    total &lt;- total + 1/2^i\n}\ntotal\n\n[1] 0.96875\n\n\nAs \\(n\\rightarrow\\infty\\), the sum must approach 1. To see this, let us wrap another loop around the code to change n.\n\nfor (n in 2:20){\n    total &lt;- 0\n    for (i in 1:n) {\n        total &lt;- total + 1/2^i\n    }\n    cat(\"n =\",n,\", series total =\",total,\"\\n\")\n}\n\nn = 2 , series total = 0.75 \nn = 3 , series total = 0.875 \nn = 4 , series total = 0.9375 \nn = 5 , series total = 0.96875 \nn = 6 , series total = 0.984375 \nn = 7 , series total = 0.9921875 \nn = 8 , series total = 0.9960938 \nn = 9 , series total = 0.9980469 \nn = 10 , series total = 0.9990234 \nn = 11 , series total = 0.9995117 \nn = 12 , series total = 0.9997559 \nn = 13 , series total = 0.9998779 \nn = 14 , series total = 0.999939 \nn = 15 , series total = 0.9999695 \nn = 16 , series total = 0.9999847 \nn = 17 , series total = 0.9999924 \nn = 18 , series total = 0.9999962 \nn = 19 , series total = 0.9999981 \nn = 20 , series total = 0.999999"
  },
  {
    "objectID": "Loops.html#exercises",
    "href": "Loops.html#exercises",
    "title": "8  Repetition structures",
    "section": "Exercises",
    "text": "Exercises\n\nImplement sum and cumsum\nImplement the sum() and cumsum() functions using R’s loop structures. Test your functions with some simple cases to ensure that they work correctly. Using random vectors of size 1,000,000 as input, compare their speed with the built-in versions.\n\n\nDigits of a number\nWrite a function digits(x) that takes a positive integer and returns a vector of its digits. For example, digits(0667230) should return the vector (6,6,7,2,3,0).\n\n\nDigital sums\nWrite a function named digitsum which takes a positive integer and returns the sum of digits (the “digital sum”) of the input. For example, the function call digitsum(35274) should return 3+5+2+7+4=21.\nUsing this function, find the number between 1 and 1 million that has the largest digital sum.\n\n\nMigration\nCurrently there are 1,000,000 inhabitants in city A, and 500,000 in city B. Each year, 2% of people in city A move to city B, and 3% of people in city A move to city B. The intrinsic growth rate of both cities is 1% (i.e., the growth in the absence of any migration).\nPlot the population of both cities for the next 20 years.\n\n\nCollatz numbers\nThe Collatz sequence is defined as follows:\n\nStart with any positive integer \\(n\\).\nIf \\(n\\) is even, set \\(n \\leftarrow n/2\\)\nIf \\(n\\) is odd, set \\(n \\leftarrow 3n+1\\)\nIf \\(n=1\\), stop.\n\nFor example, starting with 10, the Collatz sequence is 10, 5, 16, 8, 4, 2, 1. The number of steps required to reach 1 is 6.\nIt is believed that for any starting point the sequence ends with 1. However, this is not proven.\n\nWrite a function collatzlen(n) that returns the number of steps required to go from n to 1 in a Collatz sequence. For example, collatzlen(10) should return 6.\nPlot the Collatz sequence length for \\(n\\) going from 2 to 100.\nFor which starting value between 100 and 200 does the Collatz sequence have the largest length?"
  },
  {
    "objectID": "Matrices.html#creating-a-matrix-from-a-vector",
    "href": "Matrices.html#creating-a-matrix-from-a-vector",
    "title": "9  Matrices",
    "section": "Creating a matrix from a vector",
    "text": "Creating a matrix from a vector\nGiven a vector, convert it to a matrix by specifying the number of rows and columns.\n\nm &lt;- matrix( c(1,2,3,4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4"
  },
  {
    "objectID": "Matrices.html#properties",
    "href": "Matrices.html#properties",
    "title": "9  Matrices",
    "section": "Properties",
    "text": "Properties\n\nattributes(m)\n\n$dim\n[1] 2 2\n\n\n\ndim(m)\n\n[1] 2 2\n\n\n\nclass(m)\n\n[1] \"matrix\" \"array\""
  },
  {
    "objectID": "Matrices.html#column-major-and-row-major-ordering",
    "href": "Matrices.html#column-major-and-row-major-ordering",
    "title": "9  Matrices",
    "section": "Column-major and row-major ordering",
    "text": "Column-major and row-major ordering\nNote that by default, the columns of the matrix are filled with the vector’s elements, in the so-called column-major order.\n\nmatrix(1:6, nrow=3, ncol=2)\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nTo force a row-major order instead, set the byrow parameter to TRUE.\n\nmatrix( 1:6, nrow=3, ncol=2, byrow=TRUE )\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\n\nIf we provide only nrow or only ncol, the unspecified parameter will be determined using the length of the vector.\n\nmatrix( 1:6, nrow=2 )\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\nmatrix( 1:6, ncol=3 )\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6"
  },
  {
    "objectID": "Matrices.html#element-recycling",
    "href": "Matrices.html#element-recycling",
    "title": "9  Matrices",
    "section": "Element recycling",
    "text": "Element recycling\nIf the specified matrix sizes are not compatible with the vector’s length, the vector is recycled until it fills the matrix.\n\nmatrix( 1:5, nrow=2, ncol=4)\n\nWarning in matrix(1:5, nrow = 2, ncol = 4): data length [5] is not a\nsub-multiple or multiple of the number of rows [2]\n\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    2\n[2,]    2    4    1    3\n\n\nThe same recycling is done also when one of the shape parameters is omitted.\n\nmatrix( 1:5, nrow=2 )\n\nWarning in matrix(1:5, nrow = 2): data length [5] is not a sub-multiple or\nmultiple of the number of rows [2]\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    1"
  },
  {
    "objectID": "Matrices.html#accessing-individual-matrix-elements",
    "href": "Matrices.html#accessing-individual-matrix-elements",
    "title": "9  Matrices",
    "section": "Accessing individual matrix elements",
    "text": "Accessing individual matrix elements\nThe element in the r-th row and the c-th column of a matrix m can be accessed with the m[r,c] notation.\n\nm &lt;- matrix(1:6, nrow=2)\nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\nm[1,1]\n\n[1] 1\n\n\n\nm[2,3]\n\n[1] 6"
  },
  {
    "objectID": "Matrices.html#accessing-rows-and-columns",
    "href": "Matrices.html#accessing-rows-and-columns",
    "title": "9  Matrices",
    "section": "Accessing rows and columns",
    "text": "Accessing rows and columns\nTo get the entire r-th row as a vector, we use the m[r,] notation. Similarly, m[,c] gives the column c.\n\nm &lt;- matrix(1:6, nrow=2)\nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\nm[1,] # first row, all columns\n\n[1] 1 3 5\n\n\n\nm[,1]  # first column, all rows\n\n[1] 1 2"
  },
  {
    "objectID": "Matrices.html#accessing-ranges-of-rowscolumns",
    "href": "Matrices.html#accessing-ranges-of-rowscolumns",
    "title": "9  Matrices",
    "section": "Accessing ranges of rows/columns",
    "text": "Accessing ranges of rows/columns\nAs with vectors, we can provide a vector of indices to extract a subset of rows or columns.\n\nm &lt;- matrix( 1:12, nrow=3 )\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\nSelect rows 1 and 2, all columns:\n\nm[1:2,]\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n\n\nSelect rows 1 and 2, second column only.\n\nm[1:2, 2]\n\n[1] 4 5\n\n\nSelect rows 1 and 2, and columns 1,4 and 3, in that order.\n\nm[1:2, c(1,4,3)]\n\n     [,1] [,2] [,3]\n[1,]    1   10    7\n[2,]    2   11    8"
  },
  {
    "objectID": "Matrices.html#excluding-some-rows-and-columns",
    "href": "Matrices.html#excluding-some-rows-and-columns",
    "title": "9  Matrices",
    "section": "Excluding some rows and columns",
    "text": "Excluding some rows and columns\nAs with vectors, negative indices can be used to get a new matrix with some rows/columns removed.\n\nm &lt;- matrix( 1:12, nrow=3 )\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\nRemove 3rd row.\n\nm[-3,]\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n\n\nRemove 2nd column\n\nm[,-2]\n\n     [,1] [,2] [,3]\n[1,]    1    7   10\n[2,]    2    8   11\n[3,]    3    9   12\n\n\nRemove 1st row and 3rd column\n\nm[-1,-3]\n\n     [,1] [,2] [,3]\n[1,]    2    5   11\n[2,]    3    6   12\n\n\nRemove columns from 1 to 2.\n\nm[,-1:-2]\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12"
  },
  {
    "objectID": "Matrices.html#setting-and-getting-row-and-column-names",
    "href": "Matrices.html#setting-and-getting-row-and-column-names",
    "title": "9  Matrices",
    "section": "Setting and getting row and column names",
    "text": "Setting and getting row and column names\nThe functions rownames() and colnames() are used to set the names for rows and columns, respectively.\n\nm &lt;- matrix( 1:6, nrow=2)\nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\nrownames(m) &lt;- c(\"row I\", \"row II\")\ncolnames(m) &lt;- c(\"col a\", \"col b\", \"col c\")\nm\n\n       col a col b col c\nrow I      1     3     5\nrow II     2     4     6\n\n\nWhen called without an assignment, they return the existing names.\n\nrownames(m)\n\n[1] \"row I\"  \"row II\"\n\ncolnames(m)\n\n[1] \"col a\" \"col b\" \"col c\"\n\n\nThese names provide an alternative method to access matrix elements.\n\nm[\"row I\", \"col b\"]\n\n[1] 3\n\n\n\nm[\"row I\",]\n\ncol a col b col c \n    1     3     5 \n\n\n\nm[,\"col a\"]\n\n row I row II \n     1      2"
  },
  {
    "objectID": "Matrices.html#create-a-matrix-by-setting-individual-elements",
    "href": "Matrices.html#create-a-matrix-by-setting-individual-elements",
    "title": "9  Matrices",
    "section": "Create a matrix by setting individual elements",
    "text": "Create a matrix by setting individual elements\nSometimes we may not have all the data at hand at once. It is possible to start with an empty matrix, and fill it up element-by-element.\n\nm &lt;- matrix(nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]   NA   NA\n[2,]   NA   NA\n\n\n\nm[1,1] &lt;- 1\nm[2,1] &lt;- 2\nm[1,2] &lt;- 3\nm[2,2] &lt;- 4\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4"
  },
  {
    "objectID": "Matrices.html#create-a-matrix-by-combining-columns-or-rows",
    "href": "Matrices.html#create-a-matrix-by-combining-columns-or-rows",
    "title": "9  Matrices",
    "section": "Create a matrix by combining columns or rows",
    "text": "Create a matrix by combining columns or rows\nWhen we have several different vectors, we can combine them in columns using cbind(), or by rows using rbind().\n\ncbind( c(1,2), c(3,4) )\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n\nrbind( c(1,2), c(3,4), c(-2, 6))\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]   -2    6"
  },
  {
    "objectID": "Matrices.html#add-a-row-or-a-column-to-an-existing-matrix",
    "href": "Matrices.html#add-a-row-or-a-column-to-an-existing-matrix",
    "title": "9  Matrices",
    "section": "Add a row or a column to an existing matrix",
    "text": "Add a row or a column to an existing matrix\nThe functions cbind() and rbind() can also be used to extend an existing matrix.\n\nm &lt;- matrix( 1:4, nrow = 2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nAdd a new column at the end of the matrix.\n\ncbind(m, c(10,11))\n\n     [,1] [,2] [,3]\n[1,]    1    3   10\n[2,]    2    4   11\n\n\nAdd a new column at the beginning of the matrix.\n\ncbind(c(10,11), m)\n\n     [,1] [,2] [,3]\n[1,]   10    1    3\n[2,]   11    2    4\n\n\nAdd a new row at the end of the matrix\n\nrbind(m, c(10,11))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n[3,]   10   11\n\n\nAdd a new row at the beginning of the matrix.\n\nrbind(c(10,11), m)\n\n     [,1] [,2]\n[1,]   10   11\n[2,]    1    3\n[3,]    2    4"
  },
  {
    "objectID": "Matrices.html#insert-a-row-or-a-column-into-a-matrix",
    "href": "Matrices.html#insert-a-row-or-a-column-into-a-matrix",
    "title": "9  Matrices",
    "section": "Insert a row or a column into a matrix",
    "text": "Insert a row or a column into a matrix\nAnother application of cbind() and rbind() is inserting columns and rows to existing matrices. As with vectors, such insertion is not done on the original matrix. We generate a new matrix using existing rows/columns, combine them with rbind()/cbind(), and reassign to the variable.\n\nm &lt;- matrix( 1:9, nrow=3, ncol=3)\nm\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nInsert a row between second and third rows.\n\nrbind(m[1:2,], c(-1, -2, -3), m[3,])\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]   -1   -2   -3\n[4,]    3    6    9\n\n\nInsert a column between first and second columns\n\ncbind( m[,1], c(-4,-5,-6), m[,2:3] )\n\n     [,1] [,2] [,3] [,4]\n[1,]    1   -4    4    7\n[2,]    2   -5    5    8\n[3,]    3   -6    6    9"
  },
  {
    "objectID": "Matrices.html#assign-new-values-to-submatrices",
    "href": "Matrices.html#assign-new-values-to-submatrices",
    "title": "9  Matrices",
    "section": "Assign new values to submatrices",
    "text": "Assign new values to submatrices\nA matrix can be changed in-place by selecting a submatrix using index notation, and assigning a new matrix to it.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\nm[1,1] &lt;- m[1,1] + 1\nm\n\n     [,1] [,2] [,3]\n[1,]    2    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\nm[1,1] &lt;- m[1,1]*m[2,1]\nm\n\n     [,1] [,2] [,3]\n[1,]    4    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\nm[ c(1,2), c(2,3) ] &lt;- matrix(c(20,21,22,23),nrow=2,byrow = T)\nm\n\n     [,1] [,2] [,3]\n[1,]    4   20   21\n[2,]    2   22   23\n[3,]    3    6    9"
  },
  {
    "objectID": "Matrices.html#removing-rows-and-columns",
    "href": "Matrices.html#removing-rows-and-columns",
    "title": "9  Matrices",
    "section": "Removing rows and columns",
    "text": "Removing rows and columns\nTo remove some selected rows or colums, we just use the index notation to specify the rows and columns we want to keep, and assign the result to the variable’s name.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\nm &lt;- m[c(1,3),c(2,3)] # remove row 2, col 1\nm\n\n     [,1] [,2]\n[1,]    4    7\n[2,]    6    9\n\n\n\nm &lt;- matrix( 1:9, nrow=3 )\nm &lt;- m[-2,-1] # remove row 2, col 1\nm\n\n     [,1] [,2]\n[1,]    4    7\n[2,]    6    9\n\n\nRemove 2nd row.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm &lt;- m[-2,]\nm\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    3    6    9\n\n\nRemove 1st column.\n\nm &lt;- matrix( 1:9, nrow=3 )\nm &lt;- m[, -1]\nm\n\n     [,1] [,2]\n[1,]    4    7\n[2,]    5    8\n[3,]    6    9"
  },
  {
    "objectID": "Matrices.html#filtering-on-matrices",
    "href": "Matrices.html#filtering-on-matrices",
    "title": "9  Matrices",
    "section": "Filtering on matrices",
    "text": "Filtering on matrices\n\nm &lt;- matrix( c(2,9,4,7,5,3,6,1,8) , nrow=3 )\nm\n\n     [,1] [,2] [,3]\n[1,]    2    7    6\n[2,]    9    5    1\n[3,]    4    3    8\n\n\n\nm &gt;= 5\n\n      [,1]  [,2]  [,3]\n[1,] FALSE  TRUE  TRUE\n[2,]  TRUE  TRUE FALSE\n[3,] FALSE FALSE  TRUE\n\n\n\nm[m&gt;=5]\n\n[1] 9 7 5 6 8\n\n\n\nm[ m&lt;5 ] &lt;- 0\nm\n\n     [,1] [,2] [,3]\n[1,]    0    7    6\n[2,]    9    5    0\n[3,]    0    0    8"
  },
  {
    "objectID": "Matrices.html#matrix-operations",
    "href": "Matrices.html#matrix-operations",
    "title": "9  Matrices",
    "section": "Matrix operations",
    "text": "Matrix operations\n\nTranspose\n\nm &lt;- matrix(1:4, nrow=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n\nt(m)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\nElementwise product\n\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n\nm * m\n\n     [,1] [,2]\n[1,]    1    9\n[2,]    4   16\n\n\n\n\nMatrix multiplication\n\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n\nm %*% m\n\n     [,1] [,2]\n[1,]    7   15\n[2,]   10   22\n\n\n\n\nMultiply by a scalar\n\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n3 * m\n\n     [,1] [,2]\n[1,]    3    9\n[2,]    6   12\n\n\n\n\nMatrix addition\n\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nm + m\n\n     [,1] [,2]\n[1,]    2    6\n[2,]    4    8\n\n\n\n\nSums of rows and columns\n\nm &lt;- matrix( 1:12, nrow=3 )\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\nrowSums(m)\n\n[1] 22 26 30\n\n\n\ncolSums(m)\n\n[1]  6 15 24 33\n\n\n\n\nAverages of rows and columns\n\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\nrowMeans(m)\n\n[1] 5.5 6.5 7.5\n\n\n\ncolMeans(m)\n\n[1]  2  5  8 11"
  },
  {
    "objectID": "Matrices.html#mathematical-functions-applied-on-matrices",
    "href": "Matrices.html#mathematical-functions-applied-on-matrices",
    "title": "9  Matrices",
    "section": "Mathematical functions applied on matrices",
    "text": "Mathematical functions applied on matrices\n\nm &lt;- matrix(1:4, nrow=2)\nsqrt(m)\n\n         [,1]     [,2]\n[1,] 1.000000 1.732051\n[2,] 1.414214 2.000000\n\nsin(m)\n\n          [,1]       [,2]\n[1,] 0.8414710  0.1411200\n[2,] 0.9092974 -0.7568025\n\nexp(m)\n\n         [,1]     [,2]\n[1,] 2.718282 20.08554\n[2,] 7.389056 54.59815\n\nlog(m)\n\n          [,1]     [,2]\n[1,] 0.0000000 1.098612\n[2,] 0.6931472 1.386294"
  },
  {
    "objectID": "Matrices.html#the-apply-function",
    "href": "Matrices.html#the-apply-function",
    "title": "9  Matrices",
    "section": "The apply() function",
    "text": "The apply() function\n\nSuppose you have a function that takes a vector and returns a number.\nYou want to apply this function to each row (or column) of a matrix.\n\n\nm &lt;- matrix( 1:9, nrow=3)\nm\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\napply(m, 1, mean) # same as rowMeans()\n\n[1] 4 5 6\n\n\n\napply(m, 2, mean) # same as colMeans()\n\n[1] 2 5 8\n\n\n\napply(m,1,prod)\n\n[1]  28  80 162\n\n\nWe can also use apply() with user-defined functions.\n\ninverse_sum &lt;- function(x) sum(1/x)\ninverse_sum(c(2,4,8,16))\n\n[1] 0.9375\n\n\n\nm &lt;- matrix(1:12, nrow=3)\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\napply(m,1,inverse_sum)\n\n[1] 1.4928571 0.9159091 0.6944444\n\n\n\napply(m,2,inverse_sum)\n\n[1] 1.8333333 0.6166667 0.3789683 0.2742424"
  },
  {
    "objectID": "Matrices.html#further-examples",
    "href": "Matrices.html#further-examples",
    "title": "9  Matrices",
    "section": "Further examples",
    "text": "Further examples\n\nGenerate a random matrix\n\nmatrix(runif(12, min=1, max=5), nrow = 3)\n\n         [,1]     [,2]     [,3]     [,4]\n[1,] 4.564854 4.551840 4.164703 1.089320\n[2,] 4.346013 1.489592 4.191915 1.444391\n[3,] 4.136161 2.482901 1.296362 1.788233\n\n\n\nrandmat &lt;- function(size, min, max, ...){\n    matrix(runif(size, min=min, max=max), ...)\n}\n\n\nrandmat(size=12,min=1,max=5,nrow=3)\n\n         [,1]     [,2]     [,3]     [,4]\n[1,] 2.005379 3.358715 4.966565 3.749742\n[2,] 1.121260 3.504683 3.631245 1.787730\n[3,] 4.470369 1.387189 4.099974 2.554748\n\n\n\n\nGenerate an identity matrix\n\nn &lt;- 4\nm &lt;- matrix(0, nrow=n, ncol=n)\nfor (i in 1:n) m[i,i] &lt;- 1\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    0    0    0\n[2,]    0    1    0    0\n[3,]    0    0    1    0\n[4,]    0    0    0    1\n\n\nR already has a built-in function for this:\n\ndiag(n)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    0    0    0\n[2,]    0    1    0    0\n[3,]    0    0    1    0\n[4,]    0    0    0    1\n\n\n\n\nGenerate a matrix with 1’s on the edges, 0 elsewhere\n\nnrow &lt;- 5\nncol &lt;- 7\nm &lt;- matrix(1, nrow=nrow, ncol=ncol)\nm[2:(nrow-1), 2:(ncol-1)] &lt;- 0\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    1    1    1    1    1    1    1\n[2,]    1    0    0    0    0    0    1\n[3,]    1    0    0    0    0    0    1\n[4,]    1    0    0    0    0    0    1\n[5,]    1    1    1    1    1    1    1\n\n\nAlternatively\n\nm &lt;- matrix(0, nrow=nrow, ncol=ncol)\nm[c(1,nrow),] &lt;- 1\nm[,c(1,ncol)] &lt;- 1\nm\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    1    1    1    1    1    1    1\n[2,]    1    0    0    0    0    0    1\n[3,]    1    0    0    0    0    0    1\n[4,]    1    0    0    0    0    0    1\n[5,]    1    1    1    1    1    1    1\n\n\n\n\nThe antidiagonal of a square matrix\n\nm &lt;- matrix(1:16, nrow=4)\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\n\nn &lt;- nrow(m)\nv &lt;- vector(mode = \"numeric\", length = n)\nfor (i in 1:n) v[i] &lt;- m[i, n-i+1]\nv\n\n[1] 13 10  7  4\n\n\nConvert to a function\n\nantidiag &lt;- function(m){\n    if(nrow(m) != ncol(m)){\n        print(\"Matrix must be square\")\n        return()\n    }\n    n &lt;- nrow(m)\n    v &lt;- vector(mode = \"numeric\", length = n)\n    for (i in 1:n) v[i] &lt;- m[i, n-i+1]\n    v\n}\n\nantidiag(matrix(1:25, nrow=5))\n\n[1] 21 17 13  9  5\n\n\n\n\n3-by-3 magic square\n\nA magic square is a square table of positive integers, arranged such that every row sum, every column sum, and every diagonal sum are equal. For a 3-by-3 square this total is 15.\nWrite a function that takes a 3-by-3 integer matrix, returns TRUE if the matrix is a magic square, and FALSE otherwise.\n\nis.magic &lt;- function(m){\n    if( !(nrow(m) == 3 & ncol(m) == 3)) {\n        print(\"The matrix must be 3-by-3.\")\n        return()\n    }\n    all(\n    rowSums(m) == rep(15,3),\n    colSums(m) == rep(15,3),\n    sum(diag(m)) == 15,\n    m[1,3]+m[2,2]+m[3,1] == 15\n    )\n}\n\nis.magic( matrix(c(2,9,4,7,5,3,6,1,8), nrow = 3) )  # TRUE\n\n[1] TRUE\n\nis.magic( matrix(1:9, ncol = 3)) # FALSE\n\n[1] FALSE\n\nis.magic( matrix(1:12, ncol = 3)) # error message\n\n[1] \"The matrix must be 3-by-3.\"\n\n\nNULL\n\n\n\n\nRandom search for a magic square\nGenerate many random 3-by-3 matrices with entries from 1 to 9, and try to find magic squares.\n\nfor (i in 1:1e5) {\n    m &lt;- matrix(sample(1:9),nrow=3)\n    if (is.magic(m))\n        print(m)\n}\n\n     [,1] [,2] [,3]\n[1,]    6    7    2\n[2,]    1    5    9\n[3,]    8    3    4\n     [,1] [,2] [,3]\n[1,]    4    9    2\n[2,]    3    5    7\n[3,]    8    1    6\n     [,1] [,2] [,3]\n[1,]    4    9    2\n[2,]    3    5    7\n[3,]    8    1    6"
  },
  {
    "objectID": "Lists.html#creating-lists",
    "href": "Lists.html#creating-lists",
    "title": "10  Lists",
    "section": "Creating lists",
    "text": "Creating lists\nIn the simplest form, a list can be created with the list() function call.\n\nftm &lt;- list(\"Fatma\", 5624.25, TRUE)\nftm\n\n[[1]]\n[1] \"Fatma\"\n\n[[2]]\n[1] 5624.25\n\n[[3]]\n[1] TRUE\n\n\nWe can access list elements using the double bracket [[...]] notation.\n\nftm[[1]]\n\n[1] \"Fatma\"\n\n\n\nftm[[2]]\n\n[1] 5624.25"
  },
  {
    "objectID": "Lists.html#tags-of-list-elements",
    "href": "Lists.html#tags-of-list-elements",
    "title": "10  Lists",
    "section": "Tags of list elements",
    "text": "Tags of list elements\nInstead of using integer indices, we can assign names (tags) to list components and refer to them using these tags.\n\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\n\n\n\nftm$name\n\n[1] \"Fatma\""
  },
  {
    "objectID": "Lists.html#mixing-different-objects",
    "href": "Lists.html#mixing-different-objects",
    "title": "10  Lists",
    "section": "Mixing different objects",
    "text": "Mixing different objects\nA list can comprise any type of object, such as vectors, matrices, sublists, etc.\n\nlist(1, c(2,3), list(\"abc\",4))\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2 3\n\n[[3]]\n[[3]][[1]]\n[1] \"abc\"\n\n[[3]][[2]]\n[1] 4"
  },
  {
    "objectID": "Lists.html#list-indexing",
    "href": "Lists.html#list-indexing",
    "title": "10  Lists",
    "section": "List indexing",
    "text": "List indexing\nList elements can be accessed with three methods:\n\nusing integer indices: mylist[[1]]\nusing the mylist$tag notation, if tags are given\nusing the mylist[[\"tag\"]] notation, if tags are given\n\n\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nftm$name  # or, ftm[[1]], ftm[[\"name\"]]\n\n[1] \"Fatma\"\n\nftm[[2]]  # or, ftm$salary, ftm[[\"salary\"]]\n\n[1] 5624.25\n\nftm[[\"fulltime\"]] # or, ftm$fulltime , ftm[[3]]\n\n[1] TRUE\n\n\nIf the list element is a vector, the [...] operator can be used afterwards in order to select elements of that vector.\n\nftm &lt;- list(name=\"Fatma\", grades=c(10,12,9))\nftm$grades\n\n[1] 10 12  9\n\n\n\nftm[[2]][3]\n\n[1] 9\n\nftm$grades[3]\n\n[1] 9\n\n\nThe syntax listname[[\"tagname\"]] is useful when tagnames are stored in a variable.\n\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nx &lt;- \"salary\"\nftm[[x]]\n\n[1] 5624.25"
  },
  {
    "objectID": "Lists.html#selecting-a-range-of-indices",
    "href": "Lists.html#selecting-a-range-of-indices",
    "title": "10  Lists",
    "section": "Selecting a range of indices",
    "text": "Selecting a range of indices\nA range of indices can be selected using the familiar vector syntax with a single bracket. This returns a sublist.\n\nftm[1:2]\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n\n\nftm[c(1,3)]\n\n$name\n[1] \"Fatma\"\n\n$fulltime\n[1] TRUE\n\n\nHowever, this does not work with the double bracket notation.\n\nftm[[1:2]]\n\nError in ftm[[1:2]]: subscript out of bounds"
  },
  {
    "objectID": "Lists.html#difference-between-indexing-with-single-and-double-brackets",
    "href": "Lists.html#difference-between-indexing-with-single-and-double-brackets",
    "title": "10  Lists",
    "section": "Difference between indexing with single and double brackets",
    "text": "Difference between indexing with single and double brackets\nThe availability of two types of brackets for list indexing can be confusing. They can be distinguished by their return types:\n\n[i] returns a list with a single component\n[[i]] returns a single component.\n\n\nftm[1]  # returns a list with a single component.\n\n$name\n[1] \"Fatma\"\n\n\n\nftm[[1]]  # returns a one-element vector\n\n[1] \"Fatma\"\n\n\n\nmode(ftm[1])\n\n[1] \"list\"\n\nmode(ftm[[1]])\n\n[1] \"character\""
  },
  {
    "objectID": "Lists.html#adding-new-elements-to-a-list",
    "href": "Lists.html#adding-new-elements-to-a-list",
    "title": "10  Lists",
    "section": "Adding new elements to a list",
    "text": "Adding new elements to a list\nYou can start with an incomplete list and add new elements as you go along.\n\nftm &lt;- list(name=\"Fatma\", salary=5624.25)\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n\n\nftm$fulltime &lt;- TRUE\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\n\n\nNew list elements can also be added via vector indices.\n\nftm[[4]] &lt;- 28\nftm[5:7] &lt;- c(a=FALSE,b=TRUE,c=TRUE)\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\n\n[[4]]\n[1] 28\n\n[[5]]\n[1] FALSE\n\n[[6]]\n[1] TRUE\n\n[[7]]\n[1] TRUE\n\n\nThis last example also shows that a list can have both tagged and untagged elements."
  },
  {
    "objectID": "Lists.html#delete-elements-from-a-list",
    "href": "Lists.html#delete-elements-from-a-list",
    "title": "10  Lists",
    "section": "Delete elements from a list",
    "text": "Delete elements from a list\nYou can delete an element by setting it to NULL.\n\nftm$fulltime &lt;- NULL\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n[[3]]\n[1] 28\n\n[[4]]\n[1] FALSE\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] TRUE\n\n\nNote that after deletion, all elements below the deleted one are moved up and their indices are decreased by one.\n\nftm[[3]] &lt;- NULL\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n[[3]]\n[1] FALSE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE\n\n\n\nftm[3:5] &lt;- NULL\nftm\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25"
  },
  {
    "objectID": "Lists.html#concatenating-lists",
    "href": "Lists.html#concatenating-lists",
    "title": "10  Lists",
    "section": "Concatenating lists",
    "text": "Concatenating lists\nThe familiar c() function can be used on lists, too.\n\nc( list(\"abc\", 32, T), list(5.1))\n\n[[1]]\n[1] \"abc\"\n\n[[2]]\n[1] 32\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 5.1\n\n\n\nc(list(name=\"Fatma\", salary=5624.25, fulltime=TRUE), list(hobby=\"painting\"))\n\n$name\n[1] \"Fatma\"\n\n$salary\n[1] 5624.25\n\n$fulltime\n[1] TRUE\n\n$hobby\n[1] \"painting\""
  },
  {
    "objectID": "Lists.html#getting-information-on-lists",
    "href": "Lists.html#getting-information-on-lists",
    "title": "10  Lists",
    "section": "Getting information on lists",
    "text": "Getting information on lists\nTo get the number of elements in a list, we can use the length() function.\n\nftm &lt;- list(name=\"Fatma\", salary=5624.25, fulltime=TRUE)\nlength(ftm)\n\n[1] 3\n\n\nTo get the tags in a list, we use the names() function.\n\nnames(ftm)\n\n[1] \"name\"     \"salary\"   \"fulltime\"\n\n\nTo obtain the values as a vector, we can use the unlist() function.\n\nunlist(ftm)\n\n     name    salary  fulltime \n  \"Fatma\" \"5624.25\"    \"TRUE\" \n\n\n\nunname(unlist(ftm))\n\n[1] \"Fatma\"   \"5624.25\" \"TRUE\"   \n\n\nNote that this function returns a vector, and the numeric and the Boolean values are converted to strings. The reason is that in a vector every element must be of the same type, and strings are the only common denominator here."
  },
  {
    "objectID": "Lists.html#applying-functions-to-lists",
    "href": "Lists.html#applying-functions-to-lists",
    "title": "10  Lists",
    "section": "Applying functions to lists",
    "text": "Applying functions to lists\nThe lapply() function applies a function to each element of a list, and returns the results as a list.\n\nlapply(list(2,3.5,4), sqrt)\n\n[[1]]\n[1] 1.414214\n\n[[2]]\n[1] 1.870829\n\n[[3]]\n[1] 2\n\n\nWorking with tagged elements:\n\ngrades_1 &lt;- c(10,12,11,14,8,12)\ngrades_2 &lt;- c(13,11,10,11,9)\nallgrades &lt;- list(section1=grades_1, section2=grades_2)\nallgrades\n\n$section1\n[1] 10 12 11 14  8 12\n\n$section2\n[1] 13 11 10 11  9\n\n\n\nmean(allgrades$section1)\n\n[1] 11.16667\n\n\n\nlapply(allgrades, mean)\n\n$section1\n[1] 11.16667\n\n$section2\n[1] 10.8\n\n\nThe sapply() (simple apply) function returns a vector or a matrix resulting from the application of the function.\n\nsapply(allgrades, mean)\n\nsection1 section2 \n11.16667 10.80000 \n\n\n\nmode(sapply(allgrades, mean))\n\n[1] \"numeric\"\n\n\nWe can define our own functions to specify what to do with each element.\n\nmult_by2 &lt;- function(x) {2*x}\nmult_by2(c(1,2,3,4))\n\n[1] 2 4 6 8\n\n\n\nlapply( list(1, 2, 3:7), mult_by2)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1]  6  8 10 12 14"
  },
  {
    "objectID": "Lists.html#examples",
    "href": "Lists.html#examples",
    "title": "10  Lists",
    "section": "Examples",
    "text": "Examples\n\nCalculate weekly payrolls\nSet up a list of staff members, where each element is a list consisting of names, wages and number of hours worked.\n\nstaff &lt;- list(\n    id000=list(name=\"Fatma\", wage=12.5, hours=20),\n    id001=list(name=\"Ekrem\", wage=11.7, hours=30),\n    id002=list(name=\"Deniz\", wage=13.3, hours=25)\n)\nstaff\n\n$id000\n$id000$name\n[1] \"Fatma\"\n\n$id000$wage\n[1] 12.5\n\n$id000$hours\n[1] 20\n\n\n$id001\n$id001$name\n[1] \"Ekrem\"\n\n$id001$wage\n[1] 11.7\n\n$id001$hours\n[1] 30\n\n\n$id002\n$id002$name\n[1] \"Deniz\"\n\n$id002$wage\n[1] 13.3\n\n$id002$hours\n[1] 25\n\n\nDefine a function that takes one person as defined above, and returns the weekly pay.\n\npayroll &lt;- function(person){person$wage * person$hours}\n\n\npayroll(list(name=\"Deniz\", wage=13.3, hours=25))\n\n[1] 332.5\n\n\nNow apply this function to every staff member on the list staff.\n\nlapply(staff, payroll)\n\n$id000\n[1] 250\n\n$id001\n[1] 351\n\n$id002\n[1] 332.5\n\n\n\nsapply(staff, payroll)\n\nid000 id001 id002 \n250.0 351.0 332.5 \n\n\n\n\nCount the occurrences of numbers in a vector\nWe have a vector of numbers where numbers are repeated.\n\nmydata = c(1,2,3,15,1,2,3,4,1)\n\nWe want to keep the count of each number in a list, such that counts[[i]] stores how many times the number i occurs in data.\nInitialize the counts list with zeros.\n\ncounts = list(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\n\nNow loop over the data vector, and increase the count of the appropriate number.\n\nfor (x in mydata) {\n    counts[[x]] &lt;- counts[[x]] + 1\n}\ncounts\n\n[[1]]\n[1] 3\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 2\n\n[[4]]\n[1] 1\n\n[[5]]\n[1] 0\n\n[[6]]\n[1] 0\n\n[[7]]\n[1] 0\n\n[[8]]\n[1] 0\n\n[[9]]\n[1] 0\n\n[[10]]\n[1] 0\n\n[[11]]\n[1] 0\n\n[[12]]\n[1] 0\n\n[[13]]\n[1] 0\n\n[[14]]\n[1] 0\n\n[[15]]\n[1] 1\n\n[[16]]\n[1] 0\n\n[[17]]\n[1] 0\n\n\n\n\nCount the occurrences of words in a text\nHere is a simple application of textual analysis. Consider the following (short) text. It is preprocessed to remove punctuation marks and uppercase letters.\n\nsometext &lt;- \"my dear fellow said sherlock holmes as we sat on either side of the fire in his lodgings at baker street life is infinitely stranger than anything which the mind of man could invent we would not dare to conceive the things which are really mere commonplaces of existence if we could fly out of that window hand in hand hover over this great city gently remove the roofs and peep in at the queer things which are going on the strange coincidences the plannings the cross purposes the wonderful chains of events working through generations and leading to the most outré results it would make all fiction with its conventionalities and foreseen conclusions most stale and unprofitable\"\n\nWe wish to create a list wordcounts such that wordcounts$word gives the number of occurrences of word in the given text.\nThis problem is similar to the example above where we counted the occurrences of numbers. However, we don’t know in advance what words and how many words we are going to encounter. So we cannot initialize the counts to zero.\nWe will approach the problem as follows:\nfor every word in the word list\n    if the word is already in the list, increase the count.\n    otherwise, add this word with a count of 1.\nIf an element is not in a list, the list returns NULL. This can be used to check for the existence of an element in a list.\n\nwordcounts &lt;- list()\nwordcounts\n\nlist()\n\n\n\nwordcounts[[\"sherlock\"]]\n\nNULL\n\n\n\nis.null(wordcounts[[\"sherlock\"]])\n\n[1] TRUE\n\n\nSo, beginning with the first word, we add it to our list:\n\nword &lt;- \"my\"\nif (is.null(wordcounts[[word]])){\n    wordcounts[[word]] &lt;- 1\n} else {\n    wordcounts[[word]] &lt;- wordcounts[[word]] + 1\n}\n\n\nwordcounts\n\n$my\n[1] 1\n\n\nSimilarly, the second word:\n\nword &lt;- \"dear\"\nif (is.null(wordcounts[[word]])){\n    wordcounts[[word]] &lt;- 1\n} else {\n    wordcounts[[word]] &lt;- wordcounts[[word]] + 1\n}\nwordcounts\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n\nAnd now the list contains the elements we gave, and nothing more.\n\nwordcounts\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n\nWe can’t go word by word manually. The better solution is to loop over every word in the text. We need to find a way to convert the large string of text to a vector, so that we can take the words one by one.\nThe strsplit() function does that for us:\n\nstrsplit(sometext, split=\" \")\n\n[[1]]\n  [1] \"my\"                \"dear\"              \"fellow\"           \n  [4] \"said\"              \"sherlock\"          \"holmes\"           \n  [7] \"as\"                \"we\"                \"sat\"              \n [10] \"on\"                \"either\"            \"side\"             \n [13] \"of\"                \"the\"               \"fire\"             \n [16] \"in\"                \"his\"               \"lodgings\"         \n [19] \"at\"                \"baker\"             \"street\"           \n [22] \"life\"              \"is\"                \"infinitely\"       \n [25] \"stranger\"          \"than\"              \"anything\"         \n [28] \"which\"             \"the\"               \"mind\"             \n [31] \"of\"                \"man\"               \"could\"            \n [34] \"invent\"            \"we\"                \"would\"            \n [37] \"not\"               \"dare\"              \"to\"               \n [40] \"conceive\"          \"the\"               \"things\"           \n [43] \"which\"             \"are\"               \"really\"           \n [46] \"mere\"              \"commonplaces\"      \"of\"               \n [49] \"existence\"         \"if\"                \"we\"               \n [52] \"could\"             \"fly\"               \"out\"              \n [55] \"of\"                \"that\"              \"window\"           \n [58] \"hand\"              \"in\"                \"hand\"             \n [61] \"hover\"             \"over\"              \"this\"             \n [64] \"great\"             \"city\"              \"gently\"           \n [67] \"remove\"            \"the\"               \"roofs\"            \n [70] \"and\"               \"peep\"              \"in\"               \n [73] \"at\"                \"the\"               \"queer\"            \n [76] \"things\"            \"which\"             \"are\"              \n [79] \"going\"             \"on\"                \"the\"              \n [82] \"strange\"           \"coincidences\"      \"the\"              \n [85] \"plannings\"         \"the\"               \"cross\"            \n [88] \"purposes\"          \"the\"               \"wonderful\"        \n [91] \"chains\"            \"of\"                \"events\"           \n [94] \"working\"           \"through\"           \"generations\"      \n [97] \"and\"               \"leading\"           \"to\"               \n[100] \"the\"               \"most\"              \"outré\"            \n[103] \"results\"           \"it\"                \"would\"            \n[106] \"make\"              \"all\"               \"fiction\"          \n[109] \"with\"              \"its\"               \"conventionalities\"\n[112] \"and\"               \"foreseen\"          \"conclusions\"      \n[115] \"most\"              \"stale\"             \"and\"              \n[118] \"unprofitable\"     \n\n\nNote that strsplit() returns a list. The first element of this list is the vector of strings we look for.\n\nwordsintext &lt;- strsplit(sometext, split=\" \")[[1]]\nwordsintext\n\n  [1] \"my\"                \"dear\"              \"fellow\"           \n  [4] \"said\"              \"sherlock\"          \"holmes\"           \n  [7] \"as\"                \"we\"                \"sat\"              \n [10] \"on\"                \"either\"            \"side\"             \n [13] \"of\"                \"the\"               \"fire\"             \n [16] \"in\"                \"his\"               \"lodgings\"         \n [19] \"at\"                \"baker\"             \"street\"           \n [22] \"life\"              \"is\"                \"infinitely\"       \n [25] \"stranger\"          \"than\"              \"anything\"         \n [28] \"which\"             \"the\"               \"mind\"             \n [31] \"of\"                \"man\"               \"could\"            \n [34] \"invent\"            \"we\"                \"would\"            \n [37] \"not\"               \"dare\"              \"to\"               \n [40] \"conceive\"          \"the\"               \"things\"           \n [43] \"which\"             \"are\"               \"really\"           \n [46] \"mere\"              \"commonplaces\"      \"of\"               \n [49] \"existence\"         \"if\"                \"we\"               \n [52] \"could\"             \"fly\"               \"out\"              \n [55] \"of\"                \"that\"              \"window\"           \n [58] \"hand\"              \"in\"                \"hand\"             \n [61] \"hover\"             \"over\"              \"this\"             \n [64] \"great\"             \"city\"              \"gently\"           \n [67] \"remove\"            \"the\"               \"roofs\"            \n [70] \"and\"               \"peep\"              \"in\"               \n [73] \"at\"                \"the\"               \"queer\"            \n [76] \"things\"            \"which\"             \"are\"              \n [79] \"going\"             \"on\"                \"the\"              \n [82] \"strange\"           \"coincidences\"      \"the\"              \n [85] \"plannings\"         \"the\"               \"cross\"            \n [88] \"purposes\"          \"the\"               \"wonderful\"        \n [91] \"chains\"            \"of\"                \"events\"           \n [94] \"working\"           \"through\"           \"generations\"      \n [97] \"and\"               \"leading\"           \"to\"               \n[100] \"the\"               \"most\"              \"outré\"            \n[103] \"results\"           \"it\"                \"would\"            \n[106] \"make\"              \"all\"               \"fiction\"          \n[109] \"with\"              \"its\"               \"conventionalities\"\n[112] \"and\"               \"foreseen\"          \"conclusions\"      \n[115] \"most\"              \"stale\"             \"and\"              \n[118] \"unprofitable\"     \n\n\nFor each word in the text, increase the count if the word exists in the counter list, otherwise set it to one.\n\nwordcounts &lt;- list()\nfor (word in wordsintext){\n    if (is.null(wordcounts[[word]])){\n        wordcounts[[word]] &lt;- 1\n    } else {\n        wordcounts[[word]] &lt;- wordcounts[[word]] + 1\n    }\n}\n\n\nwordcounts\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n$fellow\n[1] 1\n\n$said\n[1] 1\n\n$sherlock\n[1] 1\n\n$holmes\n[1] 1\n\n$as\n[1] 1\n\n$we\n[1] 3\n\n$sat\n[1] 1\n\n$on\n[1] 2\n\n$either\n[1] 1\n\n$side\n[1] 1\n\n$of\n[1] 5\n\n$the\n[1] 10\n\n$fire\n[1] 1\n\n$`in`\n[1] 3\n\n$his\n[1] 1\n\n$lodgings\n[1] 1\n\n$at\n[1] 2\n\n$baker\n[1] 1\n\n$street\n[1] 1\n\n$life\n[1] 1\n\n$is\n[1] 1\n\n$infinitely\n[1] 1\n\n$stranger\n[1] 1\n\n$than\n[1] 1\n\n$anything\n[1] 1\n\n$which\n[1] 3\n\n$mind\n[1] 1\n\n$man\n[1] 1\n\n$could\n[1] 2\n\n$invent\n[1] 1\n\n$would\n[1] 2\n\n$not\n[1] 1\n\n$dare\n[1] 1\n\n$to\n[1] 2\n\n$conceive\n[1] 1\n\n$things\n[1] 2\n\n$are\n[1] 2\n\n$really\n[1] 1\n\n$mere\n[1] 1\n\n$commonplaces\n[1] 1\n\n$existence\n[1] 1\n\n$`if`\n[1] 1\n\n$fly\n[1] 1\n\n$out\n[1] 1\n\n$that\n[1] 1\n\n$window\n[1] 1\n\n$hand\n[1] 2\n\n$hover\n[1] 1\n\n$over\n[1] 1\n\n$this\n[1] 1\n\n$great\n[1] 1\n\n$city\n[1] 1\n\n$gently\n[1] 1\n\n$remove\n[1] 1\n\n$roofs\n[1] 1\n\n$and\n[1] 4\n\n$peep\n[1] 1\n\n$queer\n[1] 1\n\n$going\n[1] 1\n\n$strange\n[1] 1\n\n$coincidences\n[1] 1\n\n$plannings\n[1] 1\n\n$cross\n[1] 1\n\n$purposes\n[1] 1\n\n$wonderful\n[1] 1\n\n$chains\n[1] 1\n\n$events\n[1] 1\n\n$working\n[1] 1\n\n$through\n[1] 1\n\n$generations\n[1] 1\n\n$leading\n[1] 1\n\n$most\n[1] 2\n\n$outré\n[1] 1\n\n$results\n[1] 1\n\n$it\n[1] 1\n\n$make\n[1] 1\n\n$all\n[1] 1\n\n$fiction\n[1] 1\n\n$with\n[1] 1\n\n$its\n[1] 1\n\n$conventionalities\n[1] 1\n\n$foreseen\n[1] 1\n\n$conclusions\n[1] 1\n\n$stale\n[1] 1\n\n$unprofitable\n[1] 1\n\n\nNow we can ask questions about the statistics of words in the text. For example, which words occur more than twice in the text?\n\nwordcounts[wordcounts &gt; 2]\n\n$we\n[1] 3\n\n$of\n[1] 5\n\n$the\n[1] 10\n\n$`in`\n[1] 3\n\n$which\n[1] 3\n\n$and\n[1] 4\n\n\nWhat are the most frequent words? Sort the list, most frequent word first.\n\nwordcounts[order(unlist(wordcounts),decreasing = T)]\n\n$the\n[1] 10\n\n$of\n[1] 5\n\n$and\n[1] 4\n\n$we\n[1] 3\n\n$`in`\n[1] 3\n\n$which\n[1] 3\n\n$on\n[1] 2\n\n$at\n[1] 2\n\n$could\n[1] 2\n\n$would\n[1] 2\n\n$to\n[1] 2\n\n$things\n[1] 2\n\n$are\n[1] 2\n\n$hand\n[1] 2\n\n$most\n[1] 2\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n$fellow\n[1] 1\n\n$said\n[1] 1\n\n$sherlock\n[1] 1\n\n$holmes\n[1] 1\n\n$as\n[1] 1\n\n$sat\n[1] 1\n\n$either\n[1] 1\n\n$side\n[1] 1\n\n$fire\n[1] 1\n\n$his\n[1] 1\n\n$lodgings\n[1] 1\n\n$baker\n[1] 1\n\n$street\n[1] 1\n\n$life\n[1] 1\n\n$is\n[1] 1\n\n$infinitely\n[1] 1\n\n$stranger\n[1] 1\n\n$than\n[1] 1\n\n$anything\n[1] 1\n\n$mind\n[1] 1\n\n$man\n[1] 1\n\n$invent\n[1] 1\n\n$not\n[1] 1\n\n$dare\n[1] 1\n\n$conceive\n[1] 1\n\n$really\n[1] 1\n\n$mere\n[1] 1\n\n$commonplaces\n[1] 1\n\n$existence\n[1] 1\n\n$`if`\n[1] 1\n\n$fly\n[1] 1\n\n$out\n[1] 1\n\n$that\n[1] 1\n\n$window\n[1] 1\n\n$hover\n[1] 1\n\n$over\n[1] 1\n\n$this\n[1] 1\n\n$great\n[1] 1\n\n$city\n[1] 1\n\n$gently\n[1] 1\n\n$remove\n[1] 1\n\n$roofs\n[1] 1\n\n$peep\n[1] 1\n\n$queer\n[1] 1\n\n$going\n[1] 1\n\n$strange\n[1] 1\n\n$coincidences\n[1] 1\n\n$plannings\n[1] 1\n\n$cross\n[1] 1\n\n$purposes\n[1] 1\n\n$wonderful\n[1] 1\n\n$chains\n[1] 1\n\n$events\n[1] 1\n\n$working\n[1] 1\n\n$through\n[1] 1\n\n$generations\n[1] 1\n\n$leading\n[1] 1\n\n$outré\n[1] 1\n\n$results\n[1] 1\n\n$it\n[1] 1\n\n$make\n[1] 1\n\n$all\n[1] 1\n\n$fiction\n[1] 1\n\n$with\n[1] 1\n\n$its\n[1] 1\n\n$conventionalities\n[1] 1\n\n$foreseen\n[1] 1\n\n$conclusions\n[1] 1\n\n$stale\n[1] 1\n\n$unprofitable\n[1] 1\n\n\nWhere in the text does a word occur? Generate a list such that words are tags and the corresponding value is a vector of positions.\n\nwordlocations &lt;- list()\n\nfor (i in 1:length(wordsintext)){\n    word &lt;- wordsintext[i]\n    wordlocations[[word]] &lt;- c(wordlocations[[word]],i)\n}\nwordlocations\n\n$my\n[1] 1\n\n$dear\n[1] 2\n\n$fellow\n[1] 3\n\n$said\n[1] 4\n\n$sherlock\n[1] 5\n\n$holmes\n[1] 6\n\n$as\n[1] 7\n\n$we\n[1]  8 35 51\n\n$sat\n[1] 9\n\n$on\n[1] 10 80\n\n$either\n[1] 11\n\n$side\n[1] 12\n\n$of\n[1] 13 31 48 55 92\n\n$the\n [1]  14  29  41  68  74  81  84  86  89 100\n\n$fire\n[1] 15\n\n$`in`\n[1] 16 59 72\n\n$his\n[1] 17\n\n$lodgings\n[1] 18\n\n$at\n[1] 19 73\n\n$baker\n[1] 20\n\n$street\n[1] 21\n\n$life\n[1] 22\n\n$is\n[1] 23\n\n$infinitely\n[1] 24\n\n$stranger\n[1] 25\n\n$than\n[1] 26\n\n$anything\n[1] 27\n\n$which\n[1] 28 43 77\n\n$mind\n[1] 30\n\n$man\n[1] 32\n\n$could\n[1] 33 52\n\n$invent\n[1] 34\n\n$would\n[1]  36 105\n\n$not\n[1] 37\n\n$dare\n[1] 38\n\n$to\n[1] 39 99\n\n$conceive\n[1] 40\n\n$things\n[1] 42 76\n\n$are\n[1] 44 78\n\n$really\n[1] 45\n\n$mere\n[1] 46\n\n$commonplaces\n[1] 47\n\n$existence\n[1] 49\n\n$`if`\n[1] 50\n\n$fly\n[1] 53\n\n$out\n[1] 54\n\n$that\n[1] 56\n\n$window\n[1] 57\n\n$hand\n[1] 58 60\n\n$hover\n[1] 61\n\n$over\n[1] 62\n\n$this\n[1] 63\n\n$great\n[1] 64\n\n$city\n[1] 65\n\n$gently\n[1] 66\n\n$remove\n[1] 67\n\n$roofs\n[1] 69\n\n$and\n[1]  70  97 112 117\n\n$peep\n[1] 71\n\n$queer\n[1] 75\n\n$going\n[1] 79\n\n$strange\n[1] 82\n\n$coincidences\n[1] 83\n\n$plannings\n[1] 85\n\n$cross\n[1] 87\n\n$purposes\n[1] 88\n\n$wonderful\n[1] 90\n\n$chains\n[1] 91\n\n$events\n[1] 93\n\n$working\n[1] 94\n\n$through\n[1] 95\n\n$generations\n[1] 96\n\n$leading\n[1] 98\n\n$most\n[1] 101 115\n\n$outré\n[1] 102\n\n$results\n[1] 103\n\n$it\n[1] 104\n\n$make\n[1] 106\n\n$all\n[1] 107\n\n$fiction\n[1] 108\n\n$with\n[1] 109\n\n$its\n[1] 110\n\n$conventionalities\n[1] 111\n\n$foreseen\n[1] 113\n\n$conclusions\n[1] 114\n\n$stale\n[1] 116\n\n$unprofitable\n[1] 118\n\n\nAs a side benefit, once we have the wordlocations list, we can get the number of occurrences of words without passing over the data again. We only need to apply the length() function to the list.\n\nlapply(wordlocations, length)\n\n$my\n[1] 1\n\n$dear\n[1] 1\n\n$fellow\n[1] 1\n\n$said\n[1] 1\n\n$sherlock\n[1] 1\n\n$holmes\n[1] 1\n\n$as\n[1] 1\n\n$we\n[1] 3\n\n$sat\n[1] 1\n\n$on\n[1] 2\n\n$either\n[1] 1\n\n$side\n[1] 1\n\n$of\n[1] 5\n\n$the\n[1] 10\n\n$fire\n[1] 1\n\n$`in`\n[1] 3\n\n$his\n[1] 1\n\n$lodgings\n[1] 1\n\n$at\n[1] 2\n\n$baker\n[1] 1\n\n$street\n[1] 1\n\n$life\n[1] 1\n\n$is\n[1] 1\n\n$infinitely\n[1] 1\n\n$stranger\n[1] 1\n\n$than\n[1] 1\n\n$anything\n[1] 1\n\n$which\n[1] 3\n\n$mind\n[1] 1\n\n$man\n[1] 1\n\n$could\n[1] 2\n\n$invent\n[1] 1\n\n$would\n[1] 2\n\n$not\n[1] 1\n\n$dare\n[1] 1\n\n$to\n[1] 2\n\n$conceive\n[1] 1\n\n$things\n[1] 2\n\n$are\n[1] 2\n\n$really\n[1] 1\n\n$mere\n[1] 1\n\n$commonplaces\n[1] 1\n\n$existence\n[1] 1\n\n$`if`\n[1] 1\n\n$fly\n[1] 1\n\n$out\n[1] 1\n\n$that\n[1] 1\n\n$window\n[1] 1\n\n$hand\n[1] 2\n\n$hover\n[1] 1\n\n$over\n[1] 1\n\n$this\n[1] 1\n\n$great\n[1] 1\n\n$city\n[1] 1\n\n$gently\n[1] 1\n\n$remove\n[1] 1\n\n$roofs\n[1] 1\n\n$and\n[1] 4\n\n$peep\n[1] 1\n\n$queer\n[1] 1\n\n$going\n[1] 1\n\n$strange\n[1] 1\n\n$coincidences\n[1] 1\n\n$plannings\n[1] 1\n\n$cross\n[1] 1\n\n$purposes\n[1] 1\n\n$wonderful\n[1] 1\n\n$chains\n[1] 1\n\n$events\n[1] 1\n\n$working\n[1] 1\n\n$through\n[1] 1\n\n$generations\n[1] 1\n\n$leading\n[1] 1\n\n$most\n[1] 2\n\n$outré\n[1] 1\n\n$results\n[1] 1\n\n$it\n[1] 1\n\n$make\n[1] 1\n\n$all\n[1] 1\n\n$fiction\n[1] 1\n\n$with\n[1] 1\n\n$its\n[1] 1\n\n$conventionalities\n[1] 1\n\n$foreseen\n[1] 1\n\n$conclusions\n[1] 1\n\n$stale\n[1] 1\n\n$unprofitable\n[1] 1"
  },
  {
    "objectID": "Data Frames.html#creating-data-frames",
    "href": "Data Frames.html#creating-data-frames",
    "title": "11  Data Frames",
    "section": "Creating data frames",
    "text": "Creating data frames\nSeveral vectors can be combined into a data frame using the data.frame() function.\n\nheights &lt;- c(Can=1.70, Cem=1.75, Hande=1.62)\nweights &lt;- c(Can=65, Cem=66, Hande=61)\ncity &lt;- c(\"Istanbul\",\"Ankara\",\"Izmir\")\npeople &lt;- data.frame(Height=heights, \n                     Weight=weights, \n                     Member=c(Can=TRUE, Cem=FALSE, Hande=TRUE), \n                     City=city)\npeople\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\n\n\nRecycling applies to data frames as well. Suppose we add the \"City\" data and make it \"Istanbul\" for all:\n\ndata.frame(Height=heights, Weight=weights, City=\"Istanbul\")\n\n      Height Weight     City\nCan     1.70     65 Istanbul\nCem     1.75     66 Istanbul\nHande   1.62     61 Istanbul\n\n\nHere, the element \"Istanbul\" is repeated until it matches the length of other vectors.\nThe functions rownames() and colnames() can be used to change labels of rows and columns.\nCreate a data frame with some unspecified row and column labels:\n\ntempdf &lt;- data.frame(c(1.70, 1.75,1.62),c(65, 66, 61))\ntempdf\n\n  c.1.7..1.75..1.62. c.65..66..61.\n1               1.70            65\n2               1.75            66\n3               1.62            61\n\n\nWe can explicitly set row and column names:\n\nrownames(tempdf) &lt;- c(\"Can\",\"Cem\",\"Hande\")\ncolnames(tempdf) &lt;- c(\"Height\",\"Weight\")\ntempdf\n\n      Height Weight\nCan     1.70     65\nCem     1.75     66\nHande   1.62     61"
  },
  {
    "objectID": "Data Frames.html#accessing-columns-of-data-frames",
    "href": "Data Frames.html#accessing-columns-of-data-frames",
    "title": "11  Data Frames",
    "section": "Accessing columns of data frames",
    "text": "Accessing columns of data frames\nA data frame is a list of columns; so we can access a column using the list notation we’ve seen before.\n\npeople\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\n\n\n\npeople[[1]]  # indexing with component number\n\n[1] 1.70 1.75 1.62\n\npeople$Weight  # component name\n\n[1] 65 66 61\n\npeople[[\"City\"]]\n\n[1] \"Istanbul\" \"Ankara\"   \"Izmir\""
  },
  {
    "objectID": "Data Frames.html#accessing-elements-via-matrix-like-indexing",
    "href": "Data Frames.html#accessing-elements-via-matrix-like-indexing",
    "title": "11  Data Frames",
    "section": "Accessing elements via matrix-like indexing",
    "text": "Accessing elements via matrix-like indexing\nA data frame can be indexed as if it is a matrix, using the [row, col] notation.\n\npeople\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\n\n\n\npeople[,1]  # column 1\n\n[1] 1.70 1.75 1.62\n\npeople[2,1] # row 2, column 1\n\n[1] 1.75\n\npeople[\"Cem\",\"Height\"]\n\n[1] 1.75\n\npeople[\"Can\",]\n\n    Height Weight Member     City\nCan    1.7     65   TRUE Istanbul"
  },
  {
    "objectID": "Data Frames.html#selecting-rows-using-indices",
    "href": "Data Frames.html#selecting-rows-using-indices",
    "title": "11  Data Frames",
    "section": "Selecting rows using indices",
    "text": "Selecting rows using indices\nWe can specify a vector of indices to select rows.\n\npeople\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\n\n\n\npeople[c(1,3),]\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nHande   1.62     61   TRUE    Izmir\n\npeople[c(\"Can\",\"Hande\"),]\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nHande   1.62     61   TRUE    Izmir\n\n\nA negative index, again, indicates an element that is to be omitted.\n\npeople[-2,-3]\n\n      Height Weight     City\nCan     1.70     65 Istanbul\nHande   1.62     61    Izmir"
  },
  {
    "objectID": "Data Frames.html#selecting-some-columns",
    "href": "Data Frames.html#selecting-some-columns",
    "title": "11  Data Frames",
    "section": "Selecting some columns",
    "text": "Selecting some columns\nWe can provide a list of column names or numeric indices to get a subframe.\nAll rows, only Member and City columns:\n\npeople[, c(\"Member\",\"City\")]\n\n      Member     City\nCan     TRUE Istanbul\nCem    FALSE   Ankara\nHande   TRUE    Izmir\n\n\nSame, with numeric indices:\n\npeople[, 3:4]\n\n      Member     City\nCan     TRUE Istanbul\nCem    FALSE   Ankara\nHande   TRUE    Izmir\n\n\nA subset of rows and a subset of columns:\n\npeople[c(\"Can\",\"Cem\"), 1:2]\n\n    Height Weight\nCan   1.70     65\nCem   1.75     66"
  },
  {
    "objectID": "Data Frames.html#filtering-data-frames",
    "href": "Data Frames.html#filtering-data-frames",
    "title": "11  Data Frames",
    "section": "Filtering data frames",
    "text": "Filtering data frames\nThe Boolean operators we use for filtering vectors are applicable to data frames as well.\n\npeople\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\n\n\nFilter for people who are at least 1.70, or in Izmir:\n\npeople$Height &gt;= 1.70 | people$City == \"Izmir\"\n\n[1] TRUE TRUE TRUE\n\n\nGet the city of people who are at least 1.70:\n\npeople[ people$Height&gt;= 1.70, \"City\"]\n\n[1] \"Istanbul\" \"Ankara\"  \n\n\nShow only members, all columns:\n\npeople[ people$Member, ]\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nHande   1.62     61   TRUE    Izmir\n\n\nShow the height and city of members:\n\npeople[ people$Member, c(\"Height\",\"City\")]\n\n      Height     City\nCan     1.70 Istanbul\nHande   1.62    Izmir"
  },
  {
    "objectID": "Data Frames.html#adding-new-rows",
    "href": "Data Frames.html#adding-new-rows",
    "title": "11  Data Frames",
    "section": "Adding new rows",
    "text": "Adding new rows\nAs with matrices, we can use rbind() to add a new row to an existing data frame. The new row is usually in the form of a list.\nBefore:\n\npeople\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\n\n\nAfter:\n\nrbind(people, Lale=list(1.71, 64, FALSE, \"Bursa\"))\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\nLale    1.71     64  FALSE    Bursa"
  },
  {
    "objectID": "Data Frames.html#concatenate-two-data-frames",
    "href": "Data Frames.html#concatenate-two-data-frames",
    "title": "11  Data Frames",
    "section": "Concatenate two data frames",
    "text": "Concatenate two data frames\nrbind() can also be used to extend a dataframe with another.\nLet’s generate a new data frame:\n\nnewpeople &lt;- data.frame(\n    Weight=c(64, 50),\n    Member=c(F,T),\n    City=c(\"Bursa\",\"Istanbul\"),\n    Height=c(Lale=1.71, Ziya=1.45)\n)\nnewpeople\n\n     Weight Member     City Height\nLale     64  FALSE    Bursa   1.71\nZiya     50   TRUE Istanbul   1.45\n\n\nCombine this new dataframe with the old one:\n\nrbind(people, newpeople)\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\nLale    1.71     64  FALSE    Bursa\nZiya    1.45     50   TRUE Istanbul"
  },
  {
    "objectID": "Data Frames.html#adding-new-columns",
    "href": "Data Frames.html#adding-new-columns",
    "title": "11  Data Frames",
    "section": "Adding new columns",
    "text": "Adding new columns\nSuppose we want to add a column for BMI, which we calculate using the existing columns. We can do this using cbind() as follows.\n\npeople_bmi &lt;- cbind(people, people$Weight/people$Height^2)\npeople_bmi\n\n      Height Weight Member     City people$Weight/people$Height^2\nCan     1.70     65   TRUE Istanbul                      22.49135\nCem     1.75     66  FALSE   Ankara                      21.55102\nHande   1.62     61   TRUE    Izmir                      23.24341\n\n\nNote that the name of the new column is automatically set. It’s ugly! We can change this using the names() or colnames() functions.\n\nnames(people_bmi)[5] &lt;- \"BMI\"\npeople_bmi\n\n      Height Weight Member     City      BMI\nCan     1.70     65   TRUE Istanbul 22.49135\nCem     1.75     66  FALSE   Ankara 21.55102\nHande   1.62     61   TRUE    Izmir 23.24341\n\n\nA more direct way:\n\npeople2 &lt;- people\npeople2$BMI &lt;- people2$Weight/people2$Height^2\npeople2\n\n      Height Weight Member     City      BMI\nCan     1.70     65   TRUE Istanbul 22.49135\nCem     1.75     66  FALSE   Ankara 21.55102\nHande   1.62     61   TRUE    Izmir 23.24341\n\n\nWe can create a new column as we please. For example, add a Boolean column for obesity value.\n\npeople2$obese &lt;- people2$BMI&gt;30\npeople2\n\n      Height Weight Member     City      BMI obese\nCan     1.70     65   TRUE Istanbul 22.49135 FALSE\nCem     1.75     66  FALSE   Ankara 21.55102 FALSE\nHande   1.62     61   TRUE    Izmir 23.24341 FALSE\n\n\nWe can remove a column by setting it to NULL.\n\npeople2$obese &lt;- NULL\npeople2\n\n      Height Weight Member     City      BMI\nCan     1.70     65   TRUE Istanbul 22.49135\nCem     1.75     66  FALSE   Ankara 21.55102\nHande   1.62     61   TRUE    Izmir 23.24341"
  },
  {
    "objectID": "Data Frames.html#merging-data-frames",
    "href": "Data Frames.html#merging-data-frames",
    "title": "11  Data Frames",
    "section": "Merging data frames",
    "text": "Merging data frames\nThe merge(x,y) function is used to create a new data frame from existing frames x and y, by combining them along a common column.\n\ndf1 &lt;- data.frame(Name=c(\"Can\",\"Cem\",\"Hande\"), Phone=c(1234,4345,8492))\ndf2 &lt;- data.frame(Age=c(25,27,26), Name=c(\"Cem\",\"Hande\",\"Can\"))\n\n\ndf1\n\n   Name Phone\n1   Can  1234\n2   Cem  4345\n3 Hande  8492\n\ndf2\n\n  Age  Name\n1  25   Cem\n2  27 Hande\n3  26   Can\n\nmerge(df1,df2)\n\n   Name Phone Age\n1   Can  1234  26\n2   Cem  4345  25\n3 Hande  8492  27\n\n\nThe merge() function automatically detected the Name column that is common in both, and merged the data on it.\nEven though the order of names are different in the two frames, merge() merged them correctly.\nWhat if the columns we want to merge on have different names in the two dataframes? In that case we use the by.x and by.y arguments to merge().\n\ndf2 &lt;- data.frame(Age=c(25,27,26), first_name=c(\"Cem\",\"Hande\",\"Can\"))\ndf1\n\n   Name Phone\n1   Can  1234\n2   Cem  4345\n3 Hande  8492\n\ndf2\n\n  Age first_name\n1  25        Cem\n2  27      Hande\n3  26        Can\n\n\n\nmerge(df1, df2, by.x=\"Name\", by.y=\"first_name\")\n\n   Name Phone Age\n1   Can  1234  26\n2   Cem  4345  25\n3 Hande  8492  27\n\n\nTo merge by row names, specify\"row.names\" for both by.x and by.y.\nSuppose we have a new data frame holding phone numbers, rows indexed by names.\n\nphonebook &lt;- data.frame(phone=c(Can=1234, Cem=4345, Lale=8492))\nphonebook\n\n     phone\nCan   1234\nCem   4345\nLale  8492\n\n\nAnd our old people dataframe:\n\npeople\n\n      Height Weight Member     City\nCan     1.70     65   TRUE Istanbul\nCem     1.75     66  FALSE   Ankara\nHande   1.62     61   TRUE    Izmir\n\n\nNote that phonebook does not contain Hande, and people does not contain Lale.\nThe merge operation takes names that are common in both dataframes:\n\nmerge(people, phonebook, by.x=\"row.names\", by.y=\"row.names\")\n\n  Row.names Height Weight Member     City phone\n1       Can   1.70     65   TRUE Istanbul  1234\n2       Cem   1.75     66  FALSE   Ankara  4345"
  },
  {
    "objectID": "Data Frames.html#inner-and-outer-joins",
    "href": "Data Frames.html#inner-and-outer-joins",
    "title": "11  Data Frames",
    "section": "Inner and outer joins",
    "text": "Inner and outer joins\nIn the previous example, the merge operation removed Hande and Lale, because they are missing in one or the other data frame. This is called an inner join operation.\nIn contrast, an outer join operation merges with all available data, leaving some entries NA.\nThe all=TRUE option of merge() performs an outer join:\n\nmerged_df &lt;- merge(people, phonebook,\n                   by.x=\"row.names\", by.y=\"row.names\", \n                   all=TRUE)\nmerged_df\n\n  Row.names Height Weight Member     City phone\n1       Can   1.70     65   TRUE Istanbul  1234\n2       Cem   1.75     66  FALSE   Ankara  4345\n3     Hande   1.62     61   TRUE    Izmir    NA\n4      Lale     NA     NA     NA     &lt;NA&gt;  8492\n\n\nHande was not in the phonebook data, so the phone entry for her is NA. Similarly, Lale was absent in the people data, so all columns except phone are NA for her.\nThe merge has converted row names to a new column Row.names. To restore row names as before,assign them using rownames(), and remove the redundant \"Row.names\" column afterwards.\n\nrownames(merged_df) &lt;- merged_df$Row.names\nmerged_df\n\n      Row.names Height Weight Member     City phone\nCan         Can   1.70     65   TRUE Istanbul  1234\nCem         Cem   1.75     66  FALSE   Ankara  4345\nHande     Hande   1.62     61   TRUE    Izmir    NA\nLale       Lale     NA     NA     NA     &lt;NA&gt;  8492\n\n\n\nmerged_df$Row.names &lt;- NULL\nmerged_df\n\n      Height Weight Member     City phone\nCan     1.70     65   TRUE Istanbul  1234\nCem     1.75     66  FALSE   Ankara  4345\nHande   1.62     61   TRUE    Izmir    NA\nLale      NA     NA     NA     &lt;NA&gt;  8492"
  },
  {
    "objectID": "Data Frames.html#applications",
    "href": "Data Frames.html#applications",
    "title": "11  Data Frames",
    "section": "Applications",
    "text": "Applications\n\nAnalyze the grades in a class\nCreate a dataframe holding the exam scores of a small class:\n\ngrades &lt;- data.frame(\n    student = c(\"Can\",\"Cem\",\"Hande\",\"Lale\",\"Ziya\"),\n    midterm1 = c(45, 74, 67, 52, 31),\n    midterm2 = c(68, 83, 56, 22, 50),\n    final = c(59, 91, 62, 49, 65))\ngrades\n\n  student midterm1 midterm2 final\n1     Can       45       68    59\n2     Cem       74       83    91\n3   Hande       67       56    62\n4    Lale       52       22    49\n5    Ziya       31       50    65\n\n\nGet weighted average scores, assuming a weight of 30% for each midterm and 40% for the final.\n\ngrades$score &lt;- grades$midterm1*0.3 + grades$midterm2*0.3 + grades$final*0.4\ngrades\n\n  student midterm1 midterm2 final score\n1     Can       45       68    59  57.5\n2     Cem       74       83    91  83.5\n3   Hande       67       56    62  61.7\n4    Lale       52       22    49  41.8\n5    Ziya       31       50    65  50.3\n\n\nGet averages of columns. grades[,-1] drops the name column, then we take the mean along the second dimension (columns).\n\napply(grades[,-1],2,mean)\n\nmidterm1 midterm2    final    score \n   53.80    55.80    65.20    58.96 \n\n\nThe “simple apply” does that more directly:\n\nsapply(grades[,-1],mean)\n\nmidterm1 midterm2    final    score \n   53.80    55.80    65.20    58.96 \n\n\nALternatively, “list apply” returns the same result as a list.\n\nlapply(grades[,-1],mean)\n\n$midterm1\n[1] 53.8\n\n$midterm2\n[1] 55.8\n\n$final\n[1] 65.2\n\n$score\n[1] 58.96\n\n\nAssign letter grades using scores:\n\nlettergrade &lt;- function(score){\n    if (score &gt; 80) \"A\" else if (score &gt; 70) \"B\" else if (score&gt;60) \"C\" else if (score&gt;50) \"D\" else \"F\"\n}\ngrades$letter &lt;- sapply(grades$score, lettergrade)\ngrades\n\n  student midterm1 midterm2 final score letter\n1     Can       45       68    59  57.5      D\n2     Cem       74       83    91  83.5      A\n3   Hande       67       56    62  61.7      C\n4    Lale       52       22    49  41.8      F\n5    Ziya       31       50    65  50.3      D\n\n\n\n\nGrading multiple-choice exams\nOur students have taken a multiple-choice exam. All their answers, as well as the answer key, are recorded as vectors.\n\nkey &lt;- c(\"A\",\"B\",\"C\",\"D\",\"A\")\nanswers &lt;- rbind(\n    c(\"A\", \"B\", \"D\", \"A\", \"B\"),\n    c(\"A\", \"D\", \"C\", \"D\", \"A\"),\n    c(\"B\", \"B\", \"C\", \"D\", \"B\"),\n    c(\"A\", \"B\", \"C\", \"D\", \"D\"),\n    c(\"C\", \"C\", \"C\", \"D\", \"A\")\n)\n\nWe initialize a separate data frame with the student information:\n\nexam &lt;- data.frame(answers,\n                   row.names = c(\"Can\",\"Cem\",\"Hande\",\"Lale\",\"Ziya\"))\nexam\n\n      X1 X2 X3 X4 X5\nCan    A  B  D  A  B\nCem    A  D  C  D  A\nHande  B  B  C  D  B\nLale   A  B  C  D  D\nZiya   C  C  C  D  A\n\n\nNow we can process this data frame to get the number of correct answers for each student. For that, we can use the sum(x==y) operation, which gives us the number of equal elements.\n\nkey\n\n[1] \"A\" \"B\" \"C\" \"D\" \"A\"\n\nexam[1,]==key\n\n      X1   X2    X3    X4    X5\nCan TRUE TRUE FALSE FALSE FALSE\n\nsum(exam[1,]==key)\n\n[1] 2\n\n\nTo repeat this for each row, we create a function that returns the number of matching answers.\n\nncorrect &lt;- function(x){\n    sum(x==key)\n}\nncorrect(exam[1,])\n\n[1] 2\n\n\nAnd we use apply() to apply it to every row.\n\napply(exam,1,ncorrect)\n\n  Can   Cem Hande  Lale  Ziya \n    2     4     3     4     3 \n\n\nWe can store this result in a new column in the original dataframe itself.\n\nexam$correct &lt;- apply(exam,1,ncorrect)\nexam\n\n      X1 X2 X3 X4 X5 correct\nCan    A  B  D  A  B       2\nCem    A  D  C  D  A       4\nHande  B  B  C  D  B       3\nLale   A  B  C  D  D       4\nZiya   C  C  C  D  A       3\n\n\n\n\nStore database\nSuppose you run a retail store and you keep a data base of your items, their unit price, and the value-added tax (VAT) rate for each item. For example:\n\nitems &lt;- data.frame(\n    row.names = c(\"Milk\",\"Meat\",\"Toothpaste\",\"Pencil\",\"Detergent\"),\n    vat = c(0.05, 0.04, 0.05, 0.06, 0.03),\n    unitprice = c(10, 20, 5, 1, 4)\n)\nitems\n\n            vat unitprice\nMilk       0.05        10\nMeat       0.04        20\nToothpaste 0.05         5\nPencil     0.06         1\nDetergent  0.03         4\n\n\nYou get some orders, which your automated system stores with an order ID:\n\norders &lt;- data.frame(\n    row.names = c(\"1234\",\"5761\",\"1832\"), # order ID\n    item = c(\"Milk\",\"Meat\",\"Toothpaste\"),\n    amount = c(3,1,2))\norders\n\n           item amount\n1234       Milk      3\n5761       Meat      1\n1832 Toothpaste      2\n\n\nOur task is to add a new column to the orders data frame that holds the total payment for each order, including the VAT.\n  item       amount vat  unitprice total\n1 Meat       1      0.04 20        20.8 \n2 Milk       3      0.05 10        31.5 \n3 Toothpaste 2      0.05  5        10.5\nLet’s merge orders and items with an inner join, assign the result in a new data frame.\n\norders2 &lt;- merge(orders,items,by.x=\"item\",by.y=\"row.names\")\norders2\n\n        item amount  vat unitprice\n1       Meat      1 0.04        20\n2       Milk      3 0.05        10\n3 Toothpaste      2 0.05         5\n\n\nNow that we have the unit price and the VAT information on the same data frame, we can calculate the total due and store it in a new column.\n\norders2$total &lt;- (orders2$amount*orders2$unitprice)*(1+orders2$vat)\norders2\n\n        item amount  vat unitprice total\n1       Meat      1 0.04        20  20.8\n2       Milk      3 0.05        10  31.5\n3 Toothpaste      2 0.05         5  10.5"
  },
  {
    "objectID": "Factors.html#create-factor-variables",
    "href": "Factors.html#create-factor-variables",
    "title": "12  Factors and categories",
    "section": "Create factor variables",
    "text": "Create factor variables\nFirst, let’s generate vectors to hold the relevant data.\n\nname &lt;- c(\"Can\",\"Cem\",\"Hande\",\"Mehmet\",\"Deniz\",\"Kemal\",\"Derya\",\"Fatma\")\ngender &lt;- c(\"Male\",\"Male\",\"Female\",\"Male\",\"Female\",\"Male\",\"Female\",\"Female\")\nmode(gender)\n\n[1] \"character\"\n\n\nThese vectors are of “character” type. We can convert the gender vector to a factor variable using the factor() function.\n\ngender_fac &lt;- factor(gender)\ngender_fac\n\n[1] Male   Male   Female Male   Female Male   Female Female\nLevels: Female Male\n\nmode(gender_fac)\n\n[1] \"numeric\"\n\n\nThe mode() call on the factor variable returns numeric, because internally the levels are stored as integers 1,2,3… This fact makes it possible to add, remove, or rename levels."
  },
  {
    "objectID": "Factors.html#getting-the-levels-of-a-factor",
    "href": "Factors.html#getting-the-levels-of-a-factor",
    "title": "12  Factors and categories",
    "section": "Getting the levels of a factor",
    "text": "Getting the levels of a factor\nThe factor vector has an additional attribute, the levels information.\nGet the vector of levels:\n\nlevels(gender_fac)\n\n[1] \"Female\" \"Male\"  \n\n\nGet the number of levels:\n\nnlevels(gender_fac)\n\n[1] 2\n\n\nCommon R functions handle factors in specialized ways:\n\nsummary(gender)  # character vector\n\n   Length     Class      Mode \n        8 character character \n\n\n\nsummary(gender_fac) # factor\n\nFemale   Male \n     4      4 \n\n\nOne can change the level names easily using an assignment to the levels() function.\n\nlevels(gender_fac) &lt;- c(\"F\",\"M\")\ngender_fac\n\n[1] M M F M F M F F\nLevels: F M"
  },
  {
    "objectID": "Factors.html#indexing-and-subsetting",
    "href": "Factors.html#indexing-and-subsetting",
    "title": "12  Factors and categories",
    "section": "Indexing and subsetting",
    "text": "Indexing and subsetting\nElements of factor-valued vectors are indexed in the same way as any other vector.\n\ngender_fac[2:5]\n\n[1] M F M F\nLevels: F M\n\n\n\ngender_fac[c(3,5,7:8)]\n\n[1] F F F F\nLevels: F M\n\n\nNote that the last result is composed of only F levels. However, the factor object still stores the the full set of levels F and M."
  },
  {
    "objectID": "Factors.html#filtering-with-factors",
    "href": "Factors.html#filtering-with-factors",
    "title": "12  Factors and categories",
    "section": "Filtering with factors",
    "text": "Filtering with factors\nOur factor-valued vector:\n\ngender_fac\n\n[1] M M F M F M F F\nLevels: F M\n\n\nAs usual, the equality check returns a Boolean vector:\n\ngender_fac==\"M\"\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE\n\n\nAmong the name vector, select elements with corresponding gender \"M\".\n\nname[gender_fac==\"M\"]\n\n[1] \"Can\"    \"Cem\"    \"Mehmet\" \"Kemal\""
  },
  {
    "objectID": "Factors.html#removing-categories",
    "href": "Factors.html#removing-categories",
    "title": "12  Factors and categories",
    "section": "Removing categories",
    "text": "Removing categories\nSometimes we may want to remove one level in a category.\nAs an example, consider the following factor, where the level \"Female\" is misspelled twice as \"female\":\n\ngender_fac &lt;- factor(c(\"Male\",\"Male\",\"Female\",\"Male\",\"female\",\"Male\",\"female\",\"Female\"))\ngender_fac\n\n[1] Male   Male   Female Male   female Male   female Female\nLevels: female Female Male\n\n\nThe resulting factor has three levels, but actually \"female\" and \"Female\" should be the same the same. Let’s fix this by overwriting all occurrences of \"female\" with \"Female\".\n\ngender_fac[gender_fac==\"female\"] &lt;- \"Female\"\ngender_fac\n\n[1] Male   Male   Female Male   Female Male   Female Female\nLevels: female Female Male\n\n\nHowever, the levels attribute still lists the invalid \"female\" category. To remove it, we use the droplevels() function. It removes all levels for which there are no entries.\n\ngender_fac &lt;- droplevels(gender_fac)\ngender_fac\n\n[1] Male   Male   Female Male   Female Male   Female Female\nLevels: Female Male"
  },
  {
    "objectID": "Factors.html#nominal-and-ordinal-factors",
    "href": "Factors.html#nominal-and-ordinal-factors",
    "title": "12  Factors and categories",
    "section": "Nominal and ordinal factors",
    "text": "Nominal and ordinal factors\nConsider the following table again:\n\n\n\nName\nGender\nMonth of Birth\n\n\n\n\nCan\nMale\nJanuary\n\n\nCem\nMale\nJuly\n\n\nHande\nFemale\nMay\n\n\nMehmet\nMale\nMay\n\n\nDeniz\nFemale\nFebruary\n\n\nKemal\nMale\nJuly\n\n\nDerya\nFemale\nMay\n\n\nFatma\nFemale\nApril\n\n\n\ngender is an example of a nominal factor: There is no inherent order between levels. We cannot say whether “Male” is greater than “Female” or not.\nOn the other hand, month of birth information is an ordinal factor: Months have an inherent order, so it makes sense to say that “January” &lt; “February”.\nSuppose we use a vector to store the observed month-of-birth (MOB) data.\n\nmob &lt;- c(\"January\",\"July\",\"May\",\"May\",\"February\",\"July\",\"May\",\"April\")\n\nThere are two problems with this vector:\n\nOnly five unique months appear in it. Other possible levels of this factor are not represented.\nIt doesn’t reflect the natural order of the months. If you compare January and February to see which is greater, you get:\n\n\nmob[1] &lt; mob[5]\n\n[1] FALSE\n\n\nbecause the less-than operator compares with alphabetical order only.\nDefining the data as a factor object solves both problems, if we set the levels properly. This can be done as follows:\n\nmonths &lt;- c(\"January\",\"February\",\"March\",\"April\",\"May\",\n            \"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\")\nmob_fac &lt;- factor(mob, levels=months, ordered=TRUE)\nmob_fac\n\n[1] January  July     May      May      February July     May      April   \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\nThe ordered=TRUE setting ensures that this is an ordinal factor, and comparisons can be made in the same order levels are given.\n\nmob_fac[1] &lt; mob_fac[5]  # January &lt; February\n\n[1] TRUE\n\n\nThe summary() function gives a count of elements in each level.\n\nsummary(mob_fac)\n\n  January  February     March     April       May      June      July    August \n        1         1         0         1         3         0         2         0 \nSeptember   October  November  December \n        0         0         0         0"
  },
  {
    "objectID": "Factors.html#combining-factor-objects",
    "href": "Factors.html#combining-factor-objects",
    "title": "12  Factors and categories",
    "section": "Combining factor objects",
    "text": "Combining factor objects\nEarlier we have seen that combining two vectors into a single vector is done with the c() function:\n\nx1 &lt;- c(1,2,3,4)\nx2 &lt;- c(7,8,9)\nc(x1, x2)\n\n[1] 1 2 3 4 7 8 9\n\n\nThe same works with factor objects:\n\nmob_fac\n\n[1] January  July     May      May      February July     May      April   \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\n\nmob2 &lt;- factor(c(\"April\",\"March\",\"May\"), levels=months, ordered=TRUE)\nmob2\n\n[1] April March May  \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\n\nc(mob_fac, mob2)\n\n [1] January  July     May      May      February July     May      April   \n [9] April    March    May     \n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December"
  },
  {
    "objectID": "Factors.html#binning",
    "href": "Factors.html#binning",
    "title": "12  Factors and categories",
    "section": "Binning",
    "text": "Binning\nOften, a continuous data is converted to a categorical variable. For example, age is converted to young/middle-aged/old, body size to small/medium/large, income to low/high.\nSuppose we are given the following, numerical data:\n\nx &lt;- c(11, 18, 36, 74, 43, 81, 95, 64, 32, 51)\n\nWe want to categorize this data as small for values in [0, 30), medium for [30, 70), and high for [70, 100].\nThe notation [30,70) means that the value 30 belongs to this category, but 70 does not.\nThe cut() function generates a factor object from continuous values. The breaks parameter is used to specify the intervals.\n\ncut(x, breaks=c(0, 30, 70, 100))\n\n [1] (0,30]   (0,30]   (30,70]  (70,100] (30,70]  (70,100] (70,100] (30,70] \n [9] (30,70]  (30,70] \nLevels: (0,30] (30,70] (70,100]\n\n\nHowever, note that the ends of the intervals are not as we want. The first value of the boundary in not included in the interval, but the second value is.\nTo fix this, we set the parameter right to FALSE.\n\ncut(x, breaks=c(0, 30, 70, 100), right = F)\n\n [1] [0,30)   [0,30)   [30,70)  [70,100) [30,70)  [70,100) [70,100) [30,70) \n [9] [30,70)  [30,70) \nLevels: [0,30) [30,70) [70,100)\n\n\nBut the last value 100 is excluded now. We can include it by setting the include.lowest parameter to TRUE.\n\ncut(x, breaks = c(0, 30, 70, 100),\n    right = F, include.lowest = T)\n\n [1] [0,30)   [0,30)   [30,70)  [70,100] [30,70)  [70,100] [70,100] [30,70) \n [9] [30,70)  [30,70) \nLevels: [0,30) [30,70) [70,100]\n\n\nLevel names are automatically set. We can rename them with the labels parameter.\n\ncut(x, breaks = c(0, 30, 70, 100), \n    right = F, include.lowest = T,\n    labels = c(\"Low\",\"Medium\",\"High\"))\n\n [1] Low    Low    Medium High   Medium High   High   Medium Medium Medium\nLevels: Low Medium High"
  },
  {
    "objectID": "Factors.html#factors-and-data-frames",
    "href": "Factors.html#factors-and-data-frames",
    "title": "12  Factors and categories",
    "section": "Factors and data frames",
    "text": "Factors and data frames\nOne of the built-in data sets in R is the mtcars data. We can see its first six lines with the head() function call:\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nThis is an old data set from 1974, collecting some features of 32 automobiles. For more information, use the command help(mtcars).\nThe summary() function returns the summary statistics for each numeric field.\n\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\nEven though all data appears as numeric, some columns are actually categorical: \"cyl\" gives the number of cylinders in the engine, \"vs\" indicates if the car has a V-shaped engine (0) or a straight (0), \"am\" indicates if it has automatic transmission (0) or manual (1), \"gear\" is the number of forward gears, and \"carb\" is the number of carburetors.\nIf we convert these columns to factors, summary() and other R functions will give more relevant information about the data.\ncyl, gear and carb are ordinal factors (can be ordered meaningfully), so we set ordered=TRUE for them.\n\nmtcars$cyl &lt;- factor(mtcars$cyl, ordered=TRUE)\nmtcars$gear &lt;- factor(mtcars$gear, ordered=TRUE)\nmtcars$carb &lt;- factor(mtcars$carb, ordered=TRUE)\nmtcars$vs &lt;- factor(mtcars$vs)\nmtcars$am &lt;- factor(mtcars$am)\n\nNow we can use the summary() function to get the counts of categories in each factor field.\n\nsummary(mtcars)\n\n      mpg        cyl         disp             hp             drat      \n Min.   :10.40   4:11   Min.   : 71.1   Min.   : 52.0   Min.   :2.760  \n 1st Qu.:15.43   6: 7   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080  \n Median :19.20   8:14   Median :196.3   Median :123.0   Median :3.695  \n Mean   :20.09          Mean   :230.7   Mean   :146.7   Mean   :3.597  \n 3rd Qu.:22.80          3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920  \n Max.   :33.90          Max.   :472.0   Max.   :335.0   Max.   :4.930  \n       wt             qsec       vs     am     gear   carb  \n Min.   :1.513   Min.   :14.50   0:18   0:19   3:15   1: 7  \n 1st Qu.:2.581   1st Qu.:16.89   1:14   1:13   4:12   2:10  \n Median :3.325   Median :17.71                 5: 5   3: 3  \n Mean   :3.217   Mean   :17.85                        4:10  \n 3rd Qu.:3.610   3rd Qu.:18.90                        6: 1  \n Max.   :5.424   Max.   :22.90                        8: 1  \n\n\nThe \"vs\" (V-shaped engine or straight) and \"am\" (Automatic or manual transmission) fields have level values 0 or 1.\n\nlevels(mtcars$am)\n\n[1] \"0\" \"1\"\n\n\nLet’s replace the level values with clearer labels.\n\nlevels(mtcars$vs) &lt;- c(\"V-engine\",\"Standard\")\nlevels(mtcars$am) &lt;- c(\"Automatic\",\"Manual\")\n\n\nsummary(mtcars)\n\n      mpg        cyl         disp             hp             drat      \n Min.   :10.40   4:11   Min.   : 71.1   Min.   : 52.0   Min.   :2.760  \n 1st Qu.:15.43   6: 7   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080  \n Median :19.20   8:14   Median :196.3   Median :123.0   Median :3.695  \n Mean   :20.09          Mean   :230.7   Mean   :146.7   Mean   :3.597  \n 3rd Qu.:22.80          3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920  \n Max.   :33.90          Max.   :472.0   Max.   :335.0   Max.   :4.930  \n       wt             qsec              vs             am     gear   carb  \n Min.   :1.513   Min.   :14.50   V-engine:18   Automatic:19   3:15   1: 7  \n 1st Qu.:2.581   1st Qu.:16.89   Standard:14   Manual   :13   4:12   2:10  \n Median :3.325   Median :17.71                                5: 5   3: 3  \n Mean   :3.217   Mean   :17.85                                       4:10  \n 3rd Qu.:3.610   3rd Qu.:18.90                                       6: 1  \n Max.   :5.424   Max.   :22.90                                       8: 1"
  },
  {
    "objectID": "Factors.html#plotting-factor-variables",
    "href": "Factors.html#plotting-factor-variables",
    "title": "12  Factors and categories",
    "section": "Plotting factor variables",
    "text": "Plotting factor variables\nWhen given a factor variable, the plot() function displays a bar plot by default.\n\nplot(mtcars$am)\n\n\n\n\nWhen the x-axis is categorical and the y-axis is numerical, a boxplot is displayed.\n\nplot(x = mtcars$vs, y=mtcars$hp, ylab=\"Horse power\")\n\n\n\n\nIf both axes are categorical, a stacked bar plot is displayed.\n\nplot(x = mtcars$vs, y=mtcars$gear, xlab=\"Engine type\",ylab=\"Gear\")"
  },
  {
    "objectID": "Factors.html#the-table-function",
    "href": "Factors.html#the-table-function",
    "title": "12  Factors and categories",
    "section": "The table() function",
    "text": "The table() function\nThe table() function can be used to return counts of elements in each level of a categorical variable.\n\naffils &lt;- c(\"R\",\"D\",\"D\",\"R\",\"U\",\"D\") # political party affiliations\ntable(affils)\n\naffils\nD R U \n3 2 1 \n\n\nIt can be used to create contingency tables, such as two-way tables:\n\ntable(mtcars$am, mtcars$vs)\n\n           \n            V-engine Standard\n  Automatic       12        7\n  Manual           6        7\n\n\nOr three-way tables:\n\ntable(mtcars$am, mtcars$vs, mtcars$gear,\n      dnn=c(\"Transmission\",\"Engine\",\"Gears\"))\n\n, , Gears = 3\n\n            Engine\nTransmission V-engine Standard\n   Automatic       12        3\n   Manual           0        0\n\n, , Gears = 4\n\n            Engine\nTransmission V-engine Standard\n   Automatic        0        4\n   Manual           2        6\n\n, , Gears = 5\n\n            Engine\nTransmission V-engine Standard\n   Automatic        0        0\n   Manual           4        1"
  },
  {
    "objectID": "Factors.html#the-tapply-function",
    "href": "Factors.html#the-tapply-function",
    "title": "12  Factors and categories",
    "section": "The tapply() function",
    "text": "The tapply() function\nThis is more general than table(). Both apply on groups broken by categories, but table() gives only the counts of these groups, while tapply() applies any function to the groups, such as the mean, median, or maximum.\nThe function call tapply(x, f, func) breaks the vector x by levels given in f and applies the function func on each subgroup.\nGiven the ages and party affiliations of a group of people, find the average age of people in every party:\n\nages &lt;- c(25, 26, 55, 37, 21, 42) # ages of some people\naffils &lt;- c(\"R\",\"D\",\"D\",\"R\",\"U\",\"D\") # party affiliations of the same people\ntapply(ages, affils, mean)\n\n D  R  U \n41 31 21 \n\n\nUse the mtcars data again. Get the mean miles-per-gallon for each engine type.\n\ntapply(mtcars$mpg, mtcars$vs, mean)\n\nV-engine Standard \n16.61667 24.55714 \n\n\nGet the mean miles-per-gallon again, broken by the engine type and transmission type.\n\ntapply(mtcars$mpg, list(mtcars$vs, mtcars$am), mean)\n\n         Automatic   Manual\nV-engine  15.05000 19.75000\nStandard  20.74286 28.37143\n\n\nFinally, look at the built-in iris database, which stores measurements of sepals and petals of three species of iris flower.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nLet’s get the mean sepal length of flowers, broken by the species:\n\ntapply(iris$Sepal.Length, iris$Species, mean)\n\n    setosa versicolor  virginica \n     5.006      5.936      6.588"
  },
  {
    "objectID": "File io.html#reading-data-from-a-text-file",
    "href": "File io.html#reading-data-from-a-text-file",
    "title": "13  File input-output",
    "section": "Reading data from a text file",
    "text": "Reading data from a text file\nData is frequently stored in tabular form in text files. The read.table() function can read a file from your disk and return a data frame containing that data.\n\nhelp(read.table)\n\nSuppose we have a data file mydata.txt with the following contents:\nCan 1.70 65\nCem 1.75 66\nHande 1.62 61\nLale 1.76 64\nArda 1.78 63\nBilgin 1.77 84\nCem 1.69 75\nOzlem 1.75 65\nAli 1.73 75\nHaluk 1.71 81\nThe file can be read into a data frame simply with:\n\nhwdata &lt;- read.table(\"mydata.txt\")\nhwdata\n\n       V1   V2 V3\n1     Can 1.70 65\n2     Cem 1.75 66\n3   Hande 1.62 61\n4    Lale 1.76 64\n5    Arda 1.78 63\n6  Bilgin 1.77 84\n7     Cem 1.69 75\n8   Ozlem 1.75 65\n9     Ali 1.73 75\n10  Haluk 1.71 81\n\nclass(hwdata)\n\n[1] \"data.frame\"\n\n\nWe can change the columns of the dataframe as usual:\n\nnames(hwdata) &lt;- c(\"Name\", \"Height\",\"Weight\")\nhwdata\n\n     Name Height Weight\n1     Can   1.70     65\n2     Cem   1.75     66\n3   Hande   1.62     61\n4    Lale   1.76     64\n5    Arda   1.78     63\n6  Bilgin   1.77     84\n7     Cem   1.69     75\n8   Ozlem   1.75     65\n9     Ali   1.73     75\n10  Haluk   1.71     81\n\n\nThe function read.table() is quite versatile, and it has a lot of parameters to tune its behavior. The help documentation help(read.table) can be helpful.\nLet’s read a new data file mydata2.txt. It has a header row, and we want to set the column names of the resulting data frame accordingly:\nName Height Weight\nCan 1.70 65\nCem 1.75 66\nHande 1.62 61\nLale 1.76 64\nArda 1.78 63\nBilgin 1.77 84\nCem 1.69 75\nOzlem 1.75 65\nAli 1.73 75\nHaluk 1.71 81\nAll we need is to set the header parameter to TRUE:\n\nhwdata &lt;- read.table(\"mydata2.txt\",header = TRUE)\nhwdata\n\n     Name Height Weight\n1     Can   1.70     65\n2     Cem   1.75     66\n3   Hande   1.62     61\n4    Lale   1.76     64\n5    Arda   1.78     63\n6  Bilgin   1.77     84\n7     Cem   1.69     75\n8   Ozlem   1.75     65\n9     Ali   1.73     75\n10  Haluk   1.71     81\n\n\nNow we have another file mydata3.txt whose fields are separated with commas, instead of spaces:\n Name,Height,Weight\n Can,1.70,65\n Cem,1.75,66\n Hande,1.62,61\n Lale,1.76,64\n Arda,1.78,63\n Bilgin,1.77,84\n Cem,1.69,75\n Ozlem,1.75,65\n Ali,1.73,75\n Haluk,1.71,81\nTo accomodate for that, we set the sep parameter to the separator character, comma.\n\nhwdata &lt;- read.table(\"mydata3.txt\",header = TRUE, sep=\",\")\nhwdata\n\n     Name Height Weight\n1     Can   1.70     65\n2     Cem   1.75     66\n3   Hande   1.62     61\n4    Lale   1.76     64\n5    Arda   1.78     63\n6  Bilgin   1.77     84\n7     Cem   1.69     75\n8   Ozlem   1.75     65\n9     Ali   1.73     75\n10  Haluk   1.71     81\n\n\nNow consider a more complicated data file mydata4.txt, which contains some comments added by the data collector.\n Name,Height,Weight\n Can,1.70,65\n Cem,1.75,66\n # Here is a comment\n Hande,1.62,61\n Lale,1.76,64\n Arda,1.78,63\n Bilgin,1.77,84 # another comment\n Cem,1.69,75\n Ozlem,1.75,65\n Ali,1.73,75\n Haluk,1.71,81\nThe comment character can be set with the comment.char parameter to read.table(). Then, everything on a line starting with # is ignored:\n\nhwdata &lt;- read.table(\"mydata4.txt\",header = TRUE, sep=\",\", comment.char=\"#\")\nhwdata\n\n     Name Height Weight\n1     Can   1.70     65\n2     Cem   1.75     66\n3   Hande   1.62     61\n4    Lale   1.76     64\n5    Arda   1.78     63\n6  Bilgin   1.77     84\n7     Cem   1.69     75\n8   Ozlem   1.75     65\n9     Ali   1.73     75\n10  Haluk   1.71     81\n\n\nActually, this was a redundant setting, because by default comment.char is already set to \"#\".\nSometimes the separator character can be used in a text field, such as the space character in the column for names. In such cases, we use quotes to delimit the column’s content, as below (mydata5.txt):\n Name Height Weight\n \"Can Can\" 1.70 65\n \"Cem Cem\" 1.75 66\n \"Hande Hande\" 1.62 61\n \"Lale Lale\" 1.76 64\n \"Arda Arda\" 1.78 63\n \"Bilgin Bilgin\" 1.77 84\n \"Cem Cim\" 1.69 75\n \"Ozlem Ozlem\" 1.75 65\n \"Ali Ali\" 1.73 75\n \"Haluk Haluk\" 1.71 81\nThe function read.table() recognizes the single- or double quotes by default.\n\nhwdata &lt;- read.table(\"mydata5.txt\", header=TRUE)\nhwdata\n\n            Name Height Weight\n1        Can Can   1.70     65\n2        Cem Cem   1.75     66\n3    Hande Hande   1.62     61\n4      Lale Lale   1.76     64\n5      Arda Arda   1.78     63\n6  Bilgin Bilgin   1.77     84\n7        Cem Cim   1.69     75\n8    Ozlem Ozlem   1.75     65\n9        Ali Ali   1.73     75\n10   Haluk Haluk   1.71     81\n\n\nOther quote characters can be specified using the quote parameter. For example, consider the data file mydata6.txt:\n Name Height Weight\n %Can Can% 1.70 65\n %Cem Cem% 1.75 66\n %Hande Hande% 1.62 61\n %Lale Lale% 1.76 64\n %Arda Arda% 1.78 63\n %Bilgin Bilgin% 1.77 84\n %Cem Cim% 1.69 75\n %Ozlem Ozlem% 1.75 65\n %Ali Ali% 1.73 75\n %Haluk Haluk% 1.71 81"
  },
  {
    "objectID": "File io.html#writing-data-to-a-file",
    "href": "File io.html#writing-data-to-a-file",
    "title": "13  File input-output",
    "section": "Writing data to a file",
    "text": "Writing data to a file\nSuppose that we process the data file by, e.g., adding some columns.\n\nhwdata &lt;- read.table(\"mydata6.txt\", header=TRUE, quote=\"%\")\nhwdata$BMI &lt;- hwdata$Weight / hwdata$Height^2\nhwdata$BMI &lt;- round(hwdata$BMI, 2)  # round to two decimal places\nhwdata\n\n            Name Height Weight   BMI\n1        Can Can   1.70     65 22.49\n2        Cem Cem   1.75     66 21.55\n3    Hande Hande   1.62     61 23.24\n4      Lale Lale   1.76     64 20.66\n5      Arda Arda   1.78     63 19.88\n6  Bilgin Bilgin   1.77     84 26.81\n7        Cem Cim   1.69     75 26.26\n8    Ozlem Ozlem   1.75     65 21.22\n9        Ali Ali   1.73     75 25.06\n10   Haluk Haluk   1.71     81 27.70\n\n\nThe function write.table() can be used to store a data frame in a file.\n\nwrite.table(hwdata,\"mydata7.txt\")\n\nThis function writes the table together with the row names and column names:\n\"Name\" \"Height\" \"Weight\" \"BMI\"\n\"1\" \"Can Can\" 1.7 65 22.49\n\"2\" \"Cem Cem\" 1.75 66 21.55\n\"3\" \"Hande Hande\" 1.62 61 23.24\n\"4\" \"Lale Lale\" 1.76 64 20.66\n\"5\" \"Arda Arda\" 1.78 63 19.88\n\"6\" \"Bilgin Bilgin\" 1.77 84 26.81\n\"7\" \"Cem Cim\" 1.69 75 26.26\n\"8\" \"Ozlem Ozlem\" 1.75 65 21.22\n\"9\" \"Ali Ali\" 1.73 75 25.06\n\"10\" \"Haluk Haluk\" 1.71 81 27.7\nWe can omit the row and column names with the following parameter settings.\n\nwrite.table(hwdata,\"mydata7.txt\",row.names = FALSE, col.names = FALSE)"
  },
  {
    "objectID": "More plotting.html#scatter-plots-of-data",
    "href": "More plotting.html#scatter-plots-of-data",
    "title": "14  More plot types",
    "section": "Scatter plots of data",
    "text": "Scatter plots of data\nHere we download a real dataset of height and weights of 5000 men and 5000 women.\nread.table() can directly read from a URL:\n\nheights_weights_gender &lt;- read.table(\"https://raw.githubusercontent.com/johnmyleswhite/ML_for_Hackers/refs/heads/master/02-Exploration/data/01_heights_weights_genders.csv\", header=T, sep=\",\")\n\nThe head of the dataset:\n\nhead(heights_weights_gender)\n\n  Gender   Height   Weight\n1   Male 73.84702 241.8936\n2   Male 68.78190 162.3105\n3   Male 74.11011 212.7409\n4   Male 71.73098 220.0425\n5   Male 69.88180 206.3498\n6   Male 67.25302 152.2122\n\n\nSeparate data for men and women, plot the data for men only:\n\nmen &lt;- heights_weights_gender$Gender == \"Male\"\nmen_heights &lt;- heights_weights_gender[[\"Height\"]][men]\nmen_weights &lt;- heights_weights_gender[[\"Weight\"]][men]\nplot(men_heights, men_weights)\n\n\n\n\nChange the axis labels and add a plot title\n\nplot(men_heights, men_weights,\n     xlab = \"Height [inches]\", \n     ylab=\"Weight [pounds]\",\n     main=\"Weight vs height for men\")\n\n\n\n\nChange the marker type and color:\n\nplot(men_heights, men_weights, \n     pch=4, \n     col=\"blue\",\n     xlab = \"Height [inches]\", \n     ylab=\"Weight [pounds]\")\ntitle(\"Weight vs height for men\")\n\n\n\n\nDo the same for women:\n\nwomen &lt;- heights_weights_gender$Gender == \"Female\"\nwomen_heights &lt;- heights_weights_gender[[\"Height\"]][women]\nwomen_weights &lt;- heights_weights_gender[[\"Weight\"]][women]\n\n\nplot(women_heights, women_weights, \n     pch=20, \n     col=\"red\", \n     xlab = \"Height [inches]\", \n     ylab=\"Weight [pounds]\")\ntitle(\"Weight vs height for women\")\n\n\n\n\nLet’s try to show both genders on the same plot.\nNote: In order to add a new scatter plot on an existing plot, we need to use the points() function.\n\nplot(men_heights, men_weights, pch=4, col=\"blue\",\n    xlab = \"Height [inches]\", ylab=\"Weight [pounds]\")\npoints(women_heights, women_weights, pch=20, \n        col=\"red\", xlab = \"Height [inches]\", \n        ylab=\"Weight [pounds]\")\ntitle(\"Weight vs height of adults\")\n\n\n\n\nThe plot limits don’t look right, because they are automatically set for the male data. Let’s set the limits manually:\n\nplot(men_heights, men_weights, pch=4, col=\"blue\",\n     xlab = \"Height [inches]\", ylab=\"Weight [pounds]\",\n     xlim = c(50,80), ylim = c(60,270))\npoints(women_heights, women_weights, pch=20, col=\"red\",\n       xlab = \"Height [inches]\", ylab=\"Weight [pounds]\",\n       xlim = c(50,80), ylim = c(60,270))\ntitle(\"Weight vs height of adults\")\n\n\n\n\nWe need a legend to understand which is which:\n\nplot(men_heights, men_weights, pch=4, col=\"blue\",\n     xlab = \"Height [inches]\", ylab=\"Weight [pounds]\",\n     xlim = c(50,80), ylim = c(60,270))\npoints(women_heights, women_weights, pch=20, col=\"red\")\ntitle(\"Weight vs height of adults\")\nlegend(\"bottomright\", c(\"Men\",\"Women\"), \n       col=c(\"blue\",\"red\"), \n       pch=c(4,20), inset=0.05, cex=0.75)"
  },
  {
    "objectID": "More plotting.html#histograms",
    "href": "More plotting.html#histograms",
    "title": "14  More plot types",
    "section": "Histograms",
    "text": "Histograms\nIf we want to see how the data is distributed, we can generate a histogram.\n\nhist(men_heights)\n\n\n\n\nIncrease the number of bins to 20 and use relative frequencies, not total counts.\n\nhist(men_heights, breaks=20, freq = FALSE)\n\n\n\n\nLet’s show both genders, and use color to differentiate: Use the rgb() function whose 4th parameter gives the transparency of the color:\n\nhist(men_heights, breaks=20, freq = FALSE, col=rgb(0,0,1,0.5))\nhist(women_heights, breaks=20, freq = FALSE, add=TRUE, col=rgb(1,0,0,0.5))\n\n\n\n\nFix the title and the x-label of the plot.\n\nhist(men_heights, breaks=20, freq = FALSE, col=rgb(0,0,1,0.5),\n     main=\"Male and female heights\", xlab = \"Height [inches]\", xlim=c(50,80), ylim=c(0,0.15))\nhist(women_heights, breaks=20, freq = FALSE, col=rgb(1,0,0,0.5), add=T)"
  },
  {
    "objectID": "More plotting.html#density-plots",
    "href": "More plotting.html#density-plots",
    "title": "14  More plot types",
    "section": "Density plots",
    "text": "Density plots\nR can estimate distribution as a smooth curve, which might look better than a histogram. Plot the male and female heights with lines of thickness 2.\n\nd1 &lt;- density(men_heights)\nd2 &lt;- density(women_heights)\nplot(d1, main=\"\", xlab=\"\", col=\"blue\", lwd=2)\nlines(d2, col=\"red\", lwd=3)\n\n\n\n\nLet’s fix the plot limits and add a text label to mark the curves.\n\nd1 &lt;- density(men_heights)\nd2 &lt;- density(women_heights)\nplot(d1, main=\"Height distribution\", xlab=\"Height [inches]\",\n     col=\"blue\", lwd=2, xlim = c(50,80))\nlines(d2, col=\"red\", lwd=2)\ntext(59, 0.12, \"Women\", col=\"red\")\ntext(72, 0.12, \"Men\", col=\"blue\")"
  },
  {
    "objectID": "More plotting.html#line-plots",
    "href": "More plotting.html#line-plots",
    "title": "14  More plot types",
    "section": "Line plots",
    "text": "Line plots\nLet’s use the built-in EuStockMarkets data set to illustrate line plots.\n\nhead(EuStockMarkets)\n\n         DAX    SMI    CAC   FTSE\n[1,] 1628.75 1678.1 1772.8 2443.6\n[2,] 1613.63 1688.5 1750.5 2460.2\n[3,] 1606.51 1678.6 1718.0 2448.2\n[4,] 1621.04 1684.1 1708.1 2470.4\n[5,] 1618.16 1686.6 1723.1 2484.7\n[6,] 1610.61 1671.6 1714.3 2466.8\n\n\nThis is a time series object. Let’s convert it to a data frame:\n\neustock &lt;- as.data.frame(EuStockMarkets)\n\nPlot the stocks DAX with lines.\n\nplot(eustock$DAX, type=\"l\")\n\n\n\n\nPlot DAX with a thick red line.\n\nplot(eustock$DAX, type=\"l\", col=\"red\", lwd=3)\n\n\n\n\nPlot DAX and SMI together:\n\nplot(eustock$DAX, type=\"l\", col=\"red\")\nlines(eustock$SMI, col=\"green\")\n\n\n\n\nLet’s plot all the stocks on the same plot:\n\nnstocks &lt;- length(names(eustock))\ncolors &lt;- rainbow(nstocks)\nplot(eustock[[1]], type=\"l\", col=colors[1], xlab=\"Business days\", ylab=\"Stock value\")\nfor(i in 2:nstocks ){\n    lines(eustock[[i]], col=colors[i])\n    }\nlegend(\"topleft\", names(eustock), col=colors, lty=rep(1,nstocks), inset=0.05)"
  },
  {
    "objectID": "More plotting.html#dot-bar-and-pie-charts",
    "href": "More plotting.html#dot-bar-and-pie-charts",
    "title": "14  More plot types",
    "section": "Dot, bar, and pie charts",
    "text": "Dot, bar, and pie charts\n\ndotchart(mtcars$mpg,\n         labels=row.names(mtcars),cex=.7,\n         main=\"Gas Mileage for Car Models\", \n         xlab=\"Miles Per Gallon\")\n\n\n\n\n\ntable(mtcars$cyl)\n\n\n 4  6  8 \n11  7 14 \n\n\n\nbarplot(table(mtcars$cyl), main=\"Cylinder distribution\", xlab = \"Cylinders\")\n\n\n\n\n\ncounts &lt;- table(mtcars$cyl)\nbarplot(counts, main=\"Cylinder Distribution\", horiz=TRUE,\n  names.arg=c(\"4 cyl\", \"6 cyl\", \"8 cyl\"))\n\n\n\n\n\npie(counts, labels=c(\"4 cyl\", \"6 cyl\", \"8 cyl\"),\n    col = rainbow(length(counts)),\n    main = \"Cylinder distribution\")"
  },
  {
    "objectID": "More plotting.html#figure-arrays",
    "href": "More plotting.html#figure-arrays",
    "title": "14  More plot types",
    "section": "Figure arrays",
    "text": "Figure arrays\nSometimes we want several plots in one figure. We can achieve this with the par() function.\n\noptions(repr.plot.width=6, repr.plot.height=4)\nnormal1 &lt;- rnorm(1000)\npar(mfrow=c(1,2))\nplot(normal1)\nhist(normal1)\n\n\n\n\nHere mfrow=c(1,2) specifies that the plots should be arranged as one row and two columns, and placement of figures should go by rows.\nAlternatively, mfcol argument would force placement by columns. In this particular example, it gives an identical result.\nGenerate normally-distributed random numbers with twice the standard deviation and compare the plots.\n\noptions(repr.plot.width=8,repr.plot.height=8)\nnormal2 &lt;- rnorm(1000, sd = 2)\npar(mfrow=c(2,2))\nplot(normal1)\nhist(normal1)\nplot(normal2)\nhist(normal2)\n\n\n\n\nMatch the axis scales for better comparison.\n\npar(mfrow=c(2,2))\nplot(normal1, ylim = c(-6,6), pch=4, col=\"blue\")\nhist(normal1, xlim = c(-6,6), col=\"red\")\nplot(normal2, ylim = c(-6,6), pch=4, col=\"blue\")\nhist(normal2, xlim = c(-6,6), col=\"red\")"
  },
  {
    "objectID": "More plotting.html#parametric-plots",
    "href": "More plotting.html#parametric-plots",
    "title": "14  More plot types",
    "section": "Parametric plots",
    "text": "Parametric plots\n\noptions(repr.plot.width=8,repr.plot.height=6)\nt &lt;- seq(0, 2*pi, length.out = 200)\npar(mfrow=c(2,3))\nplot(cos(t), sin(2*t), type=\"l\")\nplot(cos(3*t), sin(2*t), type=\"l\")\nplot(cos(3*t), sin(4*t), type=\"l\")\nplot(cos(5*t), sin(4*t), type=\"l\")\nplot(cos(5*t), sin(6*t), type=\"l\")\nplot(cos(9*t), sin(8*t), type=\"l\")"
  },
  {
    "objectID": "More plotting.html#box-plots",
    "href": "More plotting.html#box-plots",
    "title": "14  More plot types",
    "section": "Box plots",
    "text": "Box plots\nA box-and-whisker plot provides a graphical summary of the distribution of data points.\n\nrandnums &lt;- rnorm(1000)\nsummary(randnums)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-3.97199 -0.75212 -0.05388 -0.07030  0.57818  2.80446 \n\n\nThe boxplot is a visual summary of the data:\n\noptions(repr.plot.width=3,repr.plot.height=5)\nboxplot(randnums)\n\n\n\n\nIf you prefer to plot it sideways:\n\noptions(repr.plot.width=6,repr.plot.height=3)\nboxplot(randnums,horizontal = TRUE)\ntitle(\"Normally distributed random numbers\")\n\n\n\n\n\nThe lines in the box indicate the first quartile, the median, and the third quartile. The length of the box is the interquartile range.\nThe lines (whiskers) extend to the observations that are within a distance of 1.5 times the box length.\nAny other points farther out are considered outliers, and shown separately.\n\nBoxplots of two or more distributions could be displayed side-by-side using par() function, but it is more informative to show them on a common set of axes.\n\nrandnums2 &lt;- rnorm(1000, sd=2)\noptions(repr.plot.width=6,repr.plot.height=3)\nboxplot(randnums, randnums2, horizontal = TRUE)\ntitle(\"Normally distributed random numbers\")\n\n\n\n\nLet’s draw boxplots on the mtcars data set.\n\nboxplot(mtcars$mpg, mtcars$hp, mtcars$wt)\n\n\n\n\nThe scales vary too much. It is better in this case to plot them on separate axes.\n\npar(mfrow = c(1,3))\nboxplot(mtcars$mpg)\ntitle(\"mpg\")\nboxplot(mtcars$hp)\ntitle(\"hp\")\nboxplot(mtcars$wt)\ntitle(\"wt\")"
  },
  {
    "objectID": "More plotting.html#strip-charts",
    "href": "More plotting.html#strip-charts",
    "title": "14  More plot types",
    "section": "Strip charts",
    "text": "Strip charts\nA strip chart is a one-dimensional scatter plot of some data. It helps us to see distributions of data points.\n\nrandnums1 &lt;- rnorm(100)\nrandnums2 &lt;- rnorm(100,mean=1,sd=0.5)\nstripchart(list(randnums1, randnums2))\n\n\n\n\nTo avoid the overlap of points, we can introduce some “jitter”.\n\nstripchart(list(randnums1, randnums2), method=\"jitter\", group.names = c(\"data 1\",\"data 2\"))\n\n\n\n\nSome embellishments:\n\nstripchart(list(randnums1, randnums2), method=\"jitter\",\n           group.names = c(\"data 1\",\"data 2\"),\n          col=c(\"red\",\"darkblue\"), pch=4)"
  },
  {
    "objectID": "More plotting.html#exporting-graphics",
    "href": "More plotting.html#exporting-graphics",
    "title": "14  More plot types",
    "section": "Exporting graphics",
    "text": "Exporting graphics\nWe frequently need to save our plot in various graphics formats so that we can put them in reports, papers or web pages. R can export graphics to many formats, including JPEG, PNG, TIFF, SVG, PDF, PS, BMP, WMF.\nFor example, here are the steps to create a PNG file\n\nCall the png() function with the file name as argument.\nGive the plotting commands. They will not produce a visible plot now.\nWhen done, call the function dev.off(). Very important, otherwise you will get a corrupted file.\n\n\noptions(repr.plot.width=4,repr.plot.height=4)\n\nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\n\n\n\n\nExport to a PNG file using the png() function.\n\npng(\"cars.png\")  # open the PNG file.\n Plotting commands\nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\n finalize the export to png\ndev.off()\n\nNote: If you are using RStudio, this can be achieved from the Plots-&gt;Export-&gt;Save menu.\nTo export to a PDF file, just change the first line:\n\npdf(\"cars.pdf\")\nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\ndev.off()\n\nThe plotting functions allow for many customizations, depending on the file format. One common customization is the size of the plot. Let’s recreate the PNG file with a different size.\n\npng(\"cars2.png\", width = 200, height = 300) \nplot(x = mtcars$wt, y = mtcars$mpg,\n     pch = 16, frame = FALSE,\n     xlab = \"wt\", ylab = \"mpg\", col = \"#2E9FDF\")\ndev.off()"
  },
  {
    "objectID": "Correlation and regression analysis.html#correlation",
    "href": "Correlation and regression analysis.html#correlation",
    "title": "15  Correlations and linear regression",
    "section": "Correlation",
    "text": "Correlation\nWe say that two variables are correlated when a change in one is associated with a change in the other.\nTo visualize this, generate some synthetic data with random noise and correlation.\n\nset.seed(6556)\nx &lt;- 1:20\ny &lt;- x + rnorm(20, sd=3)  # y is correlated with x\nz &lt;- sample(1:20,20)/2 + rnorm(20, sd=5)\ndf &lt;- data.frame(x,y,z)\n\n\noptions(repr.plot.width=8, repr.plot.height=3)\npar(mfrow=c(1,3))\nplot(df$x, df$y)\nplot(df$x, df$z)\nplot(df$y, df$z)\n\n\n\n\nWe can see that x and y are correlated positively: When one increases, the other increases, too. On the other hand, z does not seem not correlated with the rest.\nLet’s check this intuition by calculating the Pearson correlation coefficient. This coeffiecient has values between -1 and 1, 1 indicating perfect positive correlation, an 0 indicating no correlation.\n\ncor(df, method=\"pearson\")\n\n          x          y          z\nx 1.0000000 0.91448499 0.11100764\ny 0.9144850 1.00000000 0.04973288\nz 0.1110076 0.04973288 1.00000000\n\n\nThe correlation coefficient between x and y is close to 1, and that between z and the others is small.\nHowever, these results might be due to luck, resulting from the finite number of data we got.\nThe correlation test gives us a confidence interval about this result.\n\ncor.test(df$x, df$y, method=\"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  df$x and df$y\nt = 9.5888, df = 18, p-value = 1.697e-08\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.7927889 0.9660614\nsample estimates:\n     cor \n0.914485 \n\n\n\ncor.test(df$x, df$z, method=\"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  df$x and df$z\nt = 0.47389, df = 18, p-value = 0.6413\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.3486394  0.5276105\nsample estimates:\n      cor \n0.1110076 \n\n\nLet’s apply this to a data set we have used before, the height and weight data for men and women.\n\nurl &lt;- \"https://raw.githubusercontent.com/johnmyleswhite/ML_for_Hackers/refs/heads/master/02-Exploration/data/01_heights_weights_genders.csv\"\nheights_weights_gender &lt;- read.table(url, header=T, sep=\",\")\nmen &lt;- heights_weights_gender$Gender == \"Male\"\nmen_heights &lt;- heights_weights_gender[[\"Height\"]][men]\nmen_weights &lt;- heights_weights_gender[[\"Weight\"]][men]\nwomen &lt;- heights_weights_gender$Gender == \"Female\"\nwomen_heights &lt;- heights_weights_gender[[\"Height\"]][women]\nwomen_weights &lt;- heights_weights_gender[[\"Weight\"]][women]\nplot(men_heights, men_weights)\n\n\n\n\n\ncor.test(men_heights,men_weights)\n\n\n    Pearson's product-moment correlation\n\ndata:  men_heights and men_weights\nt = 120.75, df = 4998, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8557296 0.8698894\nsample estimates:\n      cor \n0.8629788 \n\n\n\ncor.test(women_heights,women_weights)\n\n\n    Pearson's product-moment correlation\n\ndata:  women_heights and women_weights\nt = 113.88, df = 4998, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.8417121 0.8571417\nsample estimates:\n      cor \n0.8496086 \n\n\n\nCorrelation does not always mean causation\nIf A and B are correlated, this might mean there is a causal link between them, but this correlation can be due to other factors. It can be due to chance, even.\n\nA causes B, e.g. rain and crop growth.\nA and B influence each other; e.g., rain causes tree growth, and evaporation from large forests cause rain.\n\nHowever, correlation can also exist without causation.\n\nBoth A and B are may be influenced by another factor\n\nPure luck, no causation.\n\n(Source)\n\n\nThe Anscombe Quartet\nCorrelation is a summary statistic. It can hide important features of data.\nA famous example is the Anscombe data set, which illustrates that very different data can lead to the same correlation coefficient.\n\nanscombe\n\n   x1 x2 x3 x4    y1   y2    y3    y4\n1  10 10 10  8  8.04 9.14  7.46  6.58\n2   8  8  8  8  6.95 8.14  6.77  5.76\n3  13 13 13  8  7.58 8.74 12.74  7.71\n4   9  9  9  8  8.81 8.77  7.11  8.84\n5  11 11 11  8  8.33 9.26  7.81  8.47\n6  14 14 14  8  9.96 8.10  8.84  7.04\n7   6  6  6  8  7.24 6.13  6.08  5.25\n8   4  4  4 19  4.26 3.10  5.39 12.50\n9  12 12 12  8 10.84 9.13  8.15  5.56\n10  7  7  7  8  4.82 7.26  6.42  7.91\n11  5  5  5  8  5.68 4.74  5.73  6.89\n\n\n\noptions(repr.plot.width=8, repr.plot.height=8)\npar(mfrow = c(2,2))\nplot(anscombe$x1, anscombe$y1)\nplot(anscombe$x2, anscombe$y2)\nplot(anscombe$x3, anscombe$y3)\nplot(anscombe$x4, anscombe$y4,xlim=c(4,20))\n\n\n\n\nDespite fundamental differences, the correlation coefficient for each pair of variables is the same.\n\ncor(anscombe$x1, anscombe$y1)\n\n[1] 0.8164205\n\ncor(anscombe$x2, anscombe$y2)\n\n[1] 0.8162365\n\ncor(anscombe$x3, anscombe$y3)\n\n[1] 0.8162867\n\ncor(anscombe$x4, anscombe$y4)\n\n[1] 0.8165214"
  },
  {
    "objectID": "Correlation and regression analysis.html#linear-regression",
    "href": "Correlation and regression analysis.html#linear-regression",
    "title": "15  Correlations and linear regression",
    "section": "Linear regression",
    "text": "Linear regression\nWhen we discover a correlation between two variables \\(x\\) and \\(y\\), we may want to find out a formula for the relation between them. That way, we can predict the outcome of unobserved input values.\nWe assume a linear relationship \\(y=ax+b\\) between variables \\(x\\) and \\(y\\). Then, given the observations \\((x_1,y_1),\\ldots,(x_n,y_n)\\), the statistical procedure to determine the coefficients \\(a\\) and \\(b\\) is called linear regression.\nOnce we have some estimates \\(\\hat{a}\\) and \\(\\hat{b}\\) for the parameters, when we get a new input value \\(x\\), we can predict the outcome as \\(y=\\hat{a}x + \\hat{b}\\).\nLet’s create a synthetic data set again.\n\nset.seed(1235)\nx &lt;- 1:10 + rnorm(10,sd=2)\ny &lt;- x + rnorm(10, sd=3)\ndf &lt;- data.frame(x,y)\ndf\n\n            x         y\n1  -0.3959759 -3.217074\n2  -0.5697077  2.685184\n3   4.9799180  2.729447\n4   4.2235517  2.958473\n5   5.2284153  2.758888\n6   9.3963930 10.634494\n7   7.0956912  8.935584\n8   9.3097248  7.947907\n9  11.7305673  9.731882\n10 10.8051459 11.754786\n\n\n\nplot(x,y)\n\n\n\n\nOur purpose is to draw a line such that the distances between given points and the line are minimized. R provides a function lm() (for “linear model”) that performs this task.\n\nlinmodel &lt;- lm(y~x, data=df)\nlinmodel\n\n\nCall:\nlm(formula = y ~ x, data = df)\n\nCoefficients:\n(Intercept)            x  \n    -0.4448       0.9929  \n\n\nWe see a nonzero intercept, even though we expect zero. Is this reliable? To understand this, we look at statistical information about the regression.\n\nsummary(linmodel)\n\n\nCall:\nlm(formula = y ~ x, data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.3791 -1.6957 -0.8209  1.6796  3.6956 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  -0.4448     1.2884  -0.345 0.738831    \nx             0.9929     0.1737   5.716 0.000446 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.253 on 8 degrees of freedom\nMultiple R-squared:  0.8033,    Adjusted R-squared:  0.7787 \nF-statistic: 32.67 on 1 and 8 DF,  p-value: 0.000446\n\n\nThe output tells us that the intercept value is not statistically significant.\nA more concrete piece of information is the confidence interval.\n\nconfint(linmodel)\n\n                 2.5 %   97.5 %\n(Intercept) -3.4158320 2.526273\nx            0.5923686 1.393511\n\n\nA detailed understanding of this quantity should be delegated to a statistics class. for us, it is sufficient that the confidence interval for the intercept includes the value zero. This indicates that we have no reason to think that the intercept is nonzero.\nThe regression model can be plotted with the abline() function.\n\nplot(x,y)\nabline(linmodel, col=\"red\")\n\n\n\n\nLet’s make a prediction for \\(x=25,26,\\ldots,30\\).\n\nnewx &lt;- 25:30\npredict.lm(linmodel, data.frame(x=newx))\n\n       1        2        3        4        5        6 \n24.37871 25.37165 26.36459 27.35753 28.35047 29.34341"
  },
  {
    "objectID": "Correlation and regression analysis.html#linear-regression-of-height-and-weight-data",
    "href": "Correlation and regression analysis.html#linear-regression-of-height-and-weight-data",
    "title": "15  Correlations and linear regression",
    "section": "Linear regression of height and weight data",
    "text": "Linear regression of height and weight data\nLet’s go back to the height and weight data for men and women. We have already established that there is a strong correlation between these variables, within each gender.\n\ndf &lt;- data.frame(men_heights,men_weights,women_heights,women_weights)\nhead(df)\n\n  men_heights men_weights women_heights women_weights\n1    73.84702    241.8936      58.91073      102.0883\n2    68.78190    162.3105      65.23001      141.3058\n3    74.11011    212.7409      63.36900      131.0414\n4    71.73098    220.0425      64.48000      128.1715\n5    69.88180    206.3498      61.79310      129.7814\n6    67.25302    152.2122      65.96802      156.8021\n\n\nThe next question is, how much does the weight increase for every inch of height?\nLet’s train a linear model for each gender. The coefficient (slope) is the answer to this question.\n\nmen_hw_model &lt;- lm(\"men_weights ~ men_heights\",\n  data=df)\nwomen_hw_model &lt;- lm(\"women_weights ~ women_heights\", \n  data=df)\n\nmen_hw_model\n\n\nCall:\nlm(formula = \"men_weights ~ men_heights\", data = df)\n\nCoefficients:\n(Intercept)  men_heights  \n   -224.499        5.962  \n\n\nSo, for every additional inch in height, a man’s weight increases, on average, by about 6 lbs.\n\nplot(men_heights,men_weights)\nabline(men_hw_model,col=\"red\")\n\n\n\n\nRepeating the same for women, we see almost the same value for the coefficient.\n\nwomen_hw_model\n\n\nCall:\nlm(formula = \"women_weights ~ women_heights\", data = df)\n\nCoefficients:\n  (Intercept)  women_heights  \n     -246.013          5.994  \n\nplot(women_heights,women_weights)\nabline(women_hw_model,col=\"red\")\n\n\n\n\nThe two linear models mainly differ in their intercepts."
  },
  {
    "objectID": "Correlation and regression analysis.html#linear-regression-with-multiple-variables",
    "href": "Correlation and regression analysis.html#linear-regression-with-multiple-variables",
    "title": "15  Correlations and linear regression",
    "section": "Linear regression with multiple variables",
    "text": "Linear regression with multiple variables\nOur linear model can involve two independent variables: \\[y = a_0 + a_1x_1 + a_2 x_2\\]\nLet’s generate some synthetic data by adding random noise around \\(y = x_1+2x_2\\):\n\n# generate synthetic data\nset.seed(1234)\nx1 &lt;- sample(1:20,20) + rnorm(20,sd=2)\nx2 &lt;- sample(1:20,20)/2 + rnorm(20, sd=5)\n\ny &lt;- 0 + 1*x1 + 2*x2 + rnorm(10, sd=3)\ndf &lt;- data.frame(x1,x2,y)\ndf\n\n          x1         x2         y\n1  12.625346 -2.2599294 12.208969\n2   3.745128  5.8808594 19.495541\n3  12.036633  7.5157502 28.077552\n4  16.410487 -4.0301563  8.370853\n5   7.705962  5.0896204 16.518797\n6  20.736362  1.9555519 23.547894\n7   6.751271 -2.0748100  4.546511\n8   4.620524  0.6884524 12.208242\n9   2.010014  7.3152791 16.180377\n10  6.924739 14.7390874 32.230811\n11 15.447952  3.1332329 25.817899\n12  9.006522 14.0295481 41.054313\n13 11.022790 -4.7890427  2.454123\n14 20.019720  6.7829423 33.606283\n15 14.356543 22.2449554 57.480047\n16 10.059126  2.3261981 13.611950\n17 13.540943 -2.8481679  9.789467\n18 -3.408696  5.4619762 13.726069\n19 19.086346 10.8854222 40.396995\n20  3.042854  3.3069613  5.484674\n\n\n\nplot(df)\n\n\n\n\nUsing the same formula system, we can simply extend the regression to two independent variables:\n\nlinmodel2 &lt;- lm(y~x1+x2, data=df)\nlinmodel2\n\n\nCall:\nlm(formula = y ~ x1 + x2, data = df)\n\nCoefficients:\n(Intercept)           x1           x2  \n     2.7540       0.8876       1.8784  \n\nconfint(linmodel2)\n\n                 2.5 %   97.5 %\n(Intercept) -0.1173064 5.625245\nx1           0.6656861 1.109491\nx2           1.6702903 2.086563"
  },
  {
    "objectID": "Correlation and regression analysis.html#linear-regression-with-polynomials",
    "href": "Correlation and regression analysis.html#linear-regression-with-polynomials",
    "title": "15  Correlations and linear regression",
    "section": "Linear regression with polynomials",
    "text": "Linear regression with polynomials\nThe name “linear regression” might suggest that it cannot be used for fitting nonlinear models, such as polynomials \\(y=a_0 + a_1x + a_2x^2 + a_3x^3+...\\)\nHowever, by treating different powers as independent variables, we can treat this as a multiple regression model.\nConsider the following synthetic data:\n\nset.seed(8764)\nx &lt;- 0:19\ny &lt;- -0.1*x^2 + 2*x + 1 + rnorm(20, sd=2)\nplot(x,y)\n\n\n\n\nThis model is obviously not linear in \\(x\\). To apply linear regression, create new variables: \\(x_1 := x\\) and \\(x_2 := x^2\\). Then we can set up a linear model with two independent variables as before.\n\nx1 &lt;- x\nx2 &lt;- x^2\nquadmodel &lt;- lm(y~x1+x2, data=data.frame(x1,x2,y))\nquadmodel\n\n\nCall:\nlm(formula = y ~ x1 + x2, data = data.frame(x1, x2, y))\n\nCoefficients:\n(Intercept)           x1           x2  \n    -0.4860       2.3705      -0.1202  \n\n\nThe estimated model is \\(\\hat{y} = -0.1202x^2 + 2.3705x-0.4860\\), while the truth was \\(y=-0.1x^2 + 2x -1\\).\nWe cannot plot the fitted curve directly with abline(). Instead, we need to extract the model coefficients and set up a predictions vector with it.\n\nquadmodel$coefficients\n\n(Intercept)          x1          x2 \n -0.4859914   2.3704527  -0.1201814 \n\n\n\na &lt;- quadmodel$coefficients[\"x1\"]\nb &lt;- quadmodel$coefficients[\"x2\"]\nc &lt;- quadmodel$coefficients[\"(Intercept)\"]\nc(a,b,c)\n\n         x1          x2 (Intercept) \n  2.3704527  -0.1201814  -0.4859914 \n\n\n\nxp &lt;- seq(0,20,length.out = 100)\nyp &lt;- a*xp + b*xp^2 + c\nplot(x,y)\nlines(xp,yp, col=\"red\")\n\n\n\n\nWe can check the statistical significance of fitted parameters:\n\nsummary(quadmodel)\n\n\nCall:\nlm(formula = y ~ x1 + x2, data = data.frame(x1, x2, y))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.3577 -0.8349  0.0507  1.0750  2.5515 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -0.48599    0.96133  -0.506     0.62    \nx1           2.37045    0.23452  10.108 1.32e-08 ***\nx2          -0.12018    0.01192 -10.086 1.36e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.579 on 17 degrees of freedom\nMultiple R-squared:  0.8592,    Adjusted R-squared:  0.8427 \nF-statistic: 51.88 on 2 and 17 DF,  p-value: 5.789e-08\n\n\nThe confidence intervals for estimated parameters:\n\nconfint(quadmodel)\n\n                 2.5 %      97.5 %\n(Intercept) -2.5142103  1.54222740\nx1           1.8756591  2.86524640\nx2          -0.1453202 -0.09504259"
  }
]